; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\httpdcallback.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\httpdcallback.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=494 -I../sdk/1.50/include/ -I../inc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -D__KEIL_MDK__ -D__LPB100__ --enum_is_int --omf_browse=.\output\httpdcallback.crf ..\src\HttpdCallBack.c]
                          THUMB

                          AREA ||i.GetCountDown||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  GetCountDown PROC
;;;1244   *******************************************************************************/
;;;1245   int GetCountDown(int ArgPort,char *pArgBuf)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1246   {
000002  b087              SUB      sp,sp,#0x1c
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;1247       struct tm *pStartTime;
;;;1248       int        iLen;
;;;1249       pStartTime = localtime(&CountDownTurnOff[ArgPort].StartTimePoint);
000008  4915              LDR      r1,|L1.96|
00000a  eb011105          ADD      r1,r1,r5,LSL #4
00000e  1d08              ADDS     r0,r1,#4
000010  f7fffffe          BL       localtime
000014  4604              MOV      r4,r0
;;;1250       iLen = sprintf(pArgBuf, "{\"start\":\"%d-%02d-%02d,%02d:%02d:%02d\",\"switch\":%d,\"delay\":%d}",
000016  4812              LDR      r0,|L1.96|
000018  eb001005          ADD      r0,r0,r5,LSL #4
00001c  68c0              LDR      r0,[r0,#0xc]
00001e  4910              LDR      r1,|L1.96|
000020  eb011105          ADD      r1,r1,r5,LSL #4
000024  7849              LDRB     r1,[r1,#1]
000026  e9d43200          LDRD     r3,r2,[r4,#0]
00002a  e9cd2302          STRD     r2,r3,[sp,#8]
00002e  e9cd1004          STRD     r1,r0,[sp,#0x10]
000032  490c              LDR      r1,|L1.100|
000034  f891103a          LDRB     r1,[r1,#0x3a]  ; DevInfoObj
000038  68a0              LDR      r0,[r4,#8]
00003a  4408              ADD      r0,r0,r1
00003c  380c              SUBS     r0,r0,#0xc
00003e  68e1              LDR      r1,[r4,#0xc]
000040  e9cd1000          STRD     r1,r0,[sp,#0]
000044  6920              LDR      r0,[r4,#0x10]
000046  1c43              ADDS     r3,r0,#1
000048  6960              LDR      r0,[r4,#0x14]
00004a  f200726c          ADD      r2,r0,#0x76c
00004e  a106              ADR      r1,|L1.104|
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       __2sprintf
000056  4607              MOV      r7,r0
;;;1251                                pStartTime->tm_year+1900,
;;;1252                                pStartTime->tm_mon+1,
;;;1253                                pStartTime->tm_mday,
;;;1254                                pStartTime->tm_hour+DevInfoObj.TimeZone-12,            //加上时区
;;;1255                                pStartTime->tm_min,
;;;1256                                pStartTime->tm_sec,
;;;1257                                CountDownTurnOff[ArgPort].onOrOff,
;;;1258                                CountDownTurnOff[ArgPort].CountDownValue);
;;;1259       return iLen;
000058  4638              MOV      r0,r7
;;;1260   }
00005a  b007              ADD      sp,sp,#0x1c
00005c  bdf0              POP      {r4-r7,pc}
;;;1261   
                          ENDP

00005e  0000              DCW      0x0000
                  |L1.96|
                          DCD      CountDownTurnOff
                  |L1.100|
                          DCD      DevInfoObj
                  |L1.104|
000068  7b227374          DCB      "{""start"":""%d-%02d-%02d,%02d:%02d:%02d"",""switch"":%"
00006c  61727422
000070  3a222564
000074  2d253032
000078  642d2530
00007c  32642c25
000080  3032643a
000084  25303264
000088  3a253032
00008c  64222c22
000090  73776974
000094  6368223a
000098  25      
000099  642c2264          DCB      "d,""delay"":%d}",0
00009d  656c6179
0000a1  223a2564
0000a5  7d00    
0000a7  00                DCB      0

                          AREA ||i.GetDevRule||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  GetDevRule PROC
;;;1162   
;;;1163   char *GetDevRule(char *pDataBuf) 
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1164   { 
000004  b0a0              SUB      sp,sp,#0x80
000006  4607              MOV      r7,r0
;;;1165       int     iLength;
;;;1166       char    *pBuf = pDataBuf;
000008  463e              MOV      r6,r7
;;;1167       uint8_t i, j, validDay;
;;;1168       char    *pTemp, PortListBuf[50*2+1];
;;;1169       
;;;1170       if(0x00 < DevRuleInfoObj.RuleCount) 
00000a  4839              LDR      r0,|L2.240|
00000c  7800              LDRB     r0,[r0,#0]  ; DevRuleInfoObj
00000e  2800              CMP      r0,#0
000010  dd6a              BLE      |L2.232|
;;;1171       { 
;;;1172           pBuf = pDataBuf; 
000012  463e              MOV      r6,r7
;;;1173           for(i=0; i<DevRuleInfoObj.RuleCount; i++) 
000014  2400              MOVS     r4,#0
000016  e060              B        |L2.218|
                  |L2.24|
;;;1174           { 
;;;1175               validDay   = DevRuleInfoObj.SwitchRulePool[i].SwOpDateObj;
000018  4835              LDR      r0,|L2.240|
00001a  3008              ADDS     r0,r0,#8
00001c  eb001044          ADD      r0,r0,r4,LSL #5
000020  7845              LDRB     r5,[r0,#1]
;;;1176               pTemp      = PortListBuf; 
000022  f10d0a18          ADD      r10,sp,#0x18
;;;1177               for(j=0; j<PORT_NUM; j++) 
000026  f04f0900          MOV      r9,#0
00002a  e010              B        |L2.78|
                  |L2.44|
;;;1178               { 
;;;1179                   iLength = sprintf(pTemp, "%d,", DevRuleInfoObj.SwitchRulePool[i].PortArr[j]); 
00002c  4830              LDR      r0,|L2.240|
00002e  3008              ADDS     r0,r0,#8
000030  eb001044          ADD      r0,r0,r4,LSL #5
000034  1c80              ADDS     r0,r0,#2
000036  f8102009          LDRB     r2,[r0,r9]
00003a  a12e              ADR      r1,|L2.244|
00003c  4650              MOV      r0,r10
00003e  f7fffffe          BL       __2sprintf
000042  4680              MOV      r8,r0
;;;1180                   pTemp  += iLength; 
000044  44c2              ADD      r10,r10,r8
000046  f1090001          ADD      r0,r9,#1              ;1177
00004a  f00009ff          AND      r9,r0,#0xff           ;1177
                  |L2.78|
00004e  f1b90f06          CMP      r9,#6                 ;1177
000052  dbeb              BLT      |L2.44|
;;;1181               } 
;;;1182               *(pTemp-1) = '\0';
000054  2000              MOVS     r0,#0
000056  f80a0c01          STRB     r0,[r10,#-1]
;;;1183               // 
;;;1184               iLength = sprintf(pBuf, "{\"id\":%d,"
00005a  4825              LDR      r0,|L2.240|
00005c  3008              ADDS     r0,r0,#8
00005e  eb001044          ADD      r0,r0,r4,LSL #5
000062  6941              LDR      r1,[r0,#0x14]
000064  4822              LDR      r0,|L2.240|
000066  3008              ADDS     r0,r0,#8
000068  eb001044          ADD      r0,r0,r4,LSL #5
00006c  68c0              LDR      r0,[r0,#0xc]
00006e  aa06              ADD      r2,sp,#0x18
000070  e9cd2000          STRD     r2,r0,[sp,#0]
000074  9102              STR      r1,[sp,#8]
000076  481e              LDR      r0,|L2.240|
000078  3008              ADDS     r0,r0,#8
00007a  eb001044          ADD      r0,r0,r4,LSL #5
00007e  f9903000          LDRSB    r3,[r0,#0]
000082  481b              LDR      r0,|L2.240|
000084  3008              ADDS     r0,r0,#8
000086  eb001044          ADD      r0,r0,r4,LSL #5
00008a  a11b              ADR      r1,|L2.248|
00008c  69c2              LDR      r2,[r0,#0x1c]
00008e  4630              MOV      r0,r6
000090  f7fffffe          BL       __2sprintf
000094  4680              MOV      r8,r0
;;;1185                                       "\"en\":%d,"
;;;1186                                       "\"port\":[\"%s\"],"
;;;1187                                       "\"day\":%d,"
;;;1188                                       "\"time\":%d,",
;;;1189                                       DevRuleInfoObj.SwitchRulePool[i].RuleID, 
;;;1190                                       DevRuleInfoObj.SwitchRulePool[i].RuleEnable, 
;;;1191                                       PortListBuf,DevRuleInfoObj.SwitchRulePool[i].timeStamp,DevRuleInfoObj.SwitchRulePool[i].timeLong); 
;;;1192               pBuf += iLength;
000096  4446              ADD      r6,r6,r8
;;;1193             
;;;1194               iLength = sprintf(pBuf, "\"week\":[%d,%d,%d,%d,%d,%d,%d]},", 
000098  2001              MOVS     r0,#1
00009a  ea0010a5          AND      r0,r0,r5,ASR #6
00009e  2101              MOVS     r1,#1
0000a0  ea011165          AND      r1,r1,r5,ASR #5
0000a4  2201              MOVS     r2,#1
0000a6  ea021225          AND      r2,r2,r5,ASR #4
0000aa  2301              MOVS     r3,#1
0000ac  ea0303e5          AND      r3,r3,r5,ASR #3
0000b0  e9cd3201          STRD     r3,r2,[sp,#4]
0000b4  e9cd1003          STRD     r1,r0,[sp,#0xc]
0000b8  2001              MOVS     r0,#1
0000ba  ea0000a5          AND      r0,r0,r5,ASR #2
0000be  9000              STR      r0,[sp,#0]
0000c0  2001              MOVS     r0,#1
0000c2  ea000365          AND      r3,r0,r5,ASR #1
0000c6  f0050201          AND      r2,r5,#1
0000ca  a118              ADR      r1,|L2.300|
0000cc  4630              MOV      r0,r6
0000ce  f7fffffe          BL       __2sprintf
0000d2  4680              MOV      r8,r0
;;;1195                                       (0x01&(validDay>>0)), (0x01&(validDay>>1)), (0x01&(validDay>>2)), 
;;;1196                                       (0x01&(validDay>>3)), (0x01&(validDay>>4)), (0x01&(validDay>>5)), 
;;;1197                                       (0x01&(validDay>>6)) ); 
;;;1198               pBuf += iLength; 
0000d4  4446              ADD      r6,r6,r8
0000d6  1c60              ADDS     r0,r4,#1              ;1173
0000d8  b2c4              UXTB     r4,r0                 ;1173
                  |L2.218|
0000da  4805              LDR      r0,|L2.240|
0000dc  7800              LDRB     r0,[r0,#0]            ;1173  ; DevRuleInfoObj
0000de  42a0              CMP      r0,r4                 ;1173
0000e0  dc9a              BGT      |L2.24|
;;;1199           }
;;;1200           pBuf--;                                                                 // 最后一条规则无逗号分隔符，故占据最后一条规则后的逗号分隔符的位置。
0000e2  1e76              SUBS     r6,r6,#1
;;;1201           *pBuf = '\0';
0000e4  2000              MOVS     r0,#0
0000e6  7030              STRB     r0,[r6,#0]
                  |L2.232|
;;;1202       } 
;;;1203       return pBuf; 
0000e8  4630              MOV      r0,r6
;;;1204   } 
0000ea  b020              ADD      sp,sp,#0x80
0000ec  e8bd87f0          POP      {r4-r10,pc}
;;;1205   
                          ENDP

                  |L2.240|
                          DCD      DevRuleInfoObj
                  |L2.244|
0000f4  25642c00          DCB      "%d,",0
                  |L2.248|
0000f8  7b226964          DCB      "{""id"":%d,""en"":%d,""port"":[""%s""],""day"":%d,""tim"
0000fc  223a2564
000100  2c22656e
000104  223a2564
000108  2c22706f
00010c  7274223a
000110  5b222573
000114  225d2c22
000118  64617922
00011c  3a25642c
000120  2274696d
000124  65223a25          DCB      "e"":%d,",0
000128  642c00  
00012b  00                DCB      0
                  |L2.300|
00012c  22776565          DCB      """week"":[%d,%d,%d,%d,%d,%d,%d]},",0
000130  6b223a5b
000134  25642c25
000138  642c2564
00013c  2c25642c
000140  25642c25
000144  642c2564
000148  5d7d2c00

                          AREA ||i.HttpGetDevCountDown||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  HttpGetDevCountDown PROC
;;;1272   
;;;1273   static int HttpGetDevCountDown(int16_t iCmd, char* pArgRecvBuf, char *pAckBuf) 
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1274   {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
;;;1275       cJSON   *pJson; 
;;;1276       int     iPort, iLength;
;;;1277       char    iRet, *pTmp; 
;;;1278   
;;;1279       pTmp  = pAckBuf;
00000a  4634              MOV      r4,r6
;;;1280       iRet  = 1; 
00000c  f04f0b01          MOV      r11,#1
;;;1281       pJson = cJSON_Parse(pArgRecvBuf); 
000010  4640              MOV      r0,r8
000012  f7fffffe          BL       cJSON_Parse
000016  4681              MOV      r9,r0
;;;1282       
;;;1283       if(pJson) 
000018  f1b90f00          CMP      r9,#0
00001c  d00d              BEQ      |L3.58|
;;;1284       { 
;;;1285           iPort  = cJSON_GetObjectItem(pJson, "port")->valueint; 
00001e  a118              ADR      r1,|L3.128|
000020  4648              MOV      r0,r9
000022  f7fffffe          BL       cJSON_GetObjectItem
000026  6945              LDR      r5,[r0,#0x14]
;;;1286           cJSON_Delete(pJson); 
000028  4648              MOV      r0,r9
00002a  f7fffffe          BL       cJSON_Delete
;;;1287           if((iPort<(PORT_NUM+1)) && (iPort>=0)) 
00002e  2d07              CMP      r5,#7
000030  da03              BGE      |L3.58|
000032  2d00              CMP      r5,#0
000034  db01              BLT      |L3.58|
;;;1288           {
;;;1289               iRet = 0; 
000036  f04f0b00          MOV      r11,#0
                  |L3.58|
;;;1290           }
;;;1291       } 
;;;1292       
;;;1293       if(0x00 == iRet)
00003a  f1bb0f00          CMP      r11,#0
00003e  d115              BNE      |L3.108|
;;;1294       {
;;;1295           iLength = sprintf(pTmp, "{\"response\":%d,\"code\":%d,"
000040  20c8              MOVS     r0,#0xc8
000042  fa00f30b          LSL      r3,r0,r11
000046  463a              MOV      r2,r7
000048  a10f              ADR      r1,|L3.136|
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       __2sprintf
000050  4682              MOV      r10,r0
;;;1296                                      "\"data\":", 
;;;1297                                      iCmd, (200<<iRet) ); 
;;;1298           pTmp += iLength; 
000052  4454              ADD      r4,r4,r10
;;;1299           iLength = GetCountDown(iPort, pTmp);
000054  4621              MOV      r1,r4
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       GetCountDown
00005c  4682              MOV      r10,r0
;;;1300           pTmp += iLength; 
00005e  4454              ADD      r4,r4,r10
;;;1301           *pTmp = '}';
000060  207d              MOVS     r0,#0x7d
000062  7020              STRB     r0,[r4,#0]
;;;1302           pTmp++;
000064  1c64              ADDS     r4,r4,#1
;;;1303           *pTmp = '\0';
000066  2000              MOVS     r0,#0
000068  7020              STRB     r0,[r4,#0]
00006a  e006              B        |L3.122|
                  |L3.108|
;;;1304           
;;;1305          // u_printf("The new length = %d\n",iLength);
;;;1306       }
;;;1307       else
;;;1308       {
;;;1309           sprintf(pTmp, "{\"response\":%d,\"code\":%d,"
00006c  f44f73c8          MOV      r3,#0x190
000070  463a              MOV      r2,r7
000072  a10e              ADR      r1,|L3.172|
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       __2sprintf
                  |L3.122|
;;;1310                            "\"data\":{\"start\":\"\",\"delay\":0}}", 
;;;1311                            iCmd, (200<<1)); 
;;;1312       }
;;;1313   
;;;1314       #if defined(__HTTP_SET_DBG__) && defined(__UDP_PRINT_DBG__) 
;;;1315           UdpDebugPrint("The data is:\r\n", sizeof("The data is:\r\n")-1);
;;;1316           UdpDebugPrint(pAckBuf, pTmp-pAckBuf);                                         
;;;1317       #endif 
;;;1318      // u_printf("iPort = %d\n",iPort);
;;;1319      // u_printf("The length = %d,pAckBuf = %s\n",pTmp-pAckBuf,pAckBuf);
;;;1320       return (pTmp-pAckBuf);
00007a  1ba0              SUBS     r0,r4,r6
;;;1321   }
00007c  e8bd9ff0          POP      {r4-r12,pc}
;;;1322   
                          ENDP

                  |L3.128|
000080  706f7274          DCB      "port",0
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
                  |L3.136|
000088  7b227265          DCB      "{""response"":%d,""code"":%d,""data"":",0
00008c  73706f6e
000090  7365223a
000094  25642c22
000098  636f6465
00009c  223a2564
0000a0  2c226461
0000a4  7461223a
0000a8  00      
0000a9  00                DCB      0
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L3.172|
0000ac  7b227265          DCB      "{""response"":%d,""code"":%d,""data"":{""start"":"""","""
0000b0  73706f6e
0000b4  7365223a
0000b8  25642c22
0000bc  636f6465
0000c0  223a2564
0000c4  2c226461
0000c8  7461223a
0000cc  7b227374
0000d0  61727422
0000d4  3a22222c
0000d8  22      
0000d9  64656c61          DCB      "delay"":0}}",0
0000dd  79223a30
0000e1  7d7d00  

                          AREA ||i.HttpGetDevRegIDState||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  HttpGetDevRegIDState PROC
;;;773    extern FwUpdateStatusType      FwUpdateStatusObj; 
;;;774    static int HttpGetDevRegIDState(int16_t iCmd, char* pArgRecvBuf, char *pAckBuf) 
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;775    {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;776        cJSON   *pJson; 
;;;777        int      iLength;
;;;778        char    iRet, *pTmp; 
;;;779    	char	 *userName = NULL;
00000a  2700              MOVS     r7,#0
;;;780    
;;;781    	u_printf("\r\nRegid reback info is:%s\n",pArgRecvBuf);
00000c  462a              MOV      r2,r5
00000e  a124              ADR      r1,|L4.160|
000010  200a              MOVS     r0,#0xa
000012  f7fffffe          BL       HF_Debug
;;;782    
;;;783        pTmp  = pAckBuf;
000016  4634              MOV      r4,r6
;;;784        iRet  = 1; 
000018  f04f0b01          MOV      r11,#1
;;;785        pJson = cJSON_Parse(pArgRecvBuf); 
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       cJSON_Parse
000022  4681              MOV      r9,r0
;;;786        
;;;787        if(pJson) 
000024  f1b90f00          CMP      r9,#0
000028  d026              BEQ      |L4.120|
;;;788        { 
;;;789            userName  = cJSON_GetObjectItem(pJson, "regid")->valuestring; 
00002a  a124              ADR      r1,|L4.188|
00002c  4648              MOV      r0,r9
00002e  f7fffffe          BL       cJSON_GetObjectItem
000032  6907              LDR      r7,[r0,#0x10]
;;;790             
;;;791            if(userName != NULL) 
000034  b1ef              CBZ      r7,|L4.114|
;;;792            {
;;;793    			//if(strncmp(userName,REGIDID,3) == 0)
;;;794    			{
;;;795    	            if(isGetRegid==0)
000036  4823              LDR      r0,|L4.196|
000038  7800              LDRB     r0,[r0,#0]  ; isGetRegid
00003a  b990              CBNZ     r0,|L4.98|
;;;796    	            {
;;;797    	                isGetRegid = 1;                     //已经获取到了设备的用户名
00003c  2001              MOVS     r0,#1
00003e  4921              LDR      r1,|L4.196|
000040  7008              STRB     r0,[r1,#0]
;;;798    	                memset(DevRegInformation.regidName, 0, NAME_LENGTH);
000042  210f              MOVS     r1,#0xf
000044  4820              LDR      r0,|L4.200|
000046  f7fffffe          BL       __aeabi_memclr4
;;;799    	                memcpy(DevRegInformation.regidName, userName, NAME_LENGTH-3);
00004a  481f              LDR      r0,|L4.200|
00004c  6839              LDR      r1,[r7,#0]
00004e  6001              STR      r1,[r0,#0]  ; DevRegInformation
000050  6879              LDR      r1,[r7,#4]
000052  6041              STR      r1,[r0,#4]  ; DevRegInformation
000054  68b9              LDR      r1,[r7,#8]
000056  6081              STR      r1,[r0,#8]  ; DevRegInformation
;;;800    	                WriteDevBindInfo();                //保存用户账号到flash中
000058  f7fffffe          BL       WriteDevBindInfo
;;;801    	                
;;;802    	                iRet = 0; 
00005c  f04f0b00          MOV      r11,#0
000060  e007              B        |L4.114|
                  |L4.98|
;;;803    	             }
;;;804    	             else
;;;805    	             {
;;;806    	                if(strncmp(DevRegInformation.regidName, userName, NAME_LENGTH-3) == 0)
000062  220c              MOVS     r2,#0xc
000064  4639              MOV      r1,r7
000066  4818              LDR      r0,|L4.200|
000068  f7fffffe          BL       strncmp
00006c  b908              CBNZ     r0,|L4.114|
;;;807    	                {
;;;808    	                    iRet = 0; 
00006e  f04f0b00          MOV      r11,#0
                  |L4.114|
;;;809    	                }
;;;810    	             }
;;;811    			}
;;;812            }
;;;813            cJSON_Delete(pJson);
000072  4648              MOV      r0,r9
000074  f7fffffe          BL       cJSON_Delete
                  |L4.120|
;;;814        }    
;;;815    
;;;816        iLength = sprintf(pTmp, "{\"response\":%d,\"code\":%d}",iCmd, (200<<iRet)); 
000078  20c8              MOVS     r0,#0xc8
00007a  fa00f30b          LSL      r3,r0,r11
00007e  4642              MOV      r2,r8
000080  a112              ADR      r1,|L4.204|
000082  4620              MOV      r0,r4
000084  f7fffffe          BL       __2sprintf
000088  4682              MOV      r10,r0
;;;817        pTmp += iLength;
00008a  4454              ADD      r4,r4,r10
;;;818        *pTmp = '\0';
00008c  2000              MOVS     r0,#0
00008e  7020              STRB     r0,[r4,#0]
;;;819    
;;;820        UdpDebugPrint("The regidID information get:\r\n", sizeof("The regidID information get:\r\n")-1);
000090  211e              MOVS     r1,#0x1e
000092  a015              ADR      r0,|L4.232|
000094  f7fffffe          BL       UdpDebugPrint
;;;821     
;;;822        return (pTmp-pAckBuf);
000098  1ba0              SUBS     r0,r4,r6
;;;823    }
00009a  e8bd9ff0          POP      {r4-r12,pc}
;;;824    
                          ENDP

00009e  0000              DCW      0x0000
                  |L4.160|
0000a0  0d0a5265          DCB      "\r\nRegid reback info is:%s\n",0
0000a4  67696420
0000a8  72656261
0000ac  636b2069
0000b0  6e666f20
0000b4  69733a25
0000b8  730a00  
0000bb  00                DCB      0
                  |L4.188|
0000bc  72656769          DCB      "regid",0
0000c0  6400    
0000c2  00                DCB      0
0000c3  00                DCB      0
                  |L4.196|
                          DCD      isGetRegid
                  |L4.200|
                          DCD      DevRegInformation
                  |L4.204|
0000cc  7b227265          DCB      "{""response"":%d,""code"":%d}",0
0000d0  73706f6e
0000d4  7365223a
0000d8  25642c22
0000dc  636f6465
0000e0  223a2564
0000e4  7d00    
0000e6  00                DCB      0
0000e7  00                DCB      0
                  |L4.232|
0000e8  54686520          DCB      "The regidID information get:\r\n",0
0000ec  72656769
0000f0  64494420
0000f4  696e666f
0000f8  726d6174
0000fc  696f6e20
000100  6765743a
000104  0d0a00  
000107  00                DCB      0

                          AREA ||i.HttpGetDevTime||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  HttpGetDevTime PROC
;;;1062   *******************************************************************************/
;;;1063   int HttpGetDevTime(int16_t iCmd, char* pArgRecvBuf, char *pAckBuf) 
000000  b5f0              PUSH     {r4-r7,lr}
;;;1064   {
000002  b089              SUB      sp,sp,#0x24
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;1065       uint8_t     iAck = 0;
00000a  2600              MOVS     r6,#0
;;;1066       
;;;1067       return sprintf(pAckBuf, "{\"response\":%d,"
00000c  4b11              LDR      r3,|L5.84|
00000e  4812              LDR      r0,|L5.88|
000010  6801              LDR      r1,[r0,#0]  ; DevTimeObj
000012  6840              LDR      r0,[r0,#4]  ; DevTimeObj
000014  4a10              LDR      r2,|L5.88|
000016  6892              LDR      r2,[r2,#8]  ; DevTimeObj
000018  e9cd1307          STRD     r1,r3,[sp,#0x1c]
00001c  e9cd2005          STRD     r2,r0,[sp,#0x14]
000020  480d              LDR      r0,|L5.88|
000022  68c0              LDR      r0,[r0,#0xc]  ; DevTimeObj
000024  490c              LDR      r1,|L5.88|
000026  6909              LDR      r1,[r1,#0x10]  ; DevTimeObj
000028  4a0b              LDR      r2,|L5.88|
00002a  6952              LDR      r2,[r2,#0x14]  ; DevTimeObj
00002c  4b0a              LDR      r3,|L5.88|
00002e  6adb              LDR      r3,[r3,#0x2c]  ; DevTimeObj
000030  e9cd3201          STRD     r3,r2,[sp,#4]
000034  e9cd1003          STRD     r1,r0,[sp,#0xc]
000038  4808              LDR      r0,|L5.92|
00003a  f890003a          LDRB     r0,[r0,#0x3a]  ; DevInfoObj
00003e  9000              STR      r0,[sp,#0]
000040  20c8              MOVS     r0,#0xc8
000042  fa00f306          LSL      r3,r0,r6
000046  4622              MOV      r2,r4
000048  4905              LDR      r1,|L5.96|
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       __2sprintf
;;;1068                        "\"code\":%d,"
;;;1069                        "\"zone\":%d,"
;;;1070                        "\"nowTimeSec\":%d,"
;;;1071                        "\"data\":{"
;;;1072                        "\"time\":\"%d-%02d-%02d,%02d:%02d:%02d\","
;;;1073                        "\"server\":\"%s\"}}",
;;;1074                        iCmd, (200<<iAck),
;;;1075                        DevInfoObj.TimeZone,
;;;1076                        DevTimeObj.NowTimeSec,
;;;1077                        DevTimeObj.NowTimeTm.tm_year, 
;;;1078                        DevTimeObj.NowTimeTm.tm_mon, 
;;;1079                        DevTimeObj.NowTimeTm.tm_mday,
;;;1080                        DevTimeObj.NowTimeTm.tm_hour, 
;;;1081                        DevTimeObj.NowTimeTm.tm_min, 
;;;1082                        DevTimeObj.NowTimeTm.tm_sec,
;;;1083                        switch_server_net
;;;1084                        ); 
;;;1085   }
000050  b009              ADD      sp,sp,#0x24
000052  bdf0              POP      {r4-r7,pc}
;;;1086   
                          ENDP

                  |L5.84|
                          DCD      switch_server_net
                  |L5.88|
                          DCD      DevTimeObj
                  |L5.92|
                          DCD      DevInfoObj
                  |L5.96|
                          DCD      ||.constdata||+0xac

                          AREA ||i.HttpGetDevWifiState||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  HttpGetDevWifiState PROC
;;;591    extern int     DevModeStatus; 
;;;592    static int HttpGetDevWifiState(int16_t iCmd, char* pArgRecvBuf, char *pAckBuf) 
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;593    {
000004  b096              SUB      sp,sp,#0x58
000006  4692              MOV      r10,r2
;;;594        int     iLength, iAck, iCount, iAuth;
;;;595    	char    AtAckMsg[AT_ACK_MSG_LENGTH+1], *pS8Tmp, *pS8payload, *pS8Tmp2, *pS8Tmp3;;
;;;596    
;;;597    	char    *pTmp;
;;;598    	pTmp = pAckBuf; 
000008  f8cda004          STR      r10,[sp,#4]
;;;599    	if(AP_MODE_LED == DevModeStatus)
00000c  48a3              LDR      r0,|L6.668|
00000e  6800              LDR      r0,[r0,#0]  ; DevModeStatus
000010  2801              CMP      r0,#1
000012  d17f              BNE      |L6.276|
;;;600    	{
;;;601            iAck = hfat_send_cmd("AT+WAP\r\n", sizeof("AT+WAP\r\n")-1, AtAckMsg, AT_ACK_MSG_LENGTH);
000014  2348              MOVS     r3,#0x48
000016  aa03              ADD      r2,sp,#0xc
000018  2108              MOVS     r1,#8
00001a  a0a1              ADR      r0,|L6.672|
00001c  f7fffffe          BL       hfat_send_cmd
000020  4681              MOV      r9,r0
;;;602            if(HF_SUCCESS != iAck)
000022  f1b90f00          CMP      r9,#0
000026  d000              BEQ      |L6.42|
;;;603            {
;;;604                goto GetDevNetStateLabel;
000028  e12c              B        |L6.644|
                  |L6.42|
;;;605            }
;;;606            pS8Tmp = strchr(AtAckMsg, ',');
00002a  212c              MOVS     r1,#0x2c
00002c  a803              ADD      r0,sp,#0xc
00002e  f7fffffe          BL       strchr
000032  4604              MOV      r4,r0
;;;607            if(NULL == pS8Tmp)
000034  b904              CBNZ     r4,|L6.56|
;;;608            {
;;;609                goto GetDevNetStateLabel;
000036  e125              B        |L6.644|
                  |L6.56|
;;;610            }
;;;611            pS8Tmp ++;
000038  1c64              ADDS     r4,r4,#1
;;;612            iLength = sprintf(pAckBuf, "{\"response\":%d,\"code\":200,"
00003a  2300              MOVS     r3,#0
00003c  a19b              ADR      r1,|L6.684|
00003e  4650              MOV      r0,r10
000040  9a16              LDR      r2,[sp,#0x58]
000042  f7fffffe          BL       __2sprintf
000046  4607              MOV      r7,r0
;;;613                                       "\"data\":{\"mode\":%d,"
;;;614                                       "\"ssid\":\"",
;;;615                                       iCmd, AP_MODE);
;;;616            pS8payload  = pAckBuf + iLength;
000048  eb0a0607          ADD      r6,r10,r7
;;;617            pS8Tmp2     = strchr(pS8Tmp, ',');
00004c  212c              MOVS     r1,#0x2c
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       strchr
000054  4605              MOV      r5,r0
;;;618            memcpy(pS8payload, pS8Tmp, pS8Tmp2-pS8Tmp);
000056  1b2a              SUBS     r2,r5,r4
000058  4621              MOV      r1,r4
00005a  4630              MOV      r0,r6
00005c  f7fffffe          BL       __aeabi_memcpy
;;;619            pS8payload += pS8Tmp2-pS8Tmp;
000060  1b28              SUBS     r0,r5,r4
000062  4406              ADD      r6,r6,r0
;;;620            memcpy(pS8payload, "\",\"password\":\"", sizeof("\",\"password\":\"")-1);
000064  220e              MOVS     r2,#0xe
000066  a19f              ADR      r1,|L6.740|
000068  4630              MOV      r0,r6
00006a  f7fffffe          BL       __aeabi_memcpy
;;;621            pS8payload += sizeof("\",\"password\":\"")-1;
00006e  360e              ADDS     r6,r6,#0xe
;;;622            // 
;;;623            memset(AtAckMsg, '\0', AT_ACK_MSG_LENGTH);
000070  2148              MOVS     r1,#0x48
000072  a803              ADD      r0,sp,#0xc
000074  f7fffffe          BL       __aeabi_memclr4
;;;624            iAck = hfat_send_cmd("AT+WAKEY\r\n", sizeof("AT+WAKEY\r\n")-1, AtAckMsg, AT_ACK_MSG_LENGTH);
000078  2348              MOVS     r3,#0x48
00007a  aa03              ADD      r2,sp,#0xc
00007c  210a              MOVS     r1,#0xa
00007e  a09d              ADR      r0,|L6.756|
000080  f7fffffe          BL       hfat_send_cmd
000084  4681              MOV      r9,r0
;;;625            if(HF_SUCCESS != iAck)
000086  f1b90f00          CMP      r9,#0
00008a  d000              BEQ      |L6.142|
;;;626            {
;;;627                goto GetDevNetStateLabel;
00008c  e0fa              B        |L6.644|
                  |L6.142|
;;;628            }
;;;629            pS8Tmp = strstr(AtAckMsg, "+ok=");
00008e  a19c              ADR      r1,|L6.768|
000090  a803              ADD      r0,sp,#0xc
000092  f7fffffe          BL       strstr
000096  4604              MOV      r4,r0
;;;630            if(NULL == pS8Tmp)
000098  b904              CBNZ     r4,|L6.156|
;;;631            {
;;;632                goto GetDevNetStateLabel;
00009a  e0f3              B        |L6.644|
                  |L6.156|
;;;633            }
;;;634            pS8Tmp += sizeof("+ok=")-1;
00009c  1d24              ADDS     r4,r4,#4
;;;635            pS8Tmp2 = strchr(pS8Tmp, ',');
00009e  212c              MOVS     r1,#0x2c
0000a0  4620              MOV      r0,r4
0000a2  f7fffffe          BL       strchr
0000a6  4605              MOV      r5,r0
;;;636            iCount  = pS8Tmp2 - pS8Tmp;
0000a8  eba50b04          SUB      r11,r5,r4
;;;637            if(0x00 == strncasecmp(pS8Tmp, "OPEN", iCount))
0000ac  465a              MOV      r2,r11
0000ae  a196              ADR      r1,|L6.776|
0000b0  4620              MOV      r0,r4
0000b2  f7fffffe          BL       strncasecmp
0000b6  b930              CBNZ     r0,|L6.198|
;;;638            {
;;;639                iAuth = 0;
0000b8  f04f0800          MOV      r8,#0
;;;640                memcpy(pS8payload, "NONE", sizeof("NONE")-1);
0000bc  a094              ADR      r0,|L6.784|
0000be  6800              LDR      r0,[r0,#0]
0000c0  6030              STR      r0,[r6,#0]
;;;641                pS8payload += sizeof("NONE")-1;
0000c2  1d36              ADDS     r6,r6,#4
0000c4  e01d              B        |L6.258|
                  |L6.198|
;;;642            }
;;;643            else if(0x00 == strncasecmp(pS8Tmp, "WPA2PSK", iCount))
0000c6  465a              MOV      r2,r11
0000c8  a193              ADR      r1,|L6.792|
0000ca  4620              MOV      r0,r4
0000cc  f7fffffe          BL       strncasecmp
0000d0  b9b0              CBNZ     r0,|L6.256|
;;;644            {
;;;645                iAuth = 5;
0000d2  f04f0805          MOV      r8,#5
;;;646                pS8Tmp2++;
0000d6  1c6d              ADDS     r5,r5,#1
;;;647                pS8Tmp2 = strstr(pS8Tmp2, "AES,");
0000d8  a191              ADR      r1,|L6.800|
0000da  4628              MOV      r0,r5
0000dc  f7fffffe          BL       strstr
0000e0  4605              MOV      r5,r0
;;;648                if(NULL == pS8Tmp2)
0000e2  b905              CBNZ     r5,|L6.230|
;;;649                {
;;;650                    goto GetDevNetStateLabel;
0000e4  e0ce              B        |L6.644|
                  |L6.230|
;;;651                }
;;;652                pS8Tmp2    += sizeof("AES,")-1;
0000e6  1d2d              ADDS     r5,r5,#4
;;;653                iLength     = strlen(pS8Tmp2);
0000e8  4628              MOV      r0,r5
0000ea  f7fffffe          BL       strlen
0000ee  4607              MOV      r7,r0
;;;654                strncpy(pS8payload, pS8Tmp2, iLength);
0000f0  463a              MOV      r2,r7
0000f2  4629              MOV      r1,r5
0000f4  4630              MOV      r0,r6
0000f6  f7fffffe          BL       strncpy
;;;655                pS8payload += iLength;
0000fa  443e              ADD      r6,r6,r7
0000fc  e001              B        |L6.258|
0000fe  e009              B        |L6.276|
                  |L6.256|
;;;656            }
;;;657            else
;;;658            {
;;;659                goto GetDevNetStateLabel;
000100  e0c0              B        |L6.644|
                  |L6.258|
;;;660            }
;;;661            iLength = sprintf(pS8payload, "\",\"security\":%d}}", iAuth);
000102  4642              MOV      r2,r8
000104  a188              ADR      r1,|L6.808|
000106  4630              MOV      r0,r6
000108  f7fffffe          BL       __2sprintf
00010c  4607              MOV      r7,r0
;;;662            *(pS8payload + iLength) = '\0';
00010e  2000              MOVS     r0,#0
000110  55f0              STRB     r0,[r6,r7]
000112  e0b1              B        |L6.632|
                  |L6.276|
;;;663    	}
;;;664    	else
;;;665    	{
;;;666            iAck = hfat_send_cmd("AT+WSSSID\r\n", sizeof("AT+WSSSID\r\n")-1, AtAckMsg, AT_ACK_MSG_LENGTH);
000114  2348              MOVS     r3,#0x48
000116  aa03              ADD      r2,sp,#0xc
000118  210b              MOVS     r1,#0xb
00011a  a088              ADR      r0,|L6.828|
00011c  f7fffffe          BL       hfat_send_cmd
000120  4681              MOV      r9,r0
;;;667            if(HF_SUCCESS != iAck)
000122  f1b90f00          CMP      r9,#0
000126  d000              BEQ      |L6.298|
;;;668            {
;;;669                goto GetDevNetStateLabel;
000128  e0ac              B        |L6.644|
                  |L6.298|
;;;670            }
;;;671            pS8Tmp = strstr(AtAckMsg, "+ok=");
00012a  a175              ADR      r1,|L6.768|
00012c  a803              ADD      r0,sp,#0xc
00012e  f7fffffe          BL       strstr
000132  4604              MOV      r4,r0
;;;672            if(NULL == pS8Tmp)
000134  b904              CBNZ     r4,|L6.312|
;;;673            {
;;;674                goto GetDevNetStateLabel;
000136  e0a5              B        |L6.644|
                  |L6.312|
;;;675            }
;;;676            pS8Tmp += sizeof("+ok=")-1;
000138  1d24              ADDS     r4,r4,#4
;;;677            iLength = sprintf(pAckBuf, "{\"response\":%d,\"code\":200,"
00013a  2301              MOVS     r3,#1
00013c  a15b              ADR      r1,|L6.684|
00013e  4650              MOV      r0,r10
000140  9a16              LDR      r2,[sp,#0x58]
000142  f7fffffe          BL       __2sprintf
000146  4607              MOV      r7,r0
;;;678                                       "\"data\":{\"mode\":%d,"
;;;679                                       "\"ssid\":\"",
;;;680                                       iCmd, STATION_MODE);
;;;681            pS8payload  = pAckBuf + iLength;
000148  eb0a0607          ADD      r6,r10,r7
;;;682            iCount      = strlen(pS8Tmp);
00014c  4620              MOV      r0,r4
00014e  f7fffffe          BL       strlen
000152  4683              MOV      r11,r0
;;;683            memcpy(pS8payload, pS8Tmp, iCount);
000154  465a              MOV      r2,r11
000156  4621              MOV      r1,r4
000158  4630              MOV      r0,r6
00015a  f7fffffe          BL       __aeabi_memcpy
;;;684            pS8payload += iCount;
00015e  445e              ADD      r6,r6,r11
;;;685            
;;;686            memcpy(pS8payload, "\",\"password\":\"", sizeof("\",\"password\":\"")-1);
000160  220e              MOVS     r2,#0xe
000162  a160              ADR      r1,|L6.740|
000164  4630              MOV      r0,r6
000166  f7fffffe          BL       __aeabi_memcpy
;;;687            pS8payload += sizeof("\",\"password\":\"")-1;
00016a  360e              ADDS     r6,r6,#0xe
;;;688            // 
;;;689            memset(AtAckMsg, '\0', AT_ACK_MSG_LENGTH);
00016c  2148              MOVS     r1,#0x48
00016e  a803              ADD      r0,sp,#0xc
000170  f7fffffe          BL       __aeabi_memclr4
;;;690            iAck   = hfat_send_cmd("AT+WSKEY\r\n", sizeof("AT+WSKEY\r\n")-1, AtAckMsg, AT_ACK_MSG_LENGTH);
000174  2348              MOVS     r3,#0x48
000176  aa03              ADD      r2,sp,#0xc
000178  210a              MOVS     r1,#0xa
00017a  a073              ADR      r0,|L6.840|
00017c  f7fffffe          BL       hfat_send_cmd
000180  4681              MOV      r9,r0
;;;691            if(HF_SUCCESS != iAck)
000182  f1b90f00          CMP      r9,#0
000186  d000              BEQ      |L6.394|
;;;692            {
;;;693                goto GetDevNetStateLabel;
000188  e07c              B        |L6.644|
                  |L6.394|
;;;694            }
;;;695            pS8Tmp = strstr(AtAckMsg, "+ok=");
00018a  a15d              ADR      r1,|L6.768|
00018c  a803              ADD      r0,sp,#0xc
00018e  f7fffffe          BL       strstr
000192  4604              MOV      r4,r0
;;;696            if(NULL == pS8Tmp)
000194  b904              CBNZ     r4,|L6.408|
;;;697            {
;;;698                goto GetDevNetStateLabel;
000196  e075              B        |L6.644|
                  |L6.408|
;;;699            }
;;;700            // 
;;;701            pS8Tmp += sizeof("+ok=")-1;
000198  1d24              ADDS     r4,r4,#4
;;;702            pS8Tmp2 = strchr(pS8Tmp, ',');
00019a  212c              MOVS     r1,#0x2c
00019c  4620              MOV      r0,r4
00019e  f7fffffe          BL       strchr
0001a2  4605              MOV      r5,r0
;;;703            iCount  = pS8Tmp2 - pS8Tmp;
0001a4  eba50b04          SUB      r11,r5,r4
;;;704            if(0x00 == strncasecmp(pS8Tmp, "OPEN", iCount))
0001a8  465a              MOV      r2,r11
0001aa  a157              ADR      r1,|L6.776|
0001ac  4620              MOV      r0,r4
0001ae  f7fffffe          BL       strncasecmp
0001b2  b938              CBNZ     r0,|L6.452|
;;;705            {
;;;706                iAuth  = 0;
0001b4  f04f0800          MOV      r8,#0
;;;707                pS8Tmp = strchr(pS8Tmp, ',');
0001b8  212c              MOVS     r1,#0x2c
0001ba  4620              MOV      r0,r4
0001bc  f7fffffe          BL       strchr
0001c0  4604              MOV      r4,r0
0001c2  e01b              B        |L6.508|
                  |L6.452|
;;;708            }
;;;709            else if(0x00 == strncasecmp(pS8Tmp, "SHARED", iCount))
0001c4  465a              MOV      r2,r11
0001c6  a163              ADR      r1,|L6.852|
0001c8  4620              MOV      r0,r4
0001ca  f7fffffe          BL       strncasecmp
0001ce  b910              CBNZ     r0,|L6.470|
;;;710            {
;;;711                iAuth = 1;
0001d0  f04f0801          MOV      r8,#1
0001d4  e012              B        |L6.508|
                  |L6.470|
;;;712            }
;;;713            else if(0x00 == strncasecmp(pS8Tmp, "WPAPSK", iCount))
0001d6  465a              MOV      r2,r11
0001d8  a160              ADR      r1,|L6.860|
0001da  4620              MOV      r0,r4
0001dc  f7fffffe          BL       strncasecmp
0001e0  b910              CBNZ     r0,|L6.488|
;;;714            {
;;;715                iAuth = 2;
0001e2  f04f0802          MOV      r8,#2
0001e6  e009              B        |L6.508|
                  |L6.488|
;;;716            }
;;;717            else if(0x00 == strncasecmp(pS8Tmp, "WPA2PSK", iCount))
0001e8  465a              MOV      r2,r11
0001ea  a14b              ADR      r1,|L6.792|
0001ec  4620              MOV      r0,r4
0001ee  f7fffffe          BL       strncasecmp
0001f2  b910              CBNZ     r0,|L6.506|
;;;718            {
;;;719                iAuth = 3;
0001f4  f04f0803          MOV      r8,#3
0001f8  e000              B        |L6.508|
                  |L6.506|
;;;720            }
;;;721            else
;;;722            {
;;;723                goto GetDevNetStateLabel;
0001fa  e043              B        |L6.644|
                  |L6.508|
;;;724            }
;;;725            if(iAuth)
0001fc  f1b80f00          CMP      r8,#0
000200  d027              BEQ      |L6.594|
;;;726            {
;;;727                pS8Tmp2++;
000202  1c6d              ADDS     r5,r5,#1
;;;728                pS8Tmp3  = pS8Tmp2;
000204  9502              STR      r5,[sp,#8]
;;;729                pS8Tmp2 = strchr(pS8Tmp3, ',');
000206  212c              MOVS     r1,#0x2c
000208  9802              LDR      r0,[sp,#8]
00020a  f7fffffe          BL       strchr
00020e  4605              MOV      r5,r0
;;;730                iCount  = pS8Tmp2 - pS8Tmp3;
000210  9802              LDR      r0,[sp,#8]
000212  eba50b00          SUB      r11,r5,r0
;;;731                if(0x00 == strncasecmp(pS8Tmp3, "TKIP", iCount))
000216  465a              MOV      r2,r11
000218  a152              ADR      r1,|L6.868|
00021a  9802              LDR      r0,[sp,#8]
00021c  f7fffffe          BL       strncasecmp
000220  b190              CBZ      r0,|L6.584|
;;;732                {
;;;733                    //iAuth = 1;
;;;734                }
;;;735                else if(0x00 == strncasecmp(pS8Tmp3, "AES", iCount))
000222  465a              MOV      r2,r11
000224  a151              ADR      r1,|L6.876|
000226  9802              LDR      r0,[sp,#8]
000228  f7fffffe          BL       strncasecmp
00022c  b910              CBNZ     r0,|L6.564|
;;;736                {
;;;737                    iAuth += 2;
00022e  f1080802          ADD      r8,r8,#2
000232  e009              B        |L6.584|
                  |L6.564|
;;;738                }
;;;739                else if(0x00 == strncasecmp(pS8Tmp3, "WEP", 3))
000234  2203              MOVS     r2,#3
000236  a14e              ADR      r1,|L6.880|
000238  9802              LDR      r0,[sp,#8]
00023a  f7fffffe          BL       strncasecmp
00023e  b910              CBNZ     r0,|L6.582|
;;;740                {
;;;741                    iAuth = 1;
000240  f04f0801          MOV      r8,#1
000244  e000              B        |L6.584|
                  |L6.582|
;;;742                }
;;;743                else
;;;744                {
;;;745                    goto GetDevNetStateLabel;
000246  e01d              B        |L6.644|
                  |L6.584|
;;;746                }
;;;747                pS8Tmp = strchr(pS8Tmp3, ',');
000248  212c              MOVS     r1,#0x2c
00024a  9802              LDR      r0,[sp,#8]
00024c  f7fffffe          BL       strchr
000250  4604              MOV      r4,r0
                  |L6.594|
;;;748            }
;;;749            pS8Tmp ++;
000252  1c64              ADDS     r4,r4,#1
;;;750            iCount      = strlen(pS8Tmp);
000254  4620              MOV      r0,r4
000256  f7fffffe          BL       strlen
00025a  4683              MOV      r11,r0
;;;751            memcpy(pS8payload, pS8Tmp, iCount);
00025c  465a              MOV      r2,r11
00025e  4621              MOV      r1,r4
000260  4630              MOV      r0,r6
000262  f7fffffe          BL       __aeabi_memcpy
;;;752            pS8payload += iCount;
000266  445e              ADD      r6,r6,r11
;;;753            iLength     = sprintf(pS8payload, "\",\"security\":%d}}", iAuth);
000268  4642              MOV      r2,r8
00026a  a12f              ADR      r1,|L6.808|
00026c  4630              MOV      r0,r6
00026e  f7fffffe          BL       __2sprintf
000272  4607              MOV      r7,r0
;;;754            *(pS8payload + iLength) = '\0';
000274  2000              MOVS     r0,#0
000276  55f0              STRB     r0,[r6,r7]
                  |L6.632|
;;;755    	}
;;;756    	return strlen(pTmp);
000278  9801              LDR      r0,[sp,#4]
00027a  f7fffffe          BL       strlen
                  |L6.638|
;;;757    	// 
;;;758      GetDevNetStateLabel:
;;;759        iLength = sprintf(pAckBuf, "{\"response\":%d,\"code\":400}", iCmd); 
;;;760        *(pAckBuf+iLength) = '\0';
;;;761        return iLength; 
;;;762    }
00027e  b019              ADD      sp,sp,#0x64
000280  e8bd8ff0          POP      {r4-r11,pc}
                  |L6.644|
000284  a13b              ADR      r1,|L6.884|
000286  4650              MOV      r0,r10                ;759
000288  9a16              LDR      r2,[sp,#0x58]         ;759
00028a  f7fffffe          BL       __2sprintf
00028e  4607              MOV      r7,r0                 ;759
000290  2000              MOVS     r0,#0                 ;760
000292  f80a0007          STRB     r0,[r10,r7]           ;760
000296  4638              MOV      r0,r7                 ;761
000298  e7f1              B        |L6.638|
;;;763    
                          ENDP

00029a  0000              DCW      0x0000
                  |L6.668|
                          DCD      DevModeStatus
                  |L6.672|
0002a0  41542b57          DCB      "AT+WAP\r\n",0
0002a4  41500d0a
0002a8  00      
0002a9  00                DCB      0
0002aa  00                DCB      0
0002ab  00                DCB      0
                  |L6.684|
0002ac  7b227265          DCB      "{""response"":%d,""code"":200,""data"":{""mode"":%d,""s"
0002b0  73706f6e
0002b4  7365223a
0002b8  25642c22
0002bc  636f6465
0002c0  223a3230
0002c4  302c2264
0002c8  61746122
0002cc  3a7b226d
0002d0  6f646522
0002d4  3a25642c
0002d8  2273    
0002da  73696422          DCB      "sid"":""",0
0002de  3a2200  
0002e1  00                DCB      0
0002e2  00                DCB      0
0002e3  00                DCB      0
                  |L6.740|
0002e4  222c2270          DCB      """,""password"":""",0
0002e8  61737377
0002ec  6f726422
0002f0  3a2200  
0002f3  00                DCB      0
                  |L6.756|
0002f4  41542b57          DCB      "AT+WAKEY\r\n",0
0002f8  414b4559
0002fc  0d0a00  
0002ff  00                DCB      0
                  |L6.768|
000300  2b6f6b3d          DCB      "+ok=",0
000304  00      
000305  00                DCB      0
000306  00                DCB      0
000307  00                DCB      0
                  |L6.776|
000308  4f50454e          DCB      "OPEN",0
00030c  00      
00030d  00                DCB      0
00030e  00                DCB      0
00030f  00                DCB      0
                  |L6.784|
000310  4e4f4e45          DCB      "NONE",0
000314  00      
000315  00                DCB      0
000316  00                DCB      0
000317  00                DCB      0
                  |L6.792|
000318  57504132          DCB      "WPA2PSK",0
00031c  50534b00
                  |L6.800|
000320  4145532c          DCB      "AES,",0
000324  00      
000325  00                DCB      0
000326  00                DCB      0
000327  00                DCB      0
                  |L6.808|
000328  222c2273          DCB      """,""security"":%d}}",0
00032c  65637572
000330  69747922
000334  3a25647d
000338  7d00    
00033a  00                DCB      0
00033b  00                DCB      0
                  |L6.828|
00033c  41542b57          DCB      "AT+WSSSID\r\n",0
000340  53535349
000344  440d0a00
                  |L6.840|
000348  41542b57          DCB      "AT+WSKEY\r\n",0
00034c  534b4559
000350  0d0a00  
000353  00                DCB      0
                  |L6.852|
000354  53484152          DCB      "SHARED",0
000358  454400  
00035b  00                DCB      0
                  |L6.860|
00035c  57504150          DCB      "WPAPSK",0
000360  534b00  
000363  00                DCB      0
                  |L6.868|
000364  544b4950          DCB      "TKIP",0
000368  00      
000369  00                DCB      0
00036a  00                DCB      0
00036b  00                DCB      0
                  |L6.876|
00036c  41455300          DCB      "AES",0
                  |L6.880|
000370  57455000          DCB      "WEP",0
                  |L6.884|
000374  7b227265          DCB      "{""response"":%d,""code"":400}",0
000378  73706f6e
00037c  7365223a
000380  25642c22
000384  636f6465
000388  223a3430
00038c  307d00  
00038f  00                DCB      0

                          AREA ||i.HttpGetRealTimeConsumePower||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  HttpGetRealTimeConsumePower PROC
;;;1097   
;;;1098   static int HttpGetRealTimeConsumePower(int16_t iCmd, char* pArgRecvBuf, char *pAckBuf)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1099   {
000004  4681              MOV      r9,r0
000006  468b              MOV      r11,r1
000008  4617              MOV      r7,r2
;;;1100       int     iLength;
;;;1101       
;;;1102       uint8_t iAck = 0;
00000a  f04f0a00          MOV      r10,#0
;;;1103       uint8_t portID = 0;
00000e  2500              MOVS     r5,#0
;;;1104       char *pData,*pTemp;
;;;1105   
;;;1106       pData = pAckBuf;
000010  46b8              MOV      r8,r7
;;;1107       pTemp = pData;
000012  4644              MOV      r4,r8
;;;1108   
;;;1109       iLength = sprintf(pTemp,  "{\"response\":%d,\"code\":%d,\"data\":{\"watt\":[",iCmd, (200<<iAck));
000014  20c8              MOVS     r0,#0xc8
000016  fa00f30a          LSL      r3,r0,r10
00001a  464a              MOV      r2,r9
00001c  a12d              ADR      r1,|L7.212|
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       __2sprintf
000024  4606              MOV      r6,r0
;;;1110       pTemp += iLength;
000026  4434              ADD      r4,r4,r6
;;;1111       for(portID=0;portID<PORT_NUM;portID++)
000028  bf00              NOP      
00002a  e00d              B        |L7.72|
                  |L7.44|
;;;1112       {
;;;1113           iLength = sprintf(pTemp, "%d,",PowerRecordObj[portID].record_ValidPower); //每个口的功耗
00002c  ebc500c5          RSB      r0,r5,r5,LSL #3
000030  4933              LDR      r1,|L7.256|
000032  eb010080          ADD      r0,r1,r0,LSL #2
000036  a133              ADR      r1,|L7.260|
000038  6942              LDR      r2,[r0,#0x14]
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       __2sprintf
000040  4606              MOV      r6,r0
;;;1114           pTemp  += iLength; 
000042  4434              ADD      r4,r4,r6
000044  1c68              ADDS     r0,r5,#1              ;1111
000046  b2c5              UXTB     r5,r0                 ;1111
                  |L7.72|
000048  2d06              CMP      r5,#6                 ;1111
00004a  dbef              BLT      |L7.44|
;;;1115       }
;;;1116       *(pTemp-1) = ']';
00004c  205d              MOVS     r0,#0x5d
00004e  f8040c01          STRB     r0,[r4,#-1]
;;;1117       
;;;1118       iLength = sprintf(pTemp, ",\"amp\":[");
000052  a12d              ADR      r1,|L7.264|
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       __2sprintf
00005a  4606              MOV      r6,r0
;;;1119       pTemp += iLength;
00005c  4434              ADD      r4,r4,r6
;;;1120       for(portID=0;portID<PORT_NUM;portID++)
00005e  2500              MOVS     r5,#0
000060  e00d              B        |L7.126|
                  |L7.98|
;;;1121       {
;;;1122           iLength = sprintf(pTemp, "%d,", PowerRecordObj[portID].record_ValidCurrent); //每个口的电流
000062  ebc500c5          RSB      r0,r5,r5,LSL #3
000066  4926              LDR      r1,|L7.256|
000068  eb010080          ADD      r0,r1,r0,LSL #2
00006c  a125              ADR      r1,|L7.260|
00006e  6842              LDR      r2,[r0,#4]
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       __2sprintf
000076  4606              MOV      r6,r0
;;;1123           pTemp  += iLength; 
000078  4434              ADD      r4,r4,r6
00007a  1c68              ADDS     r0,r5,#1              ;1120
00007c  b2c5              UXTB     r5,r0                 ;1120
                  |L7.126|
00007e  2d06              CMP      r5,#6                 ;1120
000080  dbef              BLT      |L7.98|
;;;1124       }
;;;1125       *(pTemp-1) = ']';
000082  205d              MOVS     r0,#0x5d
000084  f8040c01          STRB     r0,[r4,#-1]
;;;1126   
;;;1127       iLength = sprintf(pTemp, ",\"switch\":[");
000088  a122              ADR      r1,|L7.276|
00008a  4620              MOV      r0,r4
00008c  f7fffffe          BL       __2sprintf
000090  4606              MOV      r6,r0
;;;1128       pTemp += iLength;
000092  4434              ADD      r4,r4,r6
;;;1129       for(portID=0;portID<PORT_NUM;portID++)
000094  2500              MOVS     r5,#0
000096  e00d              B        |L7.180|
                  |L7.152|
;;;1130       {
;;;1131           iLength = sprintf(pTemp, "%d,", SwInformation.PortInfor[portID].OnOffStatus ); //每个口的开关
000098  eb050185          ADD      r1,r5,r5,LSL #2
00009c  4820              LDR      r0,|L7.288|
00009e  eb000081          ADD      r0,r0,r1,LSL #2
0000a2  7c42              LDRB     r2,[r0,#0x11]
0000a4  a117              ADR      r1,|L7.260|
0000a6  4620              MOV      r0,r4
0000a8  f7fffffe          BL       __2sprintf
0000ac  4606              MOV      r6,r0
;;;1132           pTemp  += iLength; 
0000ae  4434              ADD      r4,r4,r6
0000b0  1c68              ADDS     r0,r5,#1              ;1129
0000b2  b2c5              UXTB     r5,r0                 ;1129
                  |L7.180|
0000b4  2d06              CMP      r5,#6                 ;1129
0000b6  dbef              BLT      |L7.152|
;;;1133       }
;;;1134       *(pTemp-1) = ']';
0000b8  205d              MOVS     r0,#0x5d
0000ba  f8040c01          STRB     r0,[r4,#-1]
;;;1135       *pTemp = '}';
0000be  207d              MOVS     r0,#0x7d
0000c0  7020              STRB     r0,[r4,#0]
;;;1136        pTemp++;
0000c2  1c64              ADDS     r4,r4,#1
;;;1137       *pTemp = '}';
0000c4  7020              STRB     r0,[r4,#0]
;;;1138       pTemp++;
0000c6  1c64              ADDS     r4,r4,#1
;;;1139       *pTemp = '\0';
0000c8  2000              MOVS     r0,#0
0000ca  7020              STRB     r0,[r4,#0]
;;;1140   
;;;1141       #if defined(__HTTP_SET_DBG__) && defined(__UDP_PRINT_DBG__) 
;;;1142           UdpDebugPrint("The RTdata is:\r\n", sizeof("The data is:\r\n")-1);
;;;1143           UdpDebugPrint(pAckBuf, pTemp-pData);                                         
;;;1144       #endif 
;;;1145       //u_printf("The new data = %s,the length is %d\n",pAckBuf,pTemp-pData);
;;;1146      
;;;1147       return (pTemp-pData); 
0000cc  eba40008          SUB      r0,r4,r8
;;;1148                           
;;;1149   }
0000d0  e8bd9ff0          POP      {r4-r12,pc}
;;;1150   
                          ENDP

                  |L7.212|
0000d4  7b227265          DCB      "{""response"":%d,""code"":%d,""data"":{""watt"":[",0
0000d8  73706f6e
0000dc  7365223a
0000e0  25642c22
0000e4  636f6465
0000e8  223a2564
0000ec  2c226461
0000f0  7461223a
0000f4  7b227761
0000f8  7474223a
0000fc  5b00    
0000fe  00                DCB      0
0000ff  00                DCB      0
                  |L7.256|
                          DCD      PowerRecordObj
                  |L7.260|
000104  25642c00          DCB      "%d,",0
                  |L7.264|
000108  2c22616d          DCB      ",""amp"":[",0
00010c  70223a5b
000110  00      
000111  00                DCB      0
000112  00                DCB      0
000113  00                DCB      0
                  |L7.276|
000114  2c227377          DCB      ",""switch"":[",0
000118  69746368
00011c  223a5b00
                  |L7.288|
                          DCD      SwInformation+0x8

                          AREA ||i.HttpGetRule||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  HttpGetRule PROC
;;;1216   *******************************************************************************/
;;;1217   static int HttpGetRule(int16_t iCmd, char* pArgRecvBuf, char *pAckBuf)   
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1218   { 
000004  4605              MOV      r5,r0
000006  4689              MOV      r9,r1
000008  4614              MOV      r4,r2
;;;1219   	char     *pTemp, *pData;
;;;1220       int16_t  iLength;
;;;1221       
;;;1222       pTemp   = pAckBuf;                                                      // 申请将要发送的数据的存储区 
00000a  4626              MOV      r6,r4
;;;1223       iLength = sprintf(pTemp, "{\"response\":%d,\"code\":200,"
00000c  462a              MOV      r2,r5
00000e  a10e              ADR      r1,|L8.72|
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       __2sprintf
000016  b207              SXTH     r7,r0
;;;1224                                "\"data\":{\"rule\":[", iCmd);
;;;1225   	if(-1 == iLength)
000018  f1b73fff          CMP      r7,#0xffffffff
00001c  d106              BNE      |L8.44|
;;;1226       {
;;;1227           return sprintf(pTemp, "{\"response\":%d,\"code\":400}", iCmd);             // 数据错误 回应 
00001e  462a              MOV      r2,r5
000020  a114              ADR      r1,|L8.116|
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       __2sprintf
                  |L8.40|
;;;1228       }
;;;1229       else
;;;1230       {   // 载荷数据体 
;;;1231           pData = pTemp+iLength;
;;;1232           pData = GetDevRule(pData);
;;;1233           strcat(pData,"]}}");
;;;1234           return strlen(pAckBuf);
;;;1235       }
;;;1236   } 
000028  e8bd87f0          POP      {r4-r10,pc}
                  |L8.44|
00002c  eb060807          ADD      r8,r6,r7              ;1231
000030  4640              MOV      r0,r8                 ;1232
000032  f7fffffe          BL       GetDevRule
000036  4680              MOV      r8,r0                 ;1232
000038  a115              ADR      r1,|L8.144|
00003a  4640              MOV      r0,r8                 ;1233
00003c  f7fffffe          BL       strcat
000040  4620              MOV      r0,r4                 ;1234
000042  f7fffffe          BL       strlen
000046  e7ef              B        |L8.40|
;;;1237   
                          ENDP

                  |L8.72|
000048  7b227265          DCB      "{""response"":%d,""code"":200,""data"":{""rule"":[",0
00004c  73706f6e
000050  7365223a
000054  25642c22
000058  636f6465
00005c  223a3230
000060  302c2264
000064  61746122
000068  3a7b2272
00006c  756c6522
000070  3a5b00  
000073  00                DCB      0
                  |L8.116|
000074  7b227265          DCB      "{""response"":%d,""code"":400}",0
000078  73706f6e
00007c  7365223a
000080  25642c22
000084  636f6465
000088  223a3430
00008c  307d00  
00008f  00                DCB      0
                  |L8.144|
000090  5d7d7d00          DCB      "]}}",0

                          AREA ||i.HttpInit||, CODE, READONLY, ALIGN=2

                  HttpInit PROC
;;;127    *******************************************************************************/
;;;128    void HttpInit(void)
000000  2000              MOVS     r0,#0
;;;129    {
;;;130        MacChgFlag = 0;
000002  4901              LDR      r1,|L9.8|
000004  7008              STRB     r0,[r1,#0]
;;;131    }
000006  4770              BX       lr
;;;132    /******************************************************************************* 
                          ENDP

                  |L9.8|
                          DCD      MacChgFlag

                          AREA ||i.HttpModifyProductSn||, CODE, READONLY, ALIGN=2

                          REQUIRE _scanf_int
                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  HttpModifyProductSn PROC
;;;910    *******************************************************************************/
;;;911    static int HttpModifyProductSn(int16_t iCmd, char* pArgRecvBuf, char *pAckBuf) 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;912    {
000004  b08d              SUB      sp,sp,#0x34
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
00000a  4691              MOV      r9,r2
;;;913        char    iAck = 0, isSaveSakSn;
00000c  2000              MOVS     r0,#0
00000e  900c              STR      r0,[sp,#0x30]
;;;914        
;;;915    	cJSON   *json;
;;;916    	char    *pValue;
;;;917    	int     mac[7];
;;;918    	
;;;919        int     i, iLength;
;;;920    
;;;921        //u_printf("Modify sn cmd is:%s\n",pArgRecvBuf);
;;;922        
;;;923    	json = cJSON_Parse(pArgRecvBuf);
000010  4640              MOV      r0,r8
000012  f7fffffe          BL       cJSON_Parse
000016  4683              MOV      r11,r0
;;;924    	if(json)
000018  f1bb0f00          CMP      r11,#0
00001c  d067              BEQ      |L10.238|
;;;925    	{
;;;926    	    isSaveSakSn = 1;
00001e  f04f0a01          MOV      r10,#1
;;;927    		pValue = cJSON_GetObjectItem(json,"sn")->valuestring;
000022  a13b              ADR      r1,|L10.272|
000024  4658              MOV      r0,r11
000026  f7fffffe          BL       cJSON_GetObjectItem
00002a  6906              LDR      r6,[r0,#0x10]
;;;928    		if(strcmp(pValue, "null") != 0)
00002c  a139              ADR      r1,|L10.276|
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       strcmp
000034  b170              CBZ      r0,|L10.84|
;;;929    		{
;;;930                iLength = strlen(pValue);
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       strlen
00003c  4605              MOV      r5,r0
;;;931                i       = HF_SUCCESS+1;
00003e  2401              MOVS     r4,#1
;;;932                if(SERIAL_NUN_ID_LEN != iLength)
000040  2d10              CMP      r5,#0x10
000042  d000              BEQ      |L10.70|
;;;933                {
;;;934                    goto ModSnExit;
000044  e050              B        |L10.232|
                  |L10.70|
;;;935                }
;;;936                i           = HF_SUCCESS;
000046  2400              MOVS     r4,#0
;;;937                isSaveSakSn = 0;
000048  46a2              MOV      r10,r4
;;;938                memcpy(DevInfoObj.dev_sn, pValue, iLength);
00004a  462a              MOV      r2,r5
00004c  4631              MOV      r1,r6
00004e  4833              LDR      r0,|L10.284|
000050  f7fffffe          BL       __aeabi_memcpy
                  |L10.84|
;;;939    		}
;;;940    		// 
;;;941    		pValue = cJSON_GetObjectItem(json,"sak")->valuestring;
000054  a132              ADR      r1,|L10.288|
000056  4658              MOV      r0,r11
000058  f7fffffe          BL       cJSON_GetObjectItem
00005c  6906              LDR      r6,[r0,#0x10]
;;;942    		if(strcmp(pValue, "null") != 0)
00005e  a12d              ADR      r1,|L10.276|
000060  4630              MOV      r0,r6
000062  f7fffffe          BL       strcmp
000066  b178              CBZ      r0,|L10.136|
;;;943    		{ 
;;;944                iLength = strlen(pValue);
000068  4630              MOV      r0,r6
00006a  f7fffffe          BL       strlen
00006e  4605              MOV      r5,r0
;;;945                i       = HF_SUCCESS+1;
000070  2401              MOVS     r4,#1
;;;946                if(SAK_LEN != iLength)
000072  2d0c              CMP      r5,#0xc
000074  d000              BEQ      |L10.120|
;;;947                {
;;;948                    goto ModSnExit;
000076  e037              B        |L10.232|
                  |L10.120|
;;;949                }
;;;950                i           = HF_SUCCESS;
000078  2400              MOVS     r4,#0
;;;951                isSaveSakSn = 0;
00007a  46a2              MOV      r10,r4
;;;952                memcpy(DevInfoObj.dev_sak, pValue, iLength);
00007c  462a              MOV      r2,r5
00007e  4631              MOV      r1,r6
000080  4826              LDR      r0,|L10.284|
000082  3011              ADDS     r0,r0,#0x11
000084  f7fffffe          BL       __aeabi_memcpy
                  |L10.136|
;;;953    		} 
;;;954    		// 
;;;955            if(0x00 == isSaveSakSn)
000088  f1ba0f00          CMP      r10,#0
00008c  d101              BNE      |L10.146|
;;;956            {
;;;957    
;;;958                WriteDevSakSN();
00008e  f7fffffe          BL       WriteDevSakSN
                  |L10.146|
;;;959    
;;;960            }
;;;961    		// 
;;;962    		pValue = cJSON_GetObjectItem(json,"mac")->valuestring;
000092  a124              ADR      r1,|L10.292|
000094  4658              MOV      r0,r11
000096  f7fffffe          BL       cJSON_GetObjectItem
00009a  6906              LDR      r6,[r0,#0x10]
;;;963    		if(strcmp(pValue, "null") != 0)
00009c  a11d              ADR      r1,|L10.276|
00009e  4630              MOV      r0,r6
0000a0  f7fffffe          BL       strcmp
0000a4  b1f8              CBZ      r0,|L10.230|
;;;964    		{ 
;;;965                i       = HF_SUCCESS+1;
0000a6  2401              MOVS     r4,#1
;;;966    			iLength = sscanf(pValue, "%02X:%02X:%02X:%02X:%02X:%02X",
0000a8  a80a              ADD      r0,sp,#0x28
0000aa  a909              ADD      r1,sp,#0x24
0000ac  aa08              ADD      r2,sp,#0x20
0000ae  ab07              ADD      r3,sp,#0x1c
0000b0  e9cd3200          STRD     r3,r2,[sp,#0]
0000b4  e9cd1002          STRD     r1,r0,[sp,#8]
0000b8  ab06              ADD      r3,sp,#0x18
0000ba  aa05              ADD      r2,sp,#0x14
0000bc  a11a              ADR      r1,|L10.296|
0000be  4630              MOV      r0,r6
0000c0  f7fffffe          BL       __0sscanf
0000c4  4605              MOV      r5,r0
;;;967                                        &mac[0], &mac[1],
;;;968                                        &mac[2], &mac[3],
;;;969                                        &mac[4], &mac[5]); 
;;;970                if(iLength)
0000c6  b175              CBZ      r5,|L10.230|
;;;971                { 
;;;972                    for(i=0; i<6; i++)
0000c8  2400              MOVS     r4,#0
0000ca  e006              B        |L10.218|
                  |L10.204|
;;;973                    {
;;;974                        DevInfoObj.Dev_Mac[i] = (uint8_t)mac[i];
0000cc  a805              ADD      r0,sp,#0x14
0000ce  f8100024          LDRB     r0,[r0,r4,LSL #2]
0000d2  4912              LDR      r1,|L10.284|
0000d4  1fc9              SUBS     r1,r1,#7
0000d6  5508              STRB     r0,[r1,r4]
0000d8  1c64              ADDS     r4,r4,#1              ;972
                  |L10.218|
0000da  2c06              CMP      r4,#6                 ;972
0000dc  dbf6              BLT      |L10.204|
;;;975                    }
;;;976                    i = HF_SUCCESS;
0000de  2400              MOVS     r4,#0
;;;977                    MacChgFlag = 1;
0000e0  2001              MOVS     r0,#1
0000e2  4919              LDR      r1,|L10.328|
0000e4  7008              STRB     r0,[r1,#0]
                  |L10.230|
;;;978                } 
;;;979    		} 
;;;980          ModSnExit:
0000e6  bf00              NOP      
                  |L10.232|
;;;981    		cJSON_Delete(json);
0000e8  4658              MOV      r0,r11
0000ea  f7fffffe          BL       cJSON_Delete
                  |L10.238|
;;;982    	}
;;;983        iAck = (i==HF_SUCCESS)?(0):(1);
0000ee  b10c              CBZ      r4,|L10.244|
0000f0  2001              MOVS     r0,#1
0000f2  e000              B        |L10.246|
                  |L10.244|
0000f4  2000              MOVS     r0,#0
                  |L10.246|
0000f6  900c              STR      r0,[sp,#0x30]
;;;984        return sprintf(pAckBuf, "{\"response\":%d,\"code\":%d}", iCmd, (200<<iAck));
0000f8  21c8              MOVS     r1,#0xc8
0000fa  980c              LDR      r0,[sp,#0x30]
0000fc  fa01f300          LSL      r3,r1,r0
000100  463a              MOV      r2,r7
000102  a112              ADR      r1,|L10.332|
000104  4648              MOV      r0,r9
000106  f7fffffe          BL       __2sprintf
;;;985    
;;;986        #if defined(__SN_SET_DBG__) && defined(__UDP_PRINT_DBG__)
;;;987        UdpDebugPrint("SetSnDebug:\r\n", sizeof("SetSnDebug:\r\n")-1);
;;;988        UdpDebugPrint(pAckBuf, strlen(pAckBuf));
;;;989        UdpDebugPrint("\r\n", sizeof("\r\n")-1);
;;;990        #endif 
;;;991    } 
00010a  b00d              ADD      sp,sp,#0x34
00010c  e8bd8ff0          POP      {r4-r11,pc}
;;;992    void ModifyDevMac(void)
                          ENDP

                  |L10.272|
000110  736e00            DCB      "sn",0
000113  00                DCB      0
                  |L10.276|
000114  6e756c6c          DCB      "null",0
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
                  |L10.284|
                          DCD      DevInfoObj+0x7
                  |L10.288|
000120  73616b00          DCB      "sak",0
                  |L10.292|
000124  6d616300          DCB      "mac",0
                  |L10.296|
000128  25303258          DCB      "%02X:%02X:%02X:%02X:%02X:%02X",0
00012c  3a253032
000130  583a2530
000134  32583a25
000138  3032583a
00013c  25303258
000140  3a253032
000144  5800    
000146  00                DCB      0
000147  00                DCB      0
                  |L10.328|
                          DCD      MacChgFlag
                  |L10.332|
00014c  7b227265          DCB      "{""response"":%d,""code"":%d}",0
000150  73706f6e
000154  7365223a
000158  25642c22
00015c  636f6465
000160  223a2564
000164  7d00    
000166  00                DCB      0
000167  00                DCB      0

                          AREA ||i.HttpRestartMachine||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  HttpRestartMachine PROC
;;;1027   *******************************************************************************/
;;;1028   static int HttpRestartMachine(int16_t iCmd, char* pArgRecvBuf, char *pAckBuf)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1029   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;1030       char        iRslt = 0;
000008  2700              MOVS     r7,#0
;;;1031   	  int 				option;
;;;1032       
;;;1033       iRslt    = RebootSyncDev(pArgRecvBuf,&option); 
00000a  4669              MOV      r1,sp
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       RebootSyncDev
000012  4607              MOV      r7,r0
;;;1034   	return sprintf(pAckBuf, "{\"response\":%d,\"code\":%d}", iCmd, (200<<iRslt));    // 回应HTTP Ack数据 
000014  20c8              MOVS     r0,#0xc8
000016  fa00f307          LSL      r3,r0,r7
00001a  4622              MOV      r2,r4
00001c  a102              ADR      r1,|L11.40|
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       __2sprintf
;;;1035   }
000024  bdf8              POP      {r3-r7,pc}
;;;1036   
                          ENDP

000026  0000              DCW      0x0000
                  |L11.40|
000028  7b227265          DCB      "{""response"":%d,""code"":%d}",0
00002c  73706f6e
000030  7365223a
000034  25642c22
000038  636f6465
00003c  223a2564
000040  7d00    
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.HttpScanNearbyWifiSignal||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  HttpScanNearbyWifiSignal PROC
;;;543    ****************************************************************************************************/
;;;544    static int HttpScanNearbyWifiSignal(int16_t iCmd, char* pArgRecvBuf, char *pAckBuf) 
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;545    { 
000004  4606              MOV      r6,r0
000006  4689              MOV      r9,r1
000008  4614              MOV      r4,r2
;;;546        int iAck = 0, iLength;
00000a  f04f0800          MOV      r8,#0
;;;547        char    *pDataStart;
;;;548        
;;;549        iLengthHttpAckBuf = HTTP_SERVER_ACK_LENGTH-3-1; 
00000e  f2405074          MOV      r0,#0x574
000012  4923              LDR      r1,|L12.160|
000014  6008              STR      r0,[r1,#0]  ; iLengthHttpAckBuf
;;;550        
;;;551        pDataStart   = pAckBuf;
000016  4625              MOV      r5,r4
;;;552        pHttpAckBuf  = pAckBuf;
000018  4822              LDR      r0,|L12.164|
00001a  6004              STR      r4,[r0,#0]  ; pHttpAckBuf
;;;553        iLength      = sprintf(pAckBuf,"{\"response\":%d,"
00001c  4632              MOV      r2,r6
00001e  a122              ADR      r1,|L12.168|
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       __2sprintf
000026  4607              MOV      r7,r0
;;;554                                        "\"code\":200,"
;;;555                                        "\"data\":{\"signal\":[", iCmd);
;;;556        pHttpAckBuf  = pAckBuf + iLength; 
000028  19e0              ADDS     r0,r4,r7
00002a  491e              LDR      r1,|L12.164|
00002c  6008              STR      r0,[r1,#0]  ; pHttpAckBuf
;;;557    
;;;558        iLengthHttpAckBuf -= iLength; 
00002e  481c              LDR      r0,|L12.160|
000030  6800              LDR      r0,[r0,#0]  ; iLengthHttpAckBuf
000032  1bc0              SUBS     r0,r0,r7
000034  491a              LDR      r1,|L12.160|
000036  6008              STR      r0,[r1,#0]  ; iLengthHttpAckBuf
;;;559        
;;;560    	iAck         = hfwifi_scan(hfwifi_scan_callback); 
000038  4827              LDR      r0,|L12.216|
00003a  f7fffffe          BL       hfwifi_scan
00003e  4680              MOV      r8,r0
;;;561    	if(iAck < 0)
000040  f1b80f00          CMP      r8,#0
000044  da06              BGE      |L12.84|
;;;562    	{
;;;563            iLength  = sprintf(pAckBuf,"{\"response\":%d,\"code\":400}", iCmd);
000046  4632              MOV      r2,r6
000048  a124              ADR      r1,|L12.220|
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       __2sprintf
000050  4607              MOV      r7,r0
000052  e01f              B        |L12.148|
                  |L12.84|
;;;564    	}
;;;565    	else
;;;566    	{
;;;567    	    pHttpAckBuf--;
000054  4813              LDR      r0,|L12.164|
000056  6800              LDR      r0,[r0,#0]  ; pHttpAckBuf
000058  1e40              SUBS     r0,r0,#1
00005a  4912              LDR      r1,|L12.164|
00005c  6008              STR      r0,[r1,#0]  ; pHttpAckBuf
;;;568            *pHttpAckBuf = ']';
00005e  205d              MOVS     r0,#0x5d
000060  6809              LDR      r1,[r1,#0]  ; pHttpAckBuf
000062  7008              STRB     r0,[r1,#0]
;;;569            pHttpAckBuf++;
000064  480f              LDR      r0,|L12.164|
000066  6800              LDR      r0,[r0,#0]  ; pHttpAckBuf
000068  1c40              ADDS     r0,r0,#1
00006a  490e              LDR      r1,|L12.164|
00006c  6008              STR      r0,[r1,#0]  ; pHttpAckBuf
;;;570            *pHttpAckBuf = '}';
00006e  207d              MOVS     r0,#0x7d
000070  6809              LDR      r1,[r1,#0]  ; pHttpAckBuf
000072  7008              STRB     r0,[r1,#0]
;;;571            pHttpAckBuf++;
000074  480b              LDR      r0,|L12.164|
000076  6800              LDR      r0,[r0,#0]  ; pHttpAckBuf
000078  1c40              ADDS     r0,r0,#1
00007a  490a              LDR      r1,|L12.164|
00007c  6008              STR      r0,[r1,#0]  ; pHttpAckBuf
;;;572            *pHttpAckBuf = '}';
00007e  207d              MOVS     r0,#0x7d
000080  6809              LDR      r1,[r1,#0]  ; pHttpAckBuf
000082  7008              STRB     r0,[r1,#0]
;;;573            pHttpAckBuf++;
000084  4807              LDR      r0,|L12.164|
000086  6800              LDR      r0,[r0,#0]  ; pHttpAckBuf
000088  1c40              ADDS     r0,r0,#1
00008a  4906              LDR      r1,|L12.164|
00008c  6008              STR      r0,[r1,#0]  ; pHttpAckBuf
;;;574            *pHttpAckBuf = '\0';
00008e  2000              MOVS     r0,#0
000090  6809              LDR      r1,[r1,#0]  ; pHttpAckBuf
000092  7008              STRB     r0,[r1,#0]
                  |L12.148|
;;;575    	}
;;;576    	#if  defined(__WIFI_SCAN_DBG__) && defined(__UDP_PRINT_DBG__) 
;;;577    	//UdpDebugPrint(pDataStart, strlen(pDataStart));
;;;578    	#endif 
;;;579    	return strlen(pDataStart);
000094  4628              MOV      r0,r5
000096  f7fffffe          BL       strlen
;;;580    } 
00009a  e8bd87f0          POP      {r4-r10,pc}
;;;581    
                          ENDP

00009e  0000              DCW      0x0000
                  |L12.160|
                          DCD      iLengthHttpAckBuf
                  |L12.164|
                          DCD      pHttpAckBuf
                  |L12.168|
0000a8  7b227265          DCB      "{""response"":%d,""code"":200,""data"":{""signal"":[",0
0000ac  73706f6e
0000b0  7365223a
0000b4  25642c22
0000b8  636f6465
0000bc  223a3230
0000c0  302c2264
0000c4  61746122
0000c8  3a7b2273
0000cc  69676e61
0000d0  6c223a5b
0000d4  00      
0000d5  00                DCB      0
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L12.216|
                          DCD      hfwifi_scan_callback
                  |L12.220|
0000dc  7b227265          DCB      "{""response"":%d,""code"":400}",0
0000e0  73706f6e
0000e4  7365223a
0000e8  25642c22
0000ec  636f6465
0000f0  223a3430
0000f4  307d00  
0000f7  00                DCB      0

                          AREA ||i.HttpSetStaticIp||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  HttpSetStaticIp PROC
;;;896    *******************************************************************************/
;;;897    static int HttpSetStaticIp(int16_t iCmd, char* pArgRecvBuf, char *pAckBuf)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;898    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;899        uint8_t iAck = 0;
00000a  2700              MOVS     r7,#0
;;;900        iAck = SetStaticIp(pArgRecvBuf);
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       SetStaticIp
000012  b2c7              UXTB     r7,r0
;;;901        return sprintf(pAckBuf, "{\"response\":%d,\"code\":%d}", iCmd, (200<<iAck)); 
000014  20c8              MOVS     r0,#0xc8
000016  fa00f307          LSL      r3,r0,r7
00001a  4622              MOV      r2,r4
00001c  a102              ADR      r1,|L13.40|
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       __2sprintf
;;;902    }
000024  e8bd81f0          POP      {r4-r8,pc}
;;;903    
                          ENDP

                  |L13.40|
000028  7b227265          DCB      "{""response"":%d,""code"":%d}",0
00002c  73706f6e
000030  7365223a
000034  25642c22
000038  636f6465
00003c  223a2564
000040  7d00    
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.HttpSetWifiMode||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  HttpSetWifiMode PROC
;;;424    *******************************************************************************/
;;;425    static int HttpSetWifiMode(int16_t iCmd, char* pArgRecvBuf, char *pAckBuf) 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;426    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;427        uint8_t iAck = 0;
00000a  2700              MOVS     r7,#0
;;;428        iAck = SetWifiMode(pArgRecvBuf);
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       SetWifiMode
000012  b2c7              UXTB     r7,r0
;;;429        return sprintf(pAckBuf, "{\"response\":%d,\"code\":%d}", iCmd, (200<<iAck)); 
000014  20c8              MOVS     r0,#0xc8
000016  fa00f307          LSL      r3,r0,r7
00001a  4622              MOV      r2,r4
00001c  a102              ADR      r1,|L14.40|
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       __2sprintf
;;;430    }
000024  e8bd81f0          POP      {r4-r8,pc}
;;;431    
                          ENDP

                  |L14.40|
000028  7b227265          DCB      "{""response"":%d,""code"":%d}",0
00002c  73706f6e
000030  7365223a
000034  25642c22
000038  636f6465
00003c  223a2564
000040  7d00    
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.HttpSwitch_OnOffCtl||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  HttpSwitch_OnOffCtl PROC
;;;1045   *******************************************************************************/
;;;1046   static int HttpSwitch_OnOffCtl(int16_t iCmd, char* pArgRecvBuf, char *pAckBuf)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1047   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;1048       char iRslt;
;;;1049       
;;;1050       iRslt   = 1;
00000a  2701              MOVS     r7,#1
;;;1051       iRslt   = Switch_Ctl(pArgRecvBuf);
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       Switch_Ctl
000012  4607              MOV      r7,r0
;;;1052       return sprintf(pAckBuf, "{\"response\":%d,\"code\":%d}", iCmd, 200<<iRslt); 
000014  20c8              MOVS     r0,#0xc8
000016  fa00f307          LSL      r3,r0,r7
00001a  4622              MOV      r2,r4
00001c  a102              ADR      r1,|L15.40|
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       __2sprintf
;;;1053   } 
000024  e8bd81f0          POP      {r4-r8,pc}
;;;1054   
                          ENDP

                  |L15.40|
000028  7b227265          DCB      "{""response"":%d,""code"":%d}",0
00002c  73706f6e
000030  7365223a
000034  25642c22
000038  636f6465
00003c  223a2564
000040  7d00    
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.ModifyDevMac||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  ModifyDevMac PROC
;;;991    } 
;;;992    void ModifyDevMac(void)
000000  b530              PUSH     {r4,r5,lr}
;;;993    {
000002  b093              SUB      sp,sp,#0x4c
;;;994        int     iLength, i;
;;;995    	char    AtCmdBuf[40], AtRsltMsg[19+1]={0};
000004  2114              MOVS     r1,#0x14
000006  a804              ADD      r0,sp,#0x10
000008  f7fffffe          BL       __aeabi_memclr4
;;;996    	if(0x00 == MacChgFlag)
00000c  4817              LDR      r0,|L16.108|
00000e  7800              LDRB     r0,[r0,#0]  ; MacChgFlag
000010  b908              CBNZ     r0,|L16.22|
                  |L16.18|
;;;997    	{
;;;998    	    return;
;;;999    	}
;;;1000       iLength = sprintf(AtCmdBuf, "AT+WSMAC=8888,%02X%02X%02X%02X%02X%02X\r\n",
;;;1001                                   DevInfoObj.Dev_Mac[0], DevInfoObj.Dev_Mac[1],
;;;1002                                   DevInfoObj.Dev_Mac[2], DevInfoObj.Dev_Mac[3],
;;;1003                                   DevInfoObj.Dev_Mac[4], DevInfoObj.Dev_Mac[5]);
;;;1004   
;;;1005       //u_printf("set mac cmd is:%s\n",AtCmdBuf);
;;;1006                                   
;;;1007       i       = hfat_send_cmd(AtCmdBuf, iLength, AtRsltMsg, 19);
;;;1008       if(HF_SUCCESS == i)
;;;1009       {
;;;1010   		i = hfat_send_cmd(AtCmdBuf, iLength, AtRsltMsg, 19);   
;;;1011   		if(HF_SUCCESS == i)
;;;1012   		{
;;;1013   	    	MacChgFlag = 0;
;;;1014   	    	Reboot(0);
;;;1015   		}
;;;1016   	}
;;;1017   }
000012  b013              ADD      sp,sp,#0x4c
000014  bd30              POP      {r4,r5,pc}
                  |L16.22|
000016  4816              LDR      r0,|L16.112|
000018  7940              LDRB     r0,[r0,#5]            ;1000  ; DevInfoObj
00001a  4915              LDR      r1,|L16.112|
00001c  7909              LDRB     r1,[r1,#4]            ;1000  ; DevInfoObj
00001e  4a14              LDR      r2,|L16.112|
000020  78d2              LDRB     r2,[r2,#3]            ;1000  ; DevInfoObj
000022  4b13              LDR      r3,|L16.112|
000024  789b              LDRB     r3,[r3,#2]            ;1000  ; DevInfoObj
000026  e9cd3200          STRD     r3,r2,[sp,#0]         ;1000
00002a  e9cd1002          STRD     r1,r0,[sp,#8]         ;1000
00002e  4810              LDR      r0,|L16.112|
000030  7843              LDRB     r3,[r0,#1]            ;1000  ; DevInfoObj
000032  7802              LDRB     r2,[r0,#0]            ;1000  ; DevInfoObj
000034  a10f              ADR      r1,|L16.116|
000036  a809              ADD      r0,sp,#0x24           ;1000
000038  f7fffffe          BL       __2sprintf
00003c  4605              MOV      r5,r0                 ;1000
00003e  2313              MOVS     r3,#0x13              ;1007
000040  aa04              ADD      r2,sp,#0x10           ;1007
000042  4629              MOV      r1,r5                 ;1007
000044  a809              ADD      r0,sp,#0x24           ;1007
000046  f7fffffe          BL       hfat_send_cmd
00004a  4604              MOV      r4,r0                 ;1007
00004c  b964              CBNZ     r4,|L16.104|
00004e  2313              MOVS     r3,#0x13              ;1010
000050  aa04              ADD      r2,sp,#0x10           ;1010
000052  4629              MOV      r1,r5                 ;1010
000054  a809              ADD      r0,sp,#0x24           ;1010
000056  f7fffffe          BL       hfat_send_cmd
00005a  4604              MOV      r4,r0                 ;1010
00005c  b924              CBNZ     r4,|L16.104|
00005e  2000              MOVS     r0,#0                 ;1013
000060  4902              LDR      r1,|L16.108|
000062  7008              STRB     r0,[r1,#0]            ;1013
000064  f7fffffe          BL       Reboot
                  |L16.104|
000068  bf00              NOP      
00006a  e7d2              B        |L16.18|
;;;1018   
                          ENDP

                  |L16.108|
                          DCD      MacChgFlag
                  |L16.112|
                          DCD      DevInfoObj
                  |L16.116|
000074  41542b57          DCB      "AT+WSMAC=8888,%02X%02X%02X%02X%02X%02X\r\n",0
000078  534d4143
00007c  3d383838
000080  382c2530
000084  32582530
000088  32582530
00008c  32582530
000090  32582530
000094  32582530
000098  32580d0a
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0

                          AREA ||i.SetClientKey||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  SetClientKey PROC
;;;346    *******************************************************************************/
;;;347    int SetClientKey(int Security, char *pKeyStr, char *pCmdSet)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;348    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;349        int iLength;
;;;350        if(SECURITY_WEP != Security) 
00000a  2c01              CMP      r4,#1
00000c  d008              BEQ      |L17.32|
;;;351        {
;;;352            iLength = strlen(pKeyStr);
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       strlen
000014  4605              MOV      r5,r0
;;;353            if(8>iLength)
000016  2d08              CMP      r5,#8
000018  da02              BGE      |L17.32|
;;;354            {
;;;355                return 0;
00001a  2000              MOVS     r0,#0
                  |L17.28|
;;;356            }
;;;357        }
;;;358        
;;;359        if(SECURITY_WEP == Security)
;;;360        {
;;;361            iLength = strlen(pKeyStr);
;;;362            if((5 == iLength) || (13 == iLength))
;;;363            {
;;;364                iLength  = sprintf(pCmdSet, "AT+WSKEY=SHARED,WEP-A,%s\r\n", pKeyStr);
;;;365            }
;;;366            else if((10 == iLength) || (26 == iLength))
;;;367            {
;;;368                iLength  = sprintf(pCmdSet, "AT+WSKEY=SHARED,WEP-H,%s\r\n", pKeyStr);
;;;369            }
;;;370            else
;;;371            {
;;;372                return 0;
;;;373            }
;;;374        }
;;;375        else if(SECURITY_WPA_TKIP == Security)
;;;376        {
;;;377            iLength  = sprintf(pCmdSet, "AT+WSKEY=WPAPSK,TKIP,%s\r\n", pKeyStr); 
;;;378        }
;;;379        else if(SECURITY_WPA2_TKIP == Security)
;;;380        {
;;;381            iLength  = sprintf(pCmdSet, "AT+WSKEY=WPA2PSK,TKIP,%s\r\n", pKeyStr); 
;;;382        }
;;;383        else if(SECURITY_WPA_AES == Security)
;;;384        {
;;;385            iLength  = sprintf(pCmdSet, "AT+WSKEY=WPAPSK,AES,%s\r\n", pKeyStr); 
;;;386        }
;;;387        else if(SECURITY_WPA2_AES == Security)
;;;388        {
;;;389            iLength  = sprintf(pCmdSet, "AT+WSKEY=WPA2PSK,AES,%s\r\n", pKeyStr); 
;;;390        }
;;;391        else if(SECURITY_WPA_TKIP_AES == Security)
;;;392        {
;;;393            iLength  = sprintf(pCmdSet, "AT+WSKEY=WPAPSK,AES,%s\r\n", pKeyStr); 
;;;394        }
;;;395        else if(SECURITY_WPA2_TKIP_AES == Security)
;;;396        {
;;;397            iLength  = sprintf(pCmdSet, "AT+WSKEY=WPA2PSK,AES,%s\r\n", pKeyStr); 
;;;398        }
;;;399        else if(SECURITY_WPA_WPA2_TKIP == Security)
;;;400        {
;;;401            iLength  = sprintf(pCmdSet, "AT+WSKEY=WPA2PSK,TKIP,%s\r\n", pKeyStr); 
;;;402        }
;;;403        else if(SECURITY_WPA_WPA2_AES == Security)
;;;404        {
;;;405            iLength  = sprintf(pCmdSet, "AT+WSKEY=WPA2PSK,AES,%s\r\n", pKeyStr); 
;;;406        }
;;;407        else if(SECURITY_WPA_WPA2_TKIP_AES == Security)
;;;408        {
;;;409            iLength  = sprintf(pCmdSet, "AT+WSKEY=WPA2PSK,AES,%s\r\n", pKeyStr); 
;;;410        }
;;;411        else
;;;412        {
;;;413            return 0;
;;;414        }
;;;415        return iLength;
;;;416    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L17.32|
000020  2c01              CMP      r4,#1                 ;359
000022  d11b              BNE      |L17.92|
000024  4630              MOV      r0,r6                 ;361
000026  f7fffffe          BL       strlen
00002a  4605              MOV      r5,r0                 ;361
00002c  2d05              CMP      r5,#5                 ;362
00002e  d001              BEQ      |L17.52|
000030  2d0d              CMP      r5,#0xd               ;362
000032  d106              BNE      |L17.66|
                  |L17.52|
000034  4632              MOV      r2,r6                 ;364
000036  a134              ADR      r1,|L17.264|
000038  4638              MOV      r0,r7                 ;364
00003a  f7fffffe          BL       __2sprintf
00003e  4605              MOV      r5,r0                 ;364
000040  e05f              B        |L17.258|
                  |L17.66|
000042  2d0a              CMP      r5,#0xa               ;366
000044  d001              BEQ      |L17.74|
000046  2d1a              CMP      r5,#0x1a              ;366
000048  d106              BNE      |L17.88|
                  |L17.74|
00004a  4632              MOV      r2,r6                 ;368
00004c  a135              ADR      r1,|L17.292|
00004e  4638              MOV      r0,r7                 ;368
000050  f7fffffe          BL       __2sprintf
000054  4605              MOV      r5,r0                 ;368
000056  e054              B        |L17.258|
                  |L17.88|
000058  2000              MOVS     r0,#0                 ;372
00005a  e7df              B        |L17.28|
                  |L17.92|
00005c  2c02              CMP      r4,#2                 ;375
00005e  d106              BNE      |L17.110|
000060  4632              MOV      r2,r6                 ;377
000062  a137              ADR      r1,|L17.320|
000064  4638              MOV      r0,r7                 ;377
000066  f7fffffe          BL       __2sprintf
00006a  4605              MOV      r5,r0                 ;377
00006c  e049              B        |L17.258|
                  |L17.110|
00006e  2c03              CMP      r4,#3                 ;379
000070  d106              BNE      |L17.128|
000072  4632              MOV      r2,r6                 ;381
000074  a139              ADR      r1,|L17.348|
000076  4638              MOV      r0,r7                 ;381
000078  f7fffffe          BL       __2sprintf
00007c  4605              MOV      r5,r0                 ;381
00007e  e040              B        |L17.258|
                  |L17.128|
000080  2c04              CMP      r4,#4                 ;383
000082  d106              BNE      |L17.146|
000084  4632              MOV      r2,r6                 ;385
000086  a13c              ADR      r1,|L17.376|
000088  4638              MOV      r0,r7                 ;385
00008a  f7fffffe          BL       __2sprintf
00008e  4605              MOV      r5,r0                 ;385
000090  e037              B        |L17.258|
                  |L17.146|
000092  2c05              CMP      r4,#5                 ;387
000094  d106              BNE      |L17.164|
000096  4632              MOV      r2,r6                 ;389
000098  a13e              ADR      r1,|L17.404|
00009a  4638              MOV      r0,r7                 ;389
00009c  f7fffffe          BL       __2sprintf
0000a0  4605              MOV      r5,r0                 ;389
0000a2  e02e              B        |L17.258|
                  |L17.164|
0000a4  2c06              CMP      r4,#6                 ;391
0000a6  d106              BNE      |L17.182|
0000a8  4632              MOV      r2,r6                 ;393
0000aa  a133              ADR      r1,|L17.376|
0000ac  4638              MOV      r0,r7                 ;393
0000ae  f7fffffe          BL       __2sprintf
0000b2  4605              MOV      r5,r0                 ;393
0000b4  e025              B        |L17.258|
                  |L17.182|
0000b6  2c07              CMP      r4,#7                 ;395
0000b8  d106              BNE      |L17.200|
0000ba  4632              MOV      r2,r6                 ;397
0000bc  a135              ADR      r1,|L17.404|
0000be  4638              MOV      r0,r7                 ;397
0000c0  f7fffffe          BL       __2sprintf
0000c4  4605              MOV      r5,r0                 ;397
0000c6  e01c              B        |L17.258|
                  |L17.200|
0000c8  2c08              CMP      r4,#8                 ;399
0000ca  d106              BNE      |L17.218|
0000cc  4632              MOV      r2,r6                 ;401
0000ce  a123              ADR      r1,|L17.348|
0000d0  4638              MOV      r0,r7                 ;401
0000d2  f7fffffe          BL       __2sprintf
0000d6  4605              MOV      r5,r0                 ;401
0000d8  e013              B        |L17.258|
                  |L17.218|
0000da  2c09              CMP      r4,#9                 ;403
0000dc  d106              BNE      |L17.236|
0000de  4632              MOV      r2,r6                 ;405
0000e0  a12c              ADR      r1,|L17.404|
0000e2  4638              MOV      r0,r7                 ;405
0000e4  f7fffffe          BL       __2sprintf
0000e8  4605              MOV      r5,r0                 ;405
0000ea  e00a              B        |L17.258|
                  |L17.236|
0000ec  2c0a              CMP      r4,#0xa               ;407
0000ee  d106              BNE      |L17.254|
0000f0  4632              MOV      r2,r6                 ;409
0000f2  a128              ADR      r1,|L17.404|
0000f4  4638              MOV      r0,r7                 ;409
0000f6  f7fffffe          BL       __2sprintf
0000fa  4605              MOV      r5,r0                 ;409
0000fc  e001              B        |L17.258|
                  |L17.254|
0000fe  2000              MOVS     r0,#0                 ;413
000100  e78c              B        |L17.28|
                  |L17.258|
000102  4628              MOV      r0,r5                 ;415
000104  e78a              B        |L17.28|
;;;417    
                          ENDP

000106  0000              DCW      0x0000
                  |L17.264|
000108  41542b57          DCB      "AT+WSKEY=SHARED,WEP-A,%s\r\n",0
00010c  534b4559
000110  3d534841
000114  5245442c
000118  5745502d
00011c  412c2573
000120  0d0a00  
000123  00                DCB      0
                  |L17.292|
000124  41542b57          DCB      "AT+WSKEY=SHARED,WEP-H,%s\r\n",0
000128  534b4559
00012c  3d534841
000130  5245442c
000134  5745502d
000138  482c2573
00013c  0d0a00  
00013f  00                DCB      0
                  |L17.320|
000140  41542b57          DCB      "AT+WSKEY=WPAPSK,TKIP,%s\r\n",0
000144  534b4559
000148  3d575041
00014c  50534b2c
000150  544b4950
000154  2c25730d
000158  0a00    
00015a  00                DCB      0
00015b  00                DCB      0
                  |L17.348|
00015c  41542b57          DCB      "AT+WSKEY=WPA2PSK,TKIP,%s\r\n",0
000160  534b4559
000164  3d575041
000168  3250534b
00016c  2c544b49
000170  502c2573
000174  0d0a00  
000177  00                DCB      0
                  |L17.376|
000178  41542b57          DCB      "AT+WSKEY=WPAPSK,AES,%s\r\n",0
00017c  534b4559
000180  3d575041
000184  50534b2c
000188  4145532c
00018c  25730d0a
000190  00      
000191  00                DCB      0
000192  00                DCB      0
000193  00                DCB      0
                  |L17.404|
000194  41542b57          DCB      "AT+WSKEY=WPA2PSK,AES,%s\r\n",0
000198  534b4559
00019c  3d575041
0001a0  3250534b
0001a4  2c414553
0001a8  2c25730d
0001ac  0a00    
0001ae  00                DCB      0
0001af  00                DCB      0

                          AREA ||i.SetStaticIp||, CODE, READONLY, ALIGN=2

                  SetStaticIp PROC
;;;832    *******************************************************************************/
;;;833    static int SetStaticIp(char* pArgRecvBuf)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;834    {
000004  4683              MOV      r11,r0
;;;835        cJSON   *pJson; 
;;;836        char    iRet,*ipAddress,*netMask,*gataWay,*dns;
;;;837        int     ipType;
;;;838        uint8_t iLength;
;;;839    
;;;840        
;;;841        iRet  = 1; 
000006  2001              MOVS     r0,#1
000008  9000              STR      r0,[sp,#0]
;;;842        pJson = cJSON_Parse(pArgRecvBuf); 
00000a  4658              MOV      r0,r11
00000c  f7fffffe          BL       cJSON_Parse
000010  4605              MOV      r5,r0
;;;843        
;;;844        if(pJson) 
000012  2d00              CMP      r5,#0
000014  d044              BEQ      |L18.160|
;;;845        {
;;;846            ipType = cJSON_GetObjectItem(pJson, "dhcp")->valueint;
000016  a123              ADR      r1,|L18.164|
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       cJSON_GetObjectItem
00001e  f8d0a014          LDR      r10,[r0,#0x14]
;;;847            if(ipType == 0)
000022  f1ba0f00          CMP      r10,#0
000026  d139              BNE      |L18.156|
;;;848            {
;;;849                ipAddress = cJSON_GetObjectItem(pJson, "ip")->valuestring; 
000028  a120              ADR      r1,|L18.172|
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       cJSON_GetObjectItem
000030  6906              LDR      r6,[r0,#0x10]
;;;850                iLength   = strlen(ipAddress);
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       strlen
000038  b2c4              UXTB     r4,r0
;;;851                if(iLength <5)
00003a  2c05              CMP      r4,#5
00003c  da02              BGE      |L18.68|
;;;852                {
;;;853                     return iRet;
00003e  9800              LDR      r0,[sp,#0]
                  |L18.64|
;;;854                }
;;;855                
;;;856                netMask = cJSON_GetObjectItem(pJson, "netmask")->valuestring; 
;;;857                iLength   = strlen(netMask);
;;;858                if(iLength <5)
;;;859                {
;;;860                     return iRet;
;;;861                }
;;;862                
;;;863                gataWay = cJSON_GetObjectItem(pJson, "gateway")->valuestring; 
;;;864                iLength   = strlen(gataWay);
;;;865                if(iLength <5)
;;;866                {
;;;867                     return iRet;
;;;868                }
;;;869                
;;;870                dns = cJSON_GetObjectItem(pJson, "dns")->valuestring; 
;;;871                iLength   = strlen(dns);
;;;872                if(iLength <5)
;;;873                {
;;;874                     return iRet;
;;;875                }
;;;876    
;;;877                iRet = 0;
;;;878    
;;;879            }
;;;880            else
;;;881            {
;;;882               iRet = 0; 
;;;883            }
;;;884        }
;;;885    
;;;886        return iRet;
;;;887    }
000040  e8bd8ff8          POP      {r3-r11,pc}
                  |L18.68|
000044  a11a              ADR      r1,|L18.176|
000046  4628              MOV      r0,r5                 ;856
000048  f7fffffe          BL       cJSON_GetObjectItem
00004c  6907              LDR      r7,[r0,#0x10]         ;856
00004e  4638              MOV      r0,r7                 ;857
000050  f7fffffe          BL       strlen
000054  b2c4              UXTB     r4,r0                 ;857
000056  2c05              CMP      r4,#5                 ;858
000058  da01              BGE      |L18.94|
00005a  9800              LDR      r0,[sp,#0]            ;860
00005c  e7f0              B        |L18.64|
                  |L18.94|
00005e  a116              ADR      r1,|L18.184|
000060  4628              MOV      r0,r5                 ;863
000062  f7fffffe          BL       cJSON_GetObjectItem
000066  f8d08010          LDR      r8,[r0,#0x10]         ;863
00006a  4640              MOV      r0,r8                 ;864
00006c  f7fffffe          BL       strlen
000070  b2c4              UXTB     r4,r0                 ;864
000072  2c05              CMP      r4,#5                 ;865
000074  da01              BGE      |L18.122|
000076  9800              LDR      r0,[sp,#0]            ;867
000078  e7e2              B        |L18.64|
                  |L18.122|
00007a  a111              ADR      r1,|L18.192|
00007c  4628              MOV      r0,r5                 ;870
00007e  f7fffffe          BL       cJSON_GetObjectItem
000082  f8d09010          LDR      r9,[r0,#0x10]         ;870
000086  4648              MOV      r0,r9                 ;871
000088  f7fffffe          BL       strlen
00008c  b2c4              UXTB     r4,r0                 ;871
00008e  2c05              CMP      r4,#5                 ;872
000090  da01              BGE      |L18.150|
000092  9800              LDR      r0,[sp,#0]            ;874
000094  e7d4              B        |L18.64|
                  |L18.150|
000096  2000              MOVS     r0,#0                 ;877
000098  9000              STR      r0,[sp,#0]            ;877
00009a  e001              B        |L18.160|
                  |L18.156|
00009c  2000              MOVS     r0,#0                 ;882
00009e  9000              STR      r0,[sp,#0]            ;882
                  |L18.160|
0000a0  9800              LDR      r0,[sp,#0]            ;886
0000a2  e7cd              B        |L18.64|
;;;888    
                          ENDP

                  |L18.164|
0000a4  64686370          DCB      "dhcp",0
0000a8  00      
0000a9  00                DCB      0
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L18.172|
0000ac  697000            DCB      "ip",0
0000af  00                DCB      0
                  |L18.176|
0000b0  6e65746d          DCB      "netmask",0
0000b4  61736b00
                  |L18.184|
0000b8  67617465          DCB      "gateway",0
0000bc  77617900
                  |L18.192|
0000c0  646e7300          DCB      "dns",0

                          AREA ||i.SetWifiMode||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_return_value
                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  SetWifiMode PROC
;;;236    
;;;237    int SetWifiMode(char *pBufData)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;238    {
000004  b0af              SUB      sp,sp,#0xbc
000006  4683              MOV      r11,r0
;;;239    	cJSON   *json;
;;;240    	int     mode,security;
;;;241    	int     iLength, iAck;
;;;242    	char    *ssid, *password, AtCmdArr[100+1]={0}, iRet;
000008  2168              MOVS     r1,#0x68
00000a  a815              ADD      r0,sp,#0x54
00000c  f7fffffe          BL       __aeabi_memclr4
;;;243    	char    AtAckMsg[AT_ACK_MSG_LENGTH+1];
;;;244    	
;;;245    	iRet = 1; 
000010  2001              MOVS     r0,#1
000012  9014              STR      r0,[sp,#0x50]
;;;246    	//u_printf("Set Wifi Mode:%s\r\n\r\n", pBufData);
;;;247    	json = cJSON_Parse(pBufData);
000014  4658              MOV      r0,r11
000016  f7fffffe          BL       cJSON_Parse
00001a  4680              MOV      r8,r0
;;;248    	if (json) 
00001c  f1b80f00          CMP      r8,#0
000020  d077              BEQ      |L19.274|
;;;249    	{
;;;250    		mode     = cJSON_GetObjectItem(json,"mode")->valueint;
000022  a158              ADR      r1,|L19.388|
000024  4640              MOV      r0,r8
000026  f7fffffe          BL       cJSON_GetObjectItem
00002a  f8d09014          LDR      r9,[r0,#0x14]
;;;251    		ssid     = cJSON_GetObjectItem(json,"ssid")->valuestring;
00002e  a157              ADR      r1,|L19.396|
000030  4640              MOV      r0,r8
000032  f7fffffe          BL       cJSON_GetObjectItem
000036  f8d0a010          LDR      r10,[r0,#0x10]
;;;252    		security = cJSON_GetObjectItem(json,"security")->valueint;
00003a  a156              ADR      r1,|L19.404|
00003c  4640              MOV      r0,r8
00003e  f7fffffe          BL       cJSON_GetObjectItem
000042  6947              LDR      r7,[r0,#0x14]
;;;253    
;;;254            memset(AtCmdArr, '\0', 101);
000044  2168              MOVS     r1,#0x68
000046  a815              ADD      r0,sp,#0x54
000048  f7fffffe          BL       __aeabi_memclr4
;;;255            if(0x00 == mode)
00004c  f1b90f00          CMP      r9,#0
000050  d149              BNE      |L19.230|
;;;256            {
;;;257                if(SECURITY_NONE == security) 
000052  b92f              CBNZ     r7,|L19.96|
;;;258                { 
;;;259    		        iLength  = sprintf(AtCmdArr, "AT+WAKEY=OPEN,NONE\r\n"); 
000054  a152              ADR      r1,|L19.416|
000056  a815              ADD      r0,sp,#0x54
000058  f7fffffe          BL       __2sprintf
00005c  4605              MOV      r5,r0
00005e  e012              B        |L19.134|
                  |L19.96|
;;;260                } 
;;;261                else 
;;;262                { 
;;;263    		        password = cJSON_GetObjectItem(json, "password")->valuestring; 
000060  a155              ADR      r1,|L19.440|
000062  4640              MOV      r0,r8
000064  f7fffffe          BL       cJSON_GetObjectItem
000068  6906              LDR      r6,[r0,#0x10]
;;;264    		        if(strlen(password)<8)
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       strlen
000070  2808              CMP      r0,#8
000072  d202              BCS      |L19.122|
;;;265    		        {
;;;266                        iRet = 1;
000074  2001              MOVS     r0,#1
000076  9014              STR      r0,[sp,#0x50]
;;;267                        goto SetWifiModeExit;
000078  e07f              B        |L19.378|
                  |L19.122|
;;;268    		        }
;;;269    		        iLength  = sprintf(AtCmdArr, "AT+WAKEY=WPA2PSK,AES,%s\r\n", password); 
00007a  4632              MOV      r2,r6
00007c  a151              ADR      r1,|L19.452|
00007e  a815              ADD      r0,sp,#0x54
000080  f7fffffe          BL       __2sprintf
000084  4605              MOV      r5,r0
                  |L19.134|
;;;270                }
;;;271                iAck    = hfat_send_cmd(AtCmdArr, iLength, AtAckMsg, AT_ACK_MSG_LENGTH);
000086  2348              MOVS     r3,#0x48
000088  aa01              ADD      r2,sp,#4
00008a  4629              MOV      r1,r5
00008c  a815              ADD      r0,sp,#0x54
00008e  f7fffffe          BL       hfat_send_cmd
000092  4604              MOV      r4,r0
;;;272                if(HF_SUCCESS != iAck)
000094  b114              CBZ      r4,|L19.156|
;;;273                {
;;;274                    iRet = 1;
000096  2001              MOVS     r0,#1
000098  9014              STR      r0,[sp,#0x50]
;;;275                    goto SetWifiModeExit;
00009a  e06e              B        |L19.378|
                  |L19.156|
;;;276                }
;;;277                memset(AtCmdArr, '\0', iLength);
00009c  4629              MOV      r1,r5
00009e  a815              ADD      r0,sp,#0x54
0000a0  f7fffffe          BL       __aeabi_memclr4
;;;278    		    iLength = sprintf(AtCmdArr, "AT+WAP=%s\r\n", ssid); 
0000a4  4652              MOV      r2,r10
0000a6  a14e              ADR      r1,|L19.480|
0000a8  a815              ADD      r0,sp,#0x54
0000aa  f7fffffe          BL       __2sprintf
0000ae  4605              MOV      r5,r0
;;;279                iAck    = hfat_send_cmd(AtCmdArr, iLength, AtAckMsg, AT_ACK_MSG_LENGTH);
0000b0  2348              MOVS     r3,#0x48
0000b2  aa01              ADD      r2,sp,#4
0000b4  4629              MOV      r1,r5
0000b6  a815              ADD      r0,sp,#0x54
0000b8  f7fffffe          BL       hfat_send_cmd
0000bc  4604              MOV      r4,r0
;;;280                if(HF_SUCCESS != iAck)
0000be  b114              CBZ      r4,|L19.198|
;;;281                {
;;;282                    iRet = 1;
0000c0  2001              MOVS     r0,#1
0000c2  9014              STR      r0,[sp,#0x50]
;;;283                    goto SetWifiModeExit;
0000c4  e059              B        |L19.378|
                  |L19.198|
;;;284                }
;;;285                memset(AtCmdArr, '\0', iLength);
0000c6  4629              MOV      r1,r5
0000c8  a815              ADD      r0,sp,#0x54
0000ca  f7fffffe          BL       __aeabi_memclr4
;;;286                iAck    = hfat_send_cmd("AT+WMODE=AP\r\n", sizeof("AT+WMODE=AP\r\n")-1, AtAckMsg, AT_ACK_MSG_LENGTH);
0000ce  2348              MOVS     r3,#0x48
0000d0  aa01              ADD      r2,sp,#4
0000d2  210d              MOVS     r1,#0xd
0000d4  a045              ADR      r0,|L19.492|
0000d6  f7fffffe          BL       hfat_send_cmd
0000da  4604              MOV      r4,r0
;;;287                if(HF_SUCCESS != iAck)
0000dc  2c00              CMP      r4,#0
0000de  d044              BEQ      |L19.362|
;;;288                {
;;;289                    iRet = 1;
0000e0  2001              MOVS     r0,#1
0000e2  9014              STR      r0,[sp,#0x50]
;;;290                    goto SetWifiModeExit;
0000e4  e049              B        |L19.378|
                  |L19.230|
;;;291                }
;;;292            }
;;;293            else 
;;;294            {
;;;295                if(0x00 == security) 
0000e6  b92f              CBNZ     r7,|L19.244|
;;;296                { 
;;;297    		        iLength  = sprintf(AtCmdArr, "AT+WSKEY=OPEN,NONE\r\n"); 
0000e8  a144              ADR      r1,|L19.508|
0000ea  a815              ADD      r0,sp,#0x54
0000ec  f7fffffe          BL       __2sprintf
0000f0  4605              MOV      r5,r0
0000f2  e00f              B        |L19.276|
                  |L19.244|
;;;298                } 
;;;299                else 
;;;300                { 
;;;301    		        password = cJSON_GetObjectItem(json, "password")->valuestring; 
0000f4  a130              ADR      r1,|L19.440|
0000f6  4640              MOV      r0,r8
0000f8  f7fffffe          BL       cJSON_GetObjectItem
0000fc  6906              LDR      r6,[r0,#0x10]
;;;302    		        iLength  = SetClientKey(security, password, AtCmdArr);
0000fe  aa15              ADD      r2,sp,#0x54
000100  4631              MOV      r1,r6
000102  4638              MOV      r0,r7
000104  f7fffffe          BL       SetClientKey
000108  4605              MOV      r5,r0
;;;303    		        if(0x00 == iLength)
00010a  b91d              CBNZ     r5,|L19.276|
;;;304    		        {
;;;305                        iRet = 1;
00010c  2001              MOVS     r0,#1
00010e  9014              STR      r0,[sp,#0x50]
;;;306                        goto SetWifiModeExit;
000110  e033              B        |L19.378|
                  |L19.274|
000112  e031              B        |L19.376|
                  |L19.276|
;;;307    		        }
;;;308                } 
;;;309                iAck    = hfat_send_cmd(AtCmdArr, iLength, AtAckMsg, AT_ACK_MSG_LENGTH);
000114  2348              MOVS     r3,#0x48
000116  aa01              ADD      r2,sp,#4
000118  4629              MOV      r1,r5
00011a  a815              ADD      r0,sp,#0x54
00011c  f7fffffe          BL       hfat_send_cmd
000120  4604              MOV      r4,r0
;;;310                if(HF_SUCCESS != iAck)
000122  b114              CBZ      r4,|L19.298|
;;;311                {
;;;312                    iRet = 1;
000124  2001              MOVS     r0,#1
000126  9014              STR      r0,[sp,#0x50]
;;;313                    goto SetWifiModeExit;
000128  e027              B        |L19.378|
                  |L19.298|
;;;314                }
;;;315                memset(AtCmdArr, '\0', iLength);
00012a  4629              MOV      r1,r5
00012c  a815              ADD      r0,sp,#0x54
00012e  f7fffffe          BL       __aeabi_memclr4
;;;316                // 
;;;317                iAck    = hfat_send_cmd("AT+WMODE=STA\r\n", sizeof("AT+WMODE=STA\r\n")-1, AtAckMsg, AT_ACK_MSG_LENGTH);
000132  2348              MOVS     r3,#0x48
000134  aa01              ADD      r2,sp,#4
000136  210e              MOVS     r1,#0xe
000138  a036              ADR      r0,|L19.532|
00013a  f7fffffe          BL       hfat_send_cmd
00013e  4604              MOV      r4,r0
;;;318                if(HF_SUCCESS != iAck)
000140  b114              CBZ      r4,|L19.328|
;;;319                {
;;;320                    iRet = 1;
000142  2001              MOVS     r0,#1
000144  9014              STR      r0,[sp,#0x50]
;;;321                    goto SetWifiModeExit;
000146  e018              B        |L19.378|
                  |L19.328|
;;;322                }
;;;323    		    iLength = sprintf(AtCmdArr, "AT+WSSSID=%s\r\n", ssid); 
000148  4652              MOV      r2,r10
00014a  a136              ADR      r1,|L19.548|
00014c  a815              ADD      r0,sp,#0x54
00014e  f7fffffe          BL       __2sprintf
000152  4605              MOV      r5,r0
;;;324                iAck    = hfat_send_cmd(AtCmdArr, iLength, AtAckMsg, AT_ACK_MSG_LENGTH);
000154  2348              MOVS     r3,#0x48
000156  aa01              ADD      r2,sp,#4
000158  4629              MOV      r1,r5
00015a  a815              ADD      r0,sp,#0x54
00015c  f7fffffe          BL       hfat_send_cmd
000160  4604              MOV      r4,r0
;;;325                if(HF_SUCCESS != iAck)
000162  b114              CBZ      r4,|L19.362|
;;;326                {
;;;327                    iRet = 1;
000164  2001              MOVS     r0,#1
000166  9014              STR      r0,[sp,#0x50]
;;;328                    goto SetWifiModeExit;
000168  e007              B        |L19.378|
                  |L19.362|
;;;329                }
;;;330            }
;;;331    		cJSON_Delete(json);
00016a  4640              MOV      r0,r8
00016c  f7fffffe          BL       cJSON_Delete
;;;332            iRet = 0;
000170  2000              MOVS     r0,#0
000172  9014              STR      r0,[sp,#0x50]
;;;333                    
;;;334            Reboot(0);
000174  f7fffffe          BL       Reboot
                  |L19.376|
;;;335    	}
;;;336      SetWifiModeExit:
000178  bf00              NOP      
                  |L19.378|
;;;337    	return iRet;
00017a  9814              LDR      r0,[sp,#0x50]
;;;338    }
00017c  b02f              ADD      sp,sp,#0xbc
00017e  e8bd8ff0          POP      {r4-r11,pc}
;;;339    
                          ENDP

000182  0000              DCW      0x0000
                  |L19.388|
000184  6d6f6465          DCB      "mode",0
000188  00      
000189  00                DCB      0
00018a  00                DCB      0
00018b  00                DCB      0
                  |L19.396|
00018c  73736964          DCB      "ssid",0
000190  00      
000191  00                DCB      0
000192  00                DCB      0
000193  00                DCB      0
                  |L19.404|
000194  73656375          DCB      "security",0
000198  72697479
00019c  00      
00019d  00                DCB      0
00019e  00                DCB      0
00019f  00                DCB      0
                  |L19.416|
0001a0  41542b57          DCB      "AT+WAKEY=OPEN,NONE\r\n",0
0001a4  414b4559
0001a8  3d4f5045
0001ac  4e2c4e4f
0001b0  4e450d0a
0001b4  00      
0001b5  00                DCB      0
0001b6  00                DCB      0
0001b7  00                DCB      0
                  |L19.440|
0001b8  70617373          DCB      "password",0
0001bc  776f7264
0001c0  00      
0001c1  00                DCB      0
0001c2  00                DCB      0
0001c3  00                DCB      0
                  |L19.452|
0001c4  41542b57          DCB      "AT+WAKEY=WPA2PSK,AES,%s\r\n",0
0001c8  414b4559
0001cc  3d575041
0001d0  3250534b
0001d4  2c414553
0001d8  2c25730d
0001dc  0a00    
0001de  00                DCB      0
0001df  00                DCB      0
                  |L19.480|
0001e0  41542b57          DCB      "AT+WAP=%s\r\n",0
0001e4  41503d25
0001e8  730d0a00
                  |L19.492|
0001ec  41542b57          DCB      "AT+WMODE=AP\r\n",0
0001f0  4d4f4445
0001f4  3d41500d
0001f8  0a00    
0001fa  00                DCB      0
0001fb  00                DCB      0
                  |L19.508|
0001fc  41542b57          DCB      "AT+WSKEY=OPEN,NONE\r\n",0
000200  534b4559
000204  3d4f5045
000208  4e2c4e4f
00020c  4e450d0a
000210  00      
000211  00                DCB      0
000212  00                DCB      0
000213  00                DCB      0
                  |L19.532|
000214  41542b57          DCB      "AT+WMODE=STA\r\n",0
000218  4d4f4445
00021c  3d535441
000220  0d0a00  
000223  00                DCB      0
                  |L19.548|
000224  41542b57          DCB      "AT+WSSSID=%s\r\n",0
000228  53535349
00022c  443d2573
000230  0d0a00  
000233  00                DCB      0

                          AREA ||i.hfhttpd_url_callback||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  hfhttpd_url_callback PROC
;;;142    *******************************************************************************/ 
;;;143    extern int hfhttpd_url_callback(char* pDataBuf, char* pAckContent)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;144    { 
000004  b085              SUB      sp,sp,#0x14
000006  460f              MOV      r7,r1
;;;145        int     cmd, iRet, iLength, iLenOffSet;
;;;146        char    *pDataFiled, *pCmdStart, *pTmp, *pAckTmp;
;;;147        char    iServerArrCount, i; 
;;;148        char    TempArr[4+1]  = {0};
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
00000c  9001              STR      r0,[sp,#4]
;;;149        // 
;;;150    	iRet = -1; 
00000e  1e40              SUBS     r0,r0,#1
000010  9004              STR      r0,[sp,#0x10]
;;;151        
;;;152        pCmdStart       = pDataBuf;
000012  f8dda014          LDR      r10,[sp,#0x14]
;;;153        pCmdStart       = strstr(pCmdStart, "cmd=");
000016  a132              ADR      r1,|L20.224|
000018  4650              MOV      r0,r10
00001a  f7fffffe          BL       strstr
00001e  4682              MOV      r10,r0
;;;154        if(NULL == pCmdStart)
000020  f1ba0f00          CMP      r10,#0
000024  d103              BNE      |L20.46|
;;;155        {
;;;156            return iRet;
000026  9804              LDR      r0,[sp,#0x10]
                  |L20.40|
;;;157        }
;;;158        DecodeUrl(pDataBuf);
;;;159        
;;;160        #if defined(__HTTP_SET_DBG__) && defined(__UDP_PRINT_DBG__) 
;;;161        UdpDebugPrint("HttpRecv:\r\n", sizeof("HttpRecv:\r\n")-1);
;;;162        UdpDebugPrint(pDataBuf, strlen(pDataBuf));
;;;163        UdpDebugPrint("\r\n", sizeof("\r\n")-1);
;;;164        #endif 
;;;165        
;;;166        //u_printf("\r\nHttp Recv:%s\r\n", pDataBuf );
;;;167        
;;;168        pCmdStart      += (sizeof("cmd=")-1);
;;;169        cmd             = atoi(pCmdStart);
;;;170        iServerArrCount = Dim(HttpdServerArr);
;;;171        for(i=0; i<iServerArrCount; i++)
;;;172        {
;;;173            if(cmd == HttpdServerArr[i].iCmdField)
;;;174            {
;;;175                if(NULL != HttpdServerArr[i].pfHttpServerObj)
;;;176                {
;;;177                    if((3 != cmd) && (2 != cmd))
;;;178                    {
;;;179                        pDataFiled = strstr(pCmdStart, "json=");
;;;180                        if(pDataFiled)
;;;181                        {
;;;182                            pDataFiled += (sizeof("json=")-1);
;;;183                        }
;;;184                        else
;;;185                        {
;;;186                            iRet = 0;
;;;187                            break;
;;;188                        }
;;;189                    } 
;;;190                    #if  1 
;;;191                    pTmp    = HttpPacketHead; 
;;;192                    
;;;193                    iLenOffSet = sizeof("HTTP/1.1 200 OK\r\nContent-Length:0000\r\nContent-Type:text/plain\r\n\r\n") - 1; 
;;;194    	            memcpy(HttpPacketHead, "HTTP/1.1 200 OK\r\nContent-Length:0000\r\nContent-Type:text/plain\r\n\r\n",iLenOffSet); 
;;;195    	            
;;;196                    // 准备载荷数据空间起始地址 
;;;197                    pAckTmp = pAckContent + iLenOffSet; 
;;;198                //函数指针数组的入口地址，参数由http下发解码所得
;;;199                    iLength = HttpdServerArr[i].pfHttpServerObj(HttpdServerArr[i].iCmdField, pDataFiled, pAckTmp); 
;;;200                    *(pAckTmp+iLength) = '\0'; 
;;;201                    
;;;202                    pTmp   += sizeof ("HTTP/1.1 200 OK\r\nContent-Length:") - 1; 
;;;203                    sprintf(TempArr, "%04d", iLength); 
;;;204                    memcpy(pTmp, TempArr, 4); 
;;;205                    
;;;206                    memcpy(pAckContent, HttpPacketHead, iLenOffSet); 
;;;207                    #else 
;;;208                    HttpdServerArr[i].pfHttpServerObj(HttpdServerArr[i].iCmdField, pDataFiled, pAckContent);
;;;209                    #endif 
;;;210                }
;;;211                iRet = 0;
;;;212                break;
;;;213            }
;;;214        }
;;;215        return iRet;
;;;216    }
000028  b007              ADD      sp,sp,#0x1c
00002a  e8bd8ff0          POP      {r4-r11,pc}
                  |L20.46|
00002e  9805              LDR      r0,[sp,#0x14]         ;158
000030  f7fffffe          BL       DecodeUrl
000034  f10a0a04          ADD      r10,r10,#4            ;168
000038  4650              MOV      r0,r10                ;169
00003a  f7fffffe          BL       atoi
00003e  4605              MOV      r5,r0                 ;169
000040  200d              MOVS     r0,#0xd               ;170
000042  9002              STR      r0,[sp,#8]            ;170
000044  2400              MOVS     r4,#0                 ;171
000046  e045              B        |L20.212|
                  |L20.72|
000048  4827              LDR      r0,|L20.232|
00004a  f9300034          LDRSH    r0,[r0,r4,LSL #3]     ;173
00004e  42a8              CMP      r0,r5                 ;173
000050  d13e              BNE      |L20.208|
000052  4825              LDR      r0,|L20.232|
000054  eb0000c4          ADD      r0,r0,r4,LSL #3       ;175
000058  6840              LDR      r0,[r0,#4]            ;175
00005a  2800              CMP      r0,#0                 ;175
00005c  d035              BEQ      |L20.202|
00005e  2d03              CMP      r5,#3                 ;177
000060  d00c              BEQ      |L20.124|
000062  2d02              CMP      r5,#2                 ;177
000064  d00a              BEQ      |L20.124|
000066  a121              ADR      r1,|L20.236|
000068  4650              MOV      r0,r10                ;179
00006a  f7fffffe          BL       strstr
00006e  4606              MOV      r6,r0                 ;179
000070  b10e              CBZ      r6,|L20.118|
000072  1d76              ADDS     r6,r6,#5              ;182
000074  e002              B        |L20.124|
                  |L20.118|
000076  2000              MOVS     r0,#0                 ;186
000078  9004              STR      r0,[sp,#0x10]         ;186
00007a  e02e              B        |L20.218|
                  |L20.124|
00007c  481d              LDR      r0,|L20.244|
00007e  9003              STR      r0,[sp,#0xc]          ;191
000080  f04f0941          MOV      r9,#0x41              ;193
000084  464a              MOV      r2,r9                 ;194
000086  491c              LDR      r1,|L20.248|
000088  f7fffffe          BL       __aeabi_memcpy
00008c  eb070b09          ADD      r11,r7,r9             ;197
000090  4915              LDR      r1,|L20.232|
000092  f9310034          LDRSH    r0,[r1,r4,LSL #3]     ;199
000096  eb0101c4          ADD      r1,r1,r4,LSL #3       ;199
00009a  465a              MOV      r2,r11                ;199
00009c  684b              LDR      r3,[r1,#4]            ;199
00009e  4631              MOV      r1,r6                 ;199
0000a0  4798              BLX      r3                    ;199
0000a2  4680              MOV      r8,r0                 ;199
0000a4  2000              MOVS     r0,#0                 ;200
0000a6  f80b0008          STRB     r0,[r11,r8]           ;200
0000aa  9803              LDR      r0,[sp,#0xc]          ;202
0000ac  3020              ADDS     r0,r0,#0x20           ;202
0000ae  9003              STR      r0,[sp,#0xc]          ;202
0000b0  4642              MOV      r2,r8                 ;203
0000b2  a112              ADR      r1,|L20.252|
0000b4  4668              MOV      r0,sp                 ;203
0000b6  f7fffffe          BL       __2sprintf
0000ba  9900              LDR      r1,[sp,#0]            ;204
0000bc  9803              LDR      r0,[sp,#0xc]          ;204
0000be  6001              STR      r1,[r0,#0]            ;204
0000c0  464a              MOV      r2,r9                 ;206
0000c2  490c              LDR      r1,|L20.244|
0000c4  4638              MOV      r0,r7                 ;206
0000c6  f7fffffe          BL       __aeabi_memcpy
                  |L20.202|
0000ca  2000              MOVS     r0,#0                 ;211
0000cc  9004              STR      r0,[sp,#0x10]         ;211
0000ce  e004              B        |L20.218|
                  |L20.208|
0000d0  1c60              ADDS     r0,r4,#1              ;171
0000d2  b2c4              UXTB     r4,r0                 ;171
                  |L20.212|
0000d4  9802              LDR      r0,[sp,#8]            ;171
0000d6  4284              CMP      r4,r0                 ;171
0000d8  dbb6              BLT      |L20.72|
                  |L20.218|
0000da  bf00              NOP                            ;187
0000dc  9804              LDR      r0,[sp,#0x10]         ;215
0000de  e7a3              B        |L20.40|
;;;217    
                          ENDP

                  |L20.224|
0000e0  636d643d          DCB      "cmd=",0
0000e4  00      
0000e5  00                DCB      0
0000e6  00                DCB      0
0000e7  00                DCB      0
                  |L20.232|
                          DCD      HttpdServerArr
                  |L20.236|
0000ec  6a736f6e          DCB      "json=",0
0000f0  3d00    
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L20.244|
                          DCD      HttpPacketHead
                  |L20.248|
                          DCD      ||.constdata||+0x68
                  |L20.252|
0000fc  25303464          DCB      "%04d",0
000100  00      
000101  00                DCB      0
000102  00                DCB      0
000103  00                DCB      0

                          AREA ||i.hfwifi_scan_callback||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  hfwifi_scan_callback PROC
;;;450    #define     ENCRYPT_TKIP_AES    0x04 
;;;451    int hfwifi_scan_callback(PWIFI_SCAN_RESULT_ITEM scan_ret)
000000  b570              PUSH     {r4-r6,lr}
;;;452    {
000002  b0a8              SUB      sp,sp,#0xa0
000004  4604              MOV      r4,r0
;;;453    	int iLength, iAuthEnc;
;;;454    	char    TmpBuf[150] = {0}; 
000006  2198              MOVS     r1,#0x98
000008  a802              ADD      r0,sp,#8
00000a  f7fffffe          BL       __aeabi_memclr4
;;;455    	
;;;456    	#if  0 
;;;457    	int i;
;;;458    	u_printf("%s,", scan_ret->ssid);
;;;459    	u_printf("%d,", scan_ret->auth);
;;;460    	u_printf("%d,", scan_ret->encry);
;;;461    	u_printf("%d,", scan_ret->channel);
;;;462    	u_printf("%d,", scan_ret->rssi);
;;;463    	for(i=0; i<6; i++)
;;;464    	{
;;;465    		u_printf("%X", ((uint8_t*)scan_ret->mac)[i]);
;;;466    	}
;;;467    	u_printf("\n");
;;;468    	#endif 
;;;469    	
;;;470    	if((AUTH_OPEN == scan_ret->auth) && (ENCRYPT_NONE == scan_ret->encry))
00000e  7820              LDRB     r0,[r4,#0]
000010  b918              CBNZ     r0,|L21.26|
000012  7860              LDRB     r0,[r4,#1]
000014  b908              CBNZ     r0,|L21.26|
;;;471    	{
;;;472    	    iAuthEnc = SECURITY_NONE;
000016  2500              MOVS     r5,#0
000018  e052              B        |L21.192|
                  |L21.26|
;;;473    	}
;;;474    	else if((AUTH_SHARE_KEY == scan_ret->auth) && (ENCRYPT_WEP == scan_ret->encry))
00001a  7820              LDRB     r0,[r4,#0]
00001c  2801              CMP      r0,#1
00001e  d104              BNE      |L21.42|
000020  7860              LDRB     r0,[r4,#1]
000022  2801              CMP      r0,#1
000024  d101              BNE      |L21.42|
;;;475    	{
;;;476    	    iAuthEnc = SECURITY_WEP;
000026  2501              MOVS     r5,#1
000028  e04a              B        |L21.192|
                  |L21.42|
;;;477    	}
;;;478    	else if((AUTH_WPA == scan_ret->auth) && (ENCRYPT_TKIP == scan_ret->encry))
00002a  7820              LDRB     r0,[r4,#0]
00002c  2802              CMP      r0,#2
00002e  d104              BNE      |L21.58|
000030  7860              LDRB     r0,[r4,#1]
000032  2802              CMP      r0,#2
000034  d101              BNE      |L21.58|
;;;479    	{
;;;480    	    iAuthEnc = SECURITY_WPA_TKIP;
000036  2502              MOVS     r5,#2
000038  e042              B        |L21.192|
                  |L21.58|
;;;481    	}
;;;482    	else if((AUTH_WPA2 == scan_ret->auth) && (ENCRYPT_TKIP == scan_ret->encry))
00003a  7820              LDRB     r0,[r4,#0]
00003c  2803              CMP      r0,#3
00003e  d104              BNE      |L21.74|
000040  7860              LDRB     r0,[r4,#1]
000042  2802              CMP      r0,#2
000044  d101              BNE      |L21.74|
;;;483    	{
;;;484    	    iAuthEnc = SECURITY_WPA2_TKIP;
000046  2503              MOVS     r5,#3
000048  e03a              B        |L21.192|
                  |L21.74|
;;;485    	}
;;;486    	else if((AUTH_WPA == scan_ret->auth) && (ENCRYPT_AES == scan_ret->encry))
00004a  7820              LDRB     r0,[r4,#0]
00004c  2802              CMP      r0,#2
00004e  d104              BNE      |L21.90|
000050  7860              LDRB     r0,[r4,#1]
000052  2803              CMP      r0,#3
000054  d101              BNE      |L21.90|
;;;487    	{
;;;488    	    iAuthEnc = SECURITY_WPA_AES;
000056  2504              MOVS     r5,#4
000058  e032              B        |L21.192|
                  |L21.90|
;;;489    	}
;;;490    	else if((AUTH_WPA2 == scan_ret->auth) && (ENCRYPT_AES == scan_ret->encry))
00005a  7820              LDRB     r0,[r4,#0]
00005c  2803              CMP      r0,#3
00005e  d104              BNE      |L21.106|
000060  7860              LDRB     r0,[r4,#1]
000062  2803              CMP      r0,#3
000064  d101              BNE      |L21.106|
;;;491    	{
;;;492    	    iAuthEnc = SECURITY_WPA2_AES;
000066  2505              MOVS     r5,#5
000068  e02a              B        |L21.192|
                  |L21.106|
;;;493    	}
;;;494    	else if((AUTH_WPA == scan_ret->auth) && (ENCRYPT_TKIP_AES == scan_ret->encry))
00006a  7820              LDRB     r0,[r4,#0]
00006c  2802              CMP      r0,#2
00006e  d104              BNE      |L21.122|
000070  7860              LDRB     r0,[r4,#1]
000072  2804              CMP      r0,#4
000074  d101              BNE      |L21.122|
;;;495    	{
;;;496    	    iAuthEnc = SECURITY_WPA_TKIP_AES;
000076  2506              MOVS     r5,#6
000078  e022              B        |L21.192|
                  |L21.122|
;;;497    	}
;;;498    	else if((AUTH_WPA2 == scan_ret->auth) && (ENCRYPT_TKIP_AES == scan_ret->encry))
00007a  7820              LDRB     r0,[r4,#0]
00007c  2803              CMP      r0,#3
00007e  d104              BNE      |L21.138|
000080  7860              LDRB     r0,[r4,#1]
000082  2804              CMP      r0,#4
000084  d101              BNE      |L21.138|
;;;499    	{
;;;500    	    iAuthEnc = SECURITY_WPA2_TKIP_AES;
000086  2507              MOVS     r5,#7
000088  e01a              B        |L21.192|
                  |L21.138|
;;;501    	}
;;;502    	else if((AUTH_WPA_WPA2 == scan_ret->auth) && (ENCRYPT_TKIP == scan_ret->encry))
00008a  7820              LDRB     r0,[r4,#0]
00008c  2804              CMP      r0,#4
00008e  d104              BNE      |L21.154|
000090  7860              LDRB     r0,[r4,#1]
000092  2802              CMP      r0,#2
000094  d101              BNE      |L21.154|
;;;503    	{
;;;504    	    iAuthEnc = SECURITY_WPA_WPA2_TKIP;
000096  2508              MOVS     r5,#8
000098  e012              B        |L21.192|
                  |L21.154|
;;;505    	}
;;;506    	else if((AUTH_WPA_WPA2 == scan_ret->auth) && (ENCRYPT_AES == scan_ret->encry))
00009a  7820              LDRB     r0,[r4,#0]
00009c  2804              CMP      r0,#4
00009e  d104              BNE      |L21.170|
0000a0  7860              LDRB     r0,[r4,#1]
0000a2  2803              CMP      r0,#3
0000a4  d101              BNE      |L21.170|
;;;507    	{
;;;508    	    iAuthEnc = SECURITY_WPA_WPA2_AES;
0000a6  2509              MOVS     r5,#9
0000a8  e00a              B        |L21.192|
                  |L21.170|
;;;509    	}
;;;510    	else if((AUTH_WPA_WPA2 == scan_ret->auth) && (ENCRYPT_TKIP_AES == scan_ret->encry))
0000aa  7820              LDRB     r0,[r4,#0]
0000ac  2804              CMP      r0,#4
0000ae  d104              BNE      |L21.186|
0000b0  7860              LDRB     r0,[r4,#1]
0000b2  2804              CMP      r0,#4
0000b4  d101              BNE      |L21.186|
;;;511    	{
;;;512    	    iAuthEnc = SECURITY_WPA_WPA2_TKIP_AES;
0000b6  250a              MOVS     r5,#0xa
0000b8  e002              B        |L21.192|
                  |L21.186|
;;;513    	}
;;;514    	else
;;;515    	{
;;;516    	    return 0;
0000ba  2000              MOVS     r0,#0
                  |L21.188|
;;;517    	}
;;;518    
;;;519     
;;;520    	iLength = sprintf(TmpBuf,      "{\"ssid\":\"%s\","
;;;521                                       "\"range\":\"%d\","
;;;522                                       "\"security\":\"%d\"},", 
;;;523                                       scan_ret->ssid, 
;;;524                                       scan_ret->rssi,
;;;525                                       iAuthEnc
;;;526                                       );
;;;527        if(iLength>iLengthHttpAckBuf) 
;;;528        { 
;;;529            return 0;                   // 大于剩余Buf，则不装 
;;;530        } 
;;;531    	memcpy(pHttpAckBuf, TmpBuf, iLength); 
;;;532    	iLengthHttpAckBuf -= iLength; 
;;;533        pHttpAckBuf += iLength;
;;;534    	return 0;
;;;535    }
0000bc  b028              ADD      sp,sp,#0xa0
0000be  bd70              POP      {r4-r6,pc}
                  |L21.192|
0000c0  9500              STR      r5,[sp,#0]            ;520
0000c2  78e3              LDRB     r3,[r4,#3]            ;520
0000c4  1d22              ADDS     r2,r4,#4              ;520
0000c6  a10e              ADR      r1,|L21.256|
0000c8  a802              ADD      r0,sp,#8              ;520
0000ca  f7fffffe          BL       __2sprintf
0000ce  4606              MOV      r6,r0                 ;520
0000d0  4816              LDR      r0,|L21.300|
0000d2  6800              LDR      r0,[r0,#0]            ;527  ; iLengthHttpAckBuf
0000d4  4286              CMP      r6,r0                 ;527
0000d6  dd01              BLE      |L21.220|
0000d8  2000              MOVS     r0,#0                 ;529
0000da  e7ef              B        |L21.188|
                  |L21.220|
0000dc  4632              MOV      r2,r6                 ;531
0000de  a902              ADD      r1,sp,#8              ;531
0000e0  4813              LDR      r0,|L21.304|
0000e2  6800              LDR      r0,[r0,#0]            ;531  ; pHttpAckBuf
0000e4  f7fffffe          BL       __aeabi_memcpy
0000e8  4810              LDR      r0,|L21.300|
0000ea  6800              LDR      r0,[r0,#0]            ;532  ; iLengthHttpAckBuf
0000ec  1b80              SUBS     r0,r0,r6              ;532
0000ee  490f              LDR      r1,|L21.300|
0000f0  6008              STR      r0,[r1,#0]            ;532  ; iLengthHttpAckBuf
0000f2  480f              LDR      r0,|L21.304|
0000f4  6800              LDR      r0,[r0,#0]            ;533  ; pHttpAckBuf
0000f6  4430              ADD      r0,r0,r6              ;533
0000f8  490d              LDR      r1,|L21.304|
0000fa  6008              STR      r0,[r1,#0]            ;533  ; pHttpAckBuf
0000fc  2000              MOVS     r0,#0                 ;534
0000fe  e7dd              B        |L21.188|
;;;536    
                          ENDP

                  |L21.256|
000100  7b227373          DCB      "{""ssid"":""%s"",""range"":""%d"",""security"":""%d""},"
000104  6964223a
000108  22257322
00010c  2c227261
000110  6e676522
000114  3a222564
000118  222c2273
00011c  65637572
000120  69747922
000124  3a222564
000128  227d2c  
00012b  00                DCB      0
                  |L21.300|
                          DCD      iLengthHttpAckBuf
                  |L21.304|
                          DCD      pHttpAckBuf

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  HttpPacketHead
                          %        67

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  HttpdServerArr
000000  0001              DCW      0x0001
000002  0000              DCB      0x00,0x00
                          DCD      HttpSetWifiMode
000008  0002              DCW      0x0002
00000a  0000              DCB      0x00,0x00
                          DCD      HttpScanNearbyWifiSignal
000010  0003              DCW      0x0003
000012  0000              DCB      0x00,0x00
                          DCD      HttpGetDevWifiState
000018  0005              DCW      0x0005
00001a  0000              DCB      0x00,0x00
                          DCD      HttpGetDevRegIDState
000020  0078              DCW      0x0078
000022  0000              DCB      0x00,0x00
                          DCD      HttpRestartMachine
000028  0079              DCW      0x0079
00002a  0000              DCB      0x00,0x00
                          DCD      HttpSetStaticIp
000030  007a              DCW      0x007a
000032  0000              DCB      0x00,0x00
                          DCD      HttpModifyProductSn
000038  007d              DCW      0x007d
00003a  0000              DCB      0x00,0x00
                          DCD      HttpCalibratePowerConsume
000040  00c8              DCW      0x00c8
000042  0000              DCB      0x00,0x00
                          DCD      HttpSwitch_OnOffCtl
000048  01f6              DCW      0x01f6
00004a  0000              DCB      0x00,0x00
                          DCD      HttpGetDevTime
000050  01ff              DCW      0x01ff
000052  0000              DCB      0x00,0x00
                          DCD      HttpGetRealTimeConsumePower
000058  0202              DCW      0x0202
00005a  0000              DCB      0x00,0x00
                          DCD      HttpGetRule
000060  0203              DCW      0x0203
000062  0000              DCB      0x00,0x00
                          DCD      HttpGetDevCountDown
000068  48545450          DCB      0x48,0x54,0x54,0x50
00006c  2f312e31          DCB      0x2f,0x31,0x2e,0x31
000070  20323030          DCB      0x20,0x32,0x30,0x30
000074  204f4b0d          DCB      0x20,0x4f,0x4b,0x0d
000078  0a436f6e          DCB      0x0a,0x43,0x6f,0x6e
00007c  74656e74          DCB      0x74,0x65,0x6e,0x74
000080  2d4c656e          DCB      0x2d,0x4c,0x65,0x6e
000084  6774683a          DCB      0x67,0x74,0x68,0x3a
000088  30303030          DCB      0x30,0x30,0x30,0x30
00008c  0d0a436f          DCB      0x0d,0x0a,0x43,0x6f
000090  6e74656e          DCB      0x6e,0x74,0x65,0x6e
000094  742d5479          DCB      0x74,0x2d,0x54,0x79
000098  70653a74          DCB      0x70,0x65,0x3a,0x74
00009c  6578742f          DCB      0x65,0x78,0x74,0x2f
0000a0  706c6169          DCB      0x70,0x6c,0x61,0x69
0000a4  6e0d0a0d          DCB      0x6e,0x0d,0x0a,0x0d
0000a8  0a000000          DCB      0x0a,0x00,0x00,0x00
0000ac  7b227265          DCB      0x7b,0x22,0x72,0x65
0000b0  73706f6e          DCB      0x73,0x70,0x6f,0x6e
0000b4  7365223a          DCB      0x73,0x65,0x22,0x3a
0000b8  25642c22          DCB      0x25,0x64,0x2c,0x22
0000bc  636f6465          DCB      0x63,0x6f,0x64,0x65
0000c0  223a2564          DCB      0x22,0x3a,0x25,0x64
0000c4  2c227a6f          DCB      0x2c,0x22,0x7a,0x6f
0000c8  6e65223a          DCB      0x6e,0x65,0x22,0x3a
0000cc  25642c22          DCB      0x25,0x64,0x2c,0x22
0000d0  6e6f7754          DCB      0x6e,0x6f,0x77,0x54
0000d4  696d6553          DCB      0x69,0x6d,0x65,0x53
0000d8  6563223a          DCB      0x65,0x63,0x22,0x3a
0000dc  25642c22          DCB      0x25,0x64,0x2c,0x22
0000e0  64617461          DCB      0x64,0x61,0x74,0x61
0000e4  223a7b22          DCB      0x22,0x3a,0x7b,0x22
0000e8  74696d65          DCB      0x74,0x69,0x6d,0x65
0000ec  223a2225          DCB      0x22,0x3a,0x22,0x25
0000f0  642d2530          DCB      0x64,0x2d,0x25,0x30
0000f4  32642d25          DCB      0x32,0x64,0x2d,0x25
0000f8  3032642c          DCB      0x30,0x32,0x64,0x2c
0000fc  25303264          DCB      0x25,0x30,0x32,0x64
000100  3a253032          DCB      0x3a,0x25,0x30,0x32
000104  643a2530          DCB      0x64,0x3a,0x25,0x30
000108  3264222c          DCB      0x32,0x64,0x22,0x2c
00010c  22736572          DCB      0x22,0x73,0x65,0x72
000110  76657222          DCB      0x76,0x65,0x72,0x22
000114  3a222573          DCB      0x3a,0x22,0x25,0x73
000118  227d7d00          DCB      0x22,0x7d,0x7d,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  MacChgFlag
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  pHttpAckBuf
                          DCD      0x00000000
                  iLengthHttpAckBuf
                          DCD      0x00000000
