; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\udpservercallback.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\udpservercallback.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=494 -I../sdk/1.50/include/ -I../inc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -D__KEIL_MDK__ -D__LPB100__ --enum_is_int --omf_browse=.\output\udpservercallback.crf ..\src\UdpServerCallBack.c]
                          THUMB

                          AREA ||i.ReportUdpBroadcast||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                  ReportUdpBroadcast PROC
;;;288    //extern char    regidName[NAME_LENGTH];             //手机发送的用户账号名
;;;289    static uint8_t ReportUdpBroadcast(char *pData)
000000  b5f0              PUSH     {r4-r7,lr}
;;;290    {     
000002  b091              SUB      sp,sp,#0x44
000004  4605              MOV      r5,r0
;;;291        char      *pAck; 
;;;292        int       iLength;
;;;293    	static    uint8_t savePhoneIp = 0;			//是否保存手机端IP和端口号
;;;294        
;;;295        //u_printf("broadCast data is:%s\n",pData);
;;;296        //UdpDebugPrint("UDP broadcast date is :\n",sizeof("UDP broadcast date is :\n"));
;;;297        //UdpDebugPrint(pData, strlen(pData));
;;;298        
;;;299        
;;;300        // 增加识别SW=ALL与SW=ID; 
;;;301        if((0==memcmp(pData,"dv=",3)) || (0==memcmp(pData,"sw=",3)))
000006  2203              MOVS     r2,#3
000008  a13b              ADR      r1,|L1.248|
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       memcmp
000010  b130              CBZ      r0,|L1.32|
000012  2203              MOVS     r2,#3
000014  a139              ADR      r1,|L1.252|
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       memcmp
00001c  2800              CMP      r0,#0
00001e  d168              BNE      |L1.242|
                  |L1.32|
;;;302        { 
;;;303    		if(!savePhoneIp)
000020  4837              LDR      r0,|L1.256|
000022  7800              LDRB     r0,[r0,#0]  ; savePhoneIp
000024  b958              CBNZ     r0,|L1.62|
;;;304    		{
;;;305    			savePhoneIp = 1;
000026  2001              MOVS     r0,#1
000028  4935              LDR      r1,|L1.256|
00002a  7008              STRB     r0,[r1,#0]
;;;306    			memset((char*)&PhoneSockAddr,0,sizeof(PhoneSockAddr));
00002c  4835              LDR      r0,|L1.260|
00002e  2100              MOVS     r1,#0
000030  6001              STR      r1,[r0,#0]  ; PhoneSockAddr
000032  6041              STR      r1,[r0,#4]  ; PhoneSockAddr
000034  6081              STR      r1,[r0,#8]  ; PhoneSockAddr
000036  60c1              STR      r1,[r0,#0xc]  ; PhoneSockAddr
;;;307    			memcpy((char*)&PhoneSockAddr, (char*)&RecvAddr, sizeof(PhoneSockAddr));
000038  4f33              LDR      r7,|L1.264|
00003a  cf8e              LDM      r7,{r1-r3,r7}
00003c  c08e              STM      r0!,{r1-r3,r7}
                  |L1.62|
;;;308    		}
;;;309    		
;;;310            pData += 3; 
00003e  1ced              ADDS     r5,r5,#3
;;;311            if(0 == memcmp(pData, "all", 3)) 
000040  2203              MOVS     r2,#3
000042  a132              ADR      r1,|L1.268|
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       memcmp
00004a  b920              CBNZ     r0,|L1.86|
;;;312            { 
;;;313                pData += sizeof("all,")-1;
00004c  1d2d              ADDS     r5,r5,#4
;;;314                SetCurTime(pData);
00004e  4628              MOV      r0,r5
000050  f7fffffe          BL       SetCurTime
;;;315                goto respond_broadcast;
000054  e007              B        |L1.102|
                  |L1.86|
;;;316            } 
;;;317            else if(0 == memcmp(pData, (char const *)DevInfoObj.dev_sn, SERIAL_NUN_ID_LEN)) 
000056  2210              MOVS     r2,#0x10
000058  492d              LDR      r1,|L1.272|
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       memcmp
000060  2800              CMP      r0,#0
000062  d146              BNE      |L1.242|
;;;318            { 
;;;319              respond_broadcast:
000064  bf00              NOP      
                  |L1.102|
;;;320                pAck    = UdpAckMsg;  
000066  4e2b              LDR      r6,|L1.276|
;;;321    
;;;322              
;;;323                iLength = sprintf(pAck, "{\"response\":%X,\"data\":{"
000068  482b              LDR      r0,|L1.280|
00006a  6840              LDR      r0,[r0,#4]  ; CurFwVersionObj
00006c  492a              LDR      r1,|L1.280|
00006e  6809              LDR      r1,[r1,#0]  ; CurFwVersionObj
000070  4a2a              LDR      r2,|L1.284|
000072  6ad2              LDR      r2,[r2,#0x2c]  ; DevTimeObj
000074  4b2a              LDR      r3,|L1.288|
000076  885b              LDRH     r3,[r3,#2]  ; MainSvrSockAddr
000078  e9cd320c          STRD     r3,r2,[sp,#0x30]
00007c  e9cd100e          STRD     r1,r0,[sp,#0x38]
000080  4827              LDR      r0,|L1.288|
000082  6840              LDR      r0,[r0,#4]  ; MainSvrSockAddr
000084  4927              LDR      r1,|L1.292|
000086  7949              LDRB     r1,[r1,#5]  ; FwUpdateStatusObj
000088  4a27              LDR      r2,|L1.296|
00008a  7812              LDRB     r2,[r2,#0]  ; isGetRegid
00008c  4b27              LDR      r3,|L1.300|
00008e  e9cd3208          STRD     r3,r2,[sp,#0x20]
000092  e9cd100a          STRD     r1,r0,[sp,#0x28]
000096  481e              LDR      r0,|L1.272|
000098  3011              ADDS     r0,r0,#0x11
00009a  f1a00118          SUB      r1,r0,#0x18
00009e  7949              LDRB     r1,[r1,#5]  ; DevInfoObj
0000a0  f1a00218          SUB      r2,r0,#0x18
0000a4  7912              LDRB     r2,[r2,#4]  ; DevInfoObj
0000a6  f1a00318          SUB      r3,r0,#0x18
0000aa  78db              LDRB     r3,[r3,#3]  ; DevInfoObj
0000ac  e9cd3204          STRD     r3,r2,[sp,#0x10]
0000b0  e9cd1006          STRD     r1,r0,[sp,#0x18]
0000b4  3818              SUBS     r0,r0,#0x18
0000b6  7881              LDRB     r1,[r0,#2]  ; DevInfoObj
0000b8  7840              LDRB     r0,[r0,#1]  ; DevInfoObj
0000ba  4a15              LDR      r2,|L1.272|
0000bc  1fd2              SUBS     r2,r2,#7
0000be  7812              LDRB     r2,[r2,#0]  ; DevInfoObj
0000c0  4b13              LDR      r3,|L1.272|
0000c2  331e              ADDS     r3,r3,#0x1e
0000c4  e9cd3200          STRD     r3,r2,[sp,#0]
0000c8  e9cd0102          STRD     r0,r1,[sp,#8]
0000cc  3b1e              SUBS     r3,r3,#0x1e
0000ce  2200              MOVS     r2,#0
0000d0  4917              LDR      r1,|L1.304|
0000d2  4630              MOV      r0,r6
0000d4  f7fffffe          BL       __2sprintf
0000d8  4604              MOV      r4,r0
;;;324                                        "\"sn\":\"%s\","
;;;325                                        "\"name\":\"%s\","
;;;326                                        "\"mac\":\"%02X:%02X:%02X:%02X:%02X:%02X\","
;;;327                                        "\"sak\":\"%s\","
;;;328                                        "\"regid\":\"%s\","
;;;329                                        "\"isGetRegid\":%d,"
;;;330                                        "\"isMainSvrOK\":%d,"
;;;331                                        "\"MainSveIP\":\"%08X\","
;;;332                                        "\"MainSvrPort\":\"%x\","
;;;333                                        "\"time\":%d,"
;;;334                                        "\"ver\":\"%d.%02d\"}}",
;;;335                                        DEV_QUERY_BROADCAST_DOWN_00_CMD, 
;;;336                                        DevInfoObj.dev_sn, 
;;;337                                        DevInfoObj.dev_name,
;;;338                                        DevInfoObj.Dev_Mac[0], DevInfoObj.Dev_Mac[1],
;;;339                                        DevInfoObj.Dev_Mac[2], DevInfoObj.Dev_Mac[3],
;;;340                                        DevInfoObj.Dev_Mac[4], DevInfoObj.Dev_Mac[5],
;;;341                                        DevInfoObj.dev_sak,
;;;342                                        DevRegInformation.regidName,            				 //手机发送的用户账号名,
;;;343                                        isGetRegid,FwUpdateStatusObj.isMainSvrOK,
;;;344    	                      			MainSvrSockAddr.sin_addr.s_addr,
;;;345    	                      			MainSvrSockAddr.sin_port,
;;;346    	                      			DevTimeObj.NowTimeSec,
;;;347                                        CurFwVersionObj.big_ver, 
;;;348                                        CurFwVersionObj.little_ver
;;;349                                        );  
;;;350                if(-1 == iLength)
0000da  f1b43fff          CMP      r4,#0xffffffff
0000de  d102              BNE      |L1.230|
;;;351                { 
;;;352                    return 0;
0000e0  2000              MOVS     r0,#0
                  |L1.226|
;;;353                } 
;;;354                *(pAck + iLength) = '\0';
;;;355    
;;;356    			SendUdpData(pAck, iLength); 
;;;357    			
;;;358            } 
;;;359        }
;;;360        return 0;
;;;361    }
0000e2  b011              ADD      sp,sp,#0x44
0000e4  bdf0              POP      {r4-r7,pc}
                  |L1.230|
0000e6  2000              MOVS     r0,#0                 ;354
0000e8  5530              STRB     r0,[r6,r4]            ;354
0000ea  4621              MOV      r1,r4                 ;356
0000ec  4630              MOV      r0,r6                 ;356
0000ee  f7fffffe          BL       SendUdpData
                  |L1.242|
0000f2  2000              MOVS     r0,#0                 ;360
0000f4  e7f5              B        |L1.226|
;;;362    
                          ENDP

0000f6  0000              DCW      0x0000
                  |L1.248|
0000f8  64763d00          DCB      "dv=",0
                  |L1.252|
0000fc  73773d00          DCB      "sw=",0
                  |L1.256|
                          DCD      savePhoneIp
                  |L1.260|
                          DCD      PhoneSockAddr
                  |L1.264|
                          DCD      RecvAddr
                  |L1.268|
00010c  616c6c00          DCB      "all",0
                  |L1.272|
                          DCD      DevInfoObj+0x7
                  |L1.276|
                          DCD      UdpAckMsg
                  |L1.280|
                          DCD      CurFwVersionObj
                  |L1.284|
                          DCD      DevTimeObj
                  |L1.288|
                          DCD      MainSvrSockAddr
                  |L1.292|
                          DCD      FwUpdateStatusObj
                  |L1.296|
                          DCD      isGetRegid
                  |L1.300|
                          DCD      DevRegInformation
                  |L1.304|
                          DCD      ||.constdata||+0x70

                          AREA ||i.SaveUpdateFw||, CODE, READONLY, ALIGN=2

                  SaveUpdateFw PROC
;;;406    *******************************************************************************/
;;;407    static char SaveUpdateFw(char *pBufData, int ArgLength, uint32_t iNumPackage)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;408    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4692              MOV      r10,r2
;;;409        int      i;
;;;410        char     CheckSum,iAck;
;;;411        int16_t  TmpChk;
;;;412        
;;;413        iAck     = 1; 
00000a  f04f0901          MOV      r9,#1
;;;414        TmpChk   = 0; 
00000e  2700              MOVS     r7,#0
;;;415        CheckSum = 0;
000010  46b8              MOV      r8,r7
;;;416        for(i=0; i<ArgLength; i++) 
000012  2600              MOVS     r6,#0
000014  e007              B        |L2.38|
                  |L2.22|
;;;417        {
;;;418            TmpChk   += *(pBufData+i);
000016  5da0              LDRB     r0,[r4,r6]
000018  4438              ADD      r0,r0,r7
00001a  b207              SXTH     r7,r0
;;;419            CheckSum += *(pBufData+i);
00001c  5da0              LDRB     r0,[r4,r6]
00001e  4440              ADD      r0,r0,r8
000020  f00008ff          AND      r8,r0,#0xff
000024  1c76              ADDS     r6,r6,#1              ;416
                  |L2.38|
000026  42ae              CMP      r6,r5                 ;416
000028  dbf5              BLT      |L2.22|
;;;420        }
;;;421        CheckSum = (char)TmpChk;
00002a  f00708ff          AND      r8,r7,#0xff
;;;422    	
;;;423        //u_printf("save chk=%d,file_check=%d, len:%d\r\n", CheckSum, *(pBufData+ArgLength), ArgLength);
;;;424    
;;;425        if(CheckSum == *(pBufData+ArgLength))
00002e  5d60              LDRB     r0,[r4,r5]
000030  4540              CMP      r0,r8
000032  d117              BNE      |L2.100|
;;;426        { 
;;;427            hfupdate_write_file(HFUPDATE_SW, FwUpdateObj.intFwLength, pBufData, ArgLength); 
000034  480d              LDR      r0,|L2.108|
000036  462b              MOV      r3,r5
000038  4622              MOV      r2,r4
00003a  f8d01114          LDR      r1,[r0,#0x114]  ; FwUpdateObj
00003e  2000              MOVS     r0,#0
000040  f7fffffe          BL       hfupdate_write_file
;;;428        	FwUpdateObj.CheckSumWhole += TmpChk; 
000044  4809              LDR      r0,|L2.108|
000046  f8b0011a          LDRH     r0,[r0,#0x11a]  ; FwUpdateObj
00004a  4438              ADD      r0,r0,r7
00004c  b200              SXTH     r0,r0
00004e  4907              LDR      r1,|L2.108|
000050  f8a1011a          STRH     r0,[r1,#0x11a]
;;;429            FwUpdateObj.intFwLength   += ArgLength; 
000054  4608              MOV      r0,r1
000056  f8d00114          LDR      r0,[r0,#0x114]  ; FwUpdateObj
00005a  4428              ADD      r0,r0,r5
00005c  f8c10114          STR      r0,[r1,#0x114]  ; FwUpdateObj
;;;430            iAck      = 0; 
000060  f04f0900          MOV      r9,#0
                  |L2.100|
;;;431    
;;;432    	#if 0
;;;433    		u_printf("Package[%d]: check passed!\n",iNumPackage);
;;;434    		if(iNumPackage%10 == 0)
;;;435    		{
;;;436    			u_printf("\r\n");
;;;437    		}
;;;438    	#endif
;;;439        }
;;;440    	//else
;;;441    	{
;;;442    		//u_printf("Package[%d]: check errored!\n",iNumPackage);
;;;443    	}
;;;444        return iAck;
000064  4648              MOV      r0,r9
;;;445    }
000066  e8bd87f0          POP      {r4-r10,pc}
;;;446    
                          ENDP

00006a  0000              DCW      0x0000
                  |L2.108|
                          DCD      FwUpdateObj

                          AREA ||i.SendDataToServer||, CODE, READONLY, ALIGN=1

                  SendDataToServer PROC
;;;224    *******************************************************************************/ 
;;;225    extern void SendDataToServer(int fd, struct sockaddr* TargetSockAddr, char *pArgBuf, int ArgLength)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;226    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;227        sendto(fd, pArgBuf, ArgLength, 0, TargetSockAddr, sizeof(struct sockaddr)); 
00000c  2010              MOVS     r0,#0x10
00000e  2300              MOVS     r3,#0
000010  4632              MOV      r2,r6
000012  4629              MOV      r1,r5
000014  e9cd4000          STRD     r4,r0,[sp,#0]
000018  4638              MOV      r0,r7
00001a  f7fffffe          BL       lwip_sendto
;;;228    }
00001e  e8bd81fc          POP      {r2-r8,pc}
;;;229    /*******************************************************************************
                          ENDP


                          AREA ||i.SendUdpData||, CODE, READONLY, ALIGN=1

                  SendUdpData PROC
;;;237    *******************************************************************************/
;;;238    extern void SendUdpData(char* pData, int DataLen)
000000  b570              PUSH     {r4-r6,lr}
;;;239    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;240        #if  defined(__BSD_SOCKET_UDP_SERVER_ENABLE__)       
;;;241            UdpServer_SendData(pData, DataLen);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       UdpServer_SendData
;;;242        #else 
;;;243            hfnet_socketa_send(pData, DataLen, 3);
;;;244        #endif 
;;;245    }
00000e  bd70              POP      {r4-r6,pc}
;;;246    
                          ENDP


                          AREA ||i.UDPSetWifiMode||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  UDPSetWifiMode PROC
;;;558    *******************************************************************************/
;;;559    static uint8_t UDPSetWifiMode(char* pArgRecvBuf) 
000000  b570              PUSH     {r4-r6,lr}
;;;560    {
000002  b09a              SUB      sp,sp,#0x68
000004  4604              MOV      r4,r0
;;;561        uint8_t iAck = 0;
000006  2500              MOVS     r5,#0
;;;562    	int     iLength;
;;;563    	char    AckMsgArray[100]={0}; 
000008  2164              MOVS     r1,#0x64
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       __aeabi_memclr4
;;;564    	
;;;565        iAck = SetWifiMode(pArgRecvBuf);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       SetWifiMode
000016  b2c5              UXTB     r5,r0
;;;566        iLength = sprintf(AckMsgArray,"V3{\"sn\":\"%s\",\"response\":%d,\"code\":%d}", 
000018  20c8              MOVS     r0,#0xc8
00001a  40a8              LSLS     r0,r0,r5
00001c  2349              MOVS     r3,#0x49
00001e  4a07              LDR      r2,|L5.60|
000020  a107              ADR      r1,|L5.64|
000022  9000              STR      r0,[sp,#0]
000024  a801              ADD      r0,sp,#4
000026  f7fffffe          BL       __2sprintf
00002a  4606              MOV      r6,r0
;;;567    											DevInfoObj.dev_sn,
;;;568    										  (SWITCH_GET_DEVICE_REGID_UDP_73_CMD), 
;;;569    										  (200<<iAck)); 
;;;570    
;;;571    	SendUdpData(AckMsgArray, iLength);
00002c  4631              MOV      r1,r6
00002e  a801              ADD      r0,sp,#4
000030  f7fffffe          BL       SendUdpData
;;;572     
;;;573        return 0;
000034  2000              MOVS     r0,#0
;;;574    }
000036  b01a              ADD      sp,sp,#0x68
000038  bd70              POP      {r4-r6,pc}
;;;575    
                          ENDP

00003a  0000              DCW      0x0000
                  |L5.60|
                          DCD      DevInfoObj+0x7
                  |L5.64|
000040  56337b22          DCB      "V3{""sn"":""%s"",""response"":%d,""code"":%d}",0
000044  736e223a
000048  22257322
00004c  2c227265
000050  73706f6e
000054  7365223a
000058  25642c22
00005c  636f6465
000060  223a2564
000064  7d00    
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.UdpCalibratePowerConsume||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  UdpCalibratePowerConsume PROC
;;;792    ***************************************************************************************************/
;;;793    static uint8_t UdpCalibratePowerConsume(char* pArgRecvBuf) 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;794    {
000004  b09a              SUB      sp,sp,#0x68
000006  4607              MOV      r7,r0
;;;795    
;;;796        cJSON *pJson;
;;;797    	char    AckMsgArray[100]={0};
000008  2164              MOVS     r1,#0x64
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       __aeabi_memclr4
;;;798        int    iValue,portID,iRslt = 1;
000010  f04f0801          MOV      r8,#1
;;;799    	int    iLength;
;;;800    
;;;801        pJson = cJSON_Parse(pArgRecvBuf); 
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       cJSON_Parse
00001a  4605              MOV      r5,r0
;;;802        if(pJson) 
00001c  2d00              CMP      r5,#0
00001e  d07d              BEQ      |L6.284|
;;;803        { 
;;;804            portID = cJSON_GetObjectItem(pJson, "port")->valueint; 
000020  a14d              ADR      r1,|L6.344|
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       cJSON_GetObjectItem
000028  6944              LDR      r4,[r0,#0x14]
;;;805            portID = portID > PORT_NUM ? PORT_NUM : portID;
00002a  2c06              CMP      r4,#6
00002c  dd01              BLE      |L6.50|
00002e  2006              MOVS     r0,#6
000030  e000              B        |L6.52|
                  |L6.50|
000032  4620              MOV      r0,r4
                  |L6.52|
000034  4604              MOV      r4,r0
;;;806    
;;;807           #if(PORT_NUM == 6)
;;;808            CalibrateData[0] = portID;        
000036  494a              LDR      r1,|L6.352|
000038  700c              STRB     r4,[r1,#0]
;;;809            PowerRecordObj[portID].PowerCoefficent = cJSON_GetObjectItem(pJson, "watt")->valueint; 
00003a  a14a              ADR      r1,|L6.356|
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       cJSON_GetObjectItem
000042  6940              LDR      r0,[r0,#0x14]
000044  ebc401c4          RSB      r1,r4,r4,LSL #3
000048  4a48              LDR      r2,|L6.364|
00004a  eb020181          ADD      r1,r2,r1,LSL #2
00004e  6188              STR      r0,[r1,#0x18]
;;;810    
;;;811            CalibrateData[1] = (PowerRecordObj[portID].PowerCoefficent&0xff000000)>>24;
000050  ebc400c4          RSB      r0,r4,r4,LSL #3
000054  4611              MOV      r1,r2
000056  eb010080          ADD      r0,r1,r0,LSL #2
00005a  6980              LDR      r0,[r0,#0x18]
00005c  0e00              LSRS     r0,r0,#24
00005e  4940              LDR      r1,|L6.352|
000060  7048              STRB     r0,[r1,#1]
;;;812            CalibrateData[2] = (PowerRecordObj[portID].PowerCoefficent&0x00ff0000)>>16;
000062  ebc400c4          RSB      r0,r4,r4,LSL #3
000066  4611              MOV      r1,r2
000068  eb010080          ADD      r0,r1,r0,LSL #2
00006c  6980              LDR      r0,[r0,#0x18]
00006e  0c00              LSRS     r0,r0,#16
000070  493b              LDR      r1,|L6.352|
000072  7088              STRB     r0,[r1,#2]
;;;813            CalibrateData[3] = (PowerRecordObj[portID].PowerCoefficent&0x0000ff00)>>8;
000074  ebc400c4          RSB      r0,r4,r4,LSL #3
000078  4611              MOV      r1,r2
00007a  eb010080          ADD      r0,r1,r0,LSL #2
00007e  8b00              LDRH     r0,[r0,#0x18]
000080  0a00              LSRS     r0,r0,#8
000082  4937              LDR      r1,|L6.352|
000084  70c8              STRB     r0,[r1,#3]
;;;814            CalibrateData[4] = PowerRecordObj[portID].PowerCoefficent&0xff;
000086  ebc400c4          RSB      r0,r4,r4,LSL #3
00008a  4611              MOV      r1,r2
00008c  eb010080          ADD      r0,r1,r0,LSL #2
000090  7e00              LDRB     r0,[r0,#0x18]
000092  4933              LDR      r1,|L6.352|
000094  7108              STRB     r0,[r1,#4]
;;;815            
;;;816            PowerRecordObj[portID].VoltCoefficent = cJSON_GetObjectItem(pJson, "vol")->valueint; 
000096  a136              ADR      r1,|L6.368|
000098  4628              MOV      r0,r5
00009a  f7fffffe          BL       cJSON_GetObjectItem
00009e  6940              LDR      r0,[r0,#0x14]
0000a0  ebc401c4          RSB      r1,r4,r4,LSL #3
0000a4  4a31              LDR      r2,|L6.364|
0000a6  eb020181          ADD      r1,r2,r1,LSL #2
0000aa  6108              STR      r0,[r1,#0x10]
;;;817    
;;;818            CalibrateData[7] = (PowerRecordObj[portID].VoltCoefficent&0xff);
0000ac  ebc400c4          RSB      r0,r4,r4,LSL #3
0000b0  4611              MOV      r1,r2
0000b2  eb010080          ADD      r0,r1,r0,LSL #2
0000b6  7c00              LDRB     r0,[r0,#0x10]
0000b8  4929              LDR      r1,|L6.352|
0000ba  71c8              STRB     r0,[r1,#7]
;;;819            
;;;820            PowerRecordObj[portID].CurrentCoefficent = cJSON_GetObjectItem(pJson, "amp")->valueint; 
0000bc  a12d              ADR      r1,|L6.372|
0000be  4628              MOV      r0,r5
0000c0  f7fffffe          BL       cJSON_GetObjectItem
0000c4  6940              LDR      r0,[r0,#0x14]
0000c6  ebc401c4          RSB      r1,r4,r4,LSL #3
0000ca  4a28              LDR      r2,|L6.364|
0000cc  eb020181          ADD      r1,r2,r1,LSL #2
0000d0  6088              STR      r0,[r1,#8]
;;;821    
;;;822            CalibrateData[5] = (PowerRecordObj[portID].CurrentCoefficent&0xff00)>>8;
0000d2  ebc400c4          RSB      r0,r4,r4,LSL #3
0000d6  4611              MOV      r1,r2
0000d8  eb010080          ADD      r0,r1,r0,LSL #2
0000dc  8900              LDRH     r0,[r0,#8]
0000de  0a00              LSRS     r0,r0,#8
0000e0  491f              LDR      r1,|L6.352|
0000e2  7148              STRB     r0,[r1,#5]
;;;823            CalibrateData[6] = (PowerRecordObj[portID].CurrentCoefficent&0xff);
0000e4  ebc400c4          RSB      r0,r4,r4,LSL #3
0000e8  4611              MOV      r1,r2
0000ea  eb010080          ADD      r0,r1,r0,LSL #2
0000ee  7a00              LDRB     r0,[r0,#8]
0000f0  491b              LDR      r1,|L6.352|
0000f2  7188              STRB     r0,[r1,#6]
;;;824           #elif(PORT_NUM == 1)
;;;825            iValue = cJSON_GetObjectItem(pJson, "watt")->valueint;
;;;826            PowerRecordObj[0].PowerCoefficent   = reco_measure_data.reco_powerp*10 / iValue;
;;;827            iValue = cJSON_GetObjectItem(pJson, "vol")->valueint;
;;;828            PowerRecordObj[0].VoltCoefficent    = reco_measure_data.reco_urms*10 / iValue;
;;;829            iValue = cJSON_GetObjectItem(pJson, "amp")->valueint; 
;;;830            PowerRecordObj[0].CurrentCoefficent = reco_measure_data.reco_irms*10 / iValue;
;;;831           #endif
;;;832    
;;;833            cJSON_Delete(pJson); 
0000f4  4628              MOV      r0,r5
0000f6  f7fffffe          BL       cJSON_Delete
;;;834            
;;;835            SavePowerCoefficent();
0000fa  f7fffffe          BL       SavePowerCoefficent
;;;836            UsartCalibrationPort();
0000fe  f7fffffe          BL       UsartCalibrationPort
;;;837            if(PowerRecordObj[portID].PowerCoefficent && PowerRecordObj[portID].VoltCoefficent && PowerRecordObj[portID].CurrentCoefficent)
000102  ebc400c4          RSB      r0,r4,r4,LSL #3
000106  4919              LDR      r1,|L6.364|
000108  eb010080          ADD      r0,r1,r0,LSL #2
00010c  6980              LDR      r0,[r0,#0x18]
00010e  b128              CBZ      r0,|L6.284|
000110  ebc400c4          RSB      r0,r4,r4,LSL #3
000114  eb010080          ADD      r0,r1,r0,LSL #2
000118  6900              LDR      r0,[r0,#0x10]
00011a  e000              B        |L6.286|
                  |L6.284|
00011c  e008              B        |L6.304|
                  |L6.286|
00011e  b138              CBZ      r0,|L6.304|
000120  ebc400c4          RSB      r0,r4,r4,LSL #3
000124  eb010080          ADD      r0,r1,r0,LSL #2
000128  6880              LDR      r0,[r0,#8]
00012a  b108              CBZ      r0,|L6.304|
;;;838            {
;;;839                iRslt = 0;
00012c  f04f0800          MOV      r8,#0
                  |L6.304|
;;;840            }
;;;841    
;;;842            //u_printf("portID = %d\n",portID);
;;;843         }
;;;844    	 iLength = sprintf(AckMsgArray,"V3{\"sn\":\"%s\",\"response\":%d,\"code\":%d}",		
000130  20c8              MOVS     r0,#0xc8
000132  fa00f008          LSL      r0,r0,r8
000136  234b              MOVS     r3,#0x4b
000138  4a0f              LDR      r2,|L6.376|
00013a  a110              ADR      r1,|L6.380|
00013c  9000              STR      r0,[sp,#0]
00013e  a801              ADD      r0,sp,#4
000140  f7fffffe          BL       __2sprintf
000144  4606              MOV      r6,r0
;;;845    								  DevInfoObj.dev_sn,
;;;846    								  (SWITCH_CALIBRATE_POWER_CONSUME_UDP_75_CMD), 
;;;847    								  (200<<iRslt));
;;;848    
;;;849    	SendUdpData(AckMsgArray, iLength);
000146  4631              MOV      r1,r6
000148  a801              ADD      r0,sp,#4
00014a  f7fffffe          BL       SendUdpData
;;;850    	
;;;851        return 0; 
00014e  2000              MOVS     r0,#0
;;;852    }
000150  b01a              ADD      sp,sp,#0x68
000152  e8bd81f0          POP      {r4-r8,pc}
;;;853    
                          ENDP

000156  0000              DCW      0x0000
                  |L6.344|
000158  706f7274          DCB      "port",0
00015c  00      
00015d  00                DCB      0
00015e  00                DCB      0
00015f  00                DCB      0
                  |L6.352|
                          DCD      CalibrateData
                  |L6.356|
000164  77617474          DCB      "watt",0
000168  00      
000169  00                DCB      0
00016a  00                DCB      0
00016b  00                DCB      0
                  |L6.364|
                          DCD      PowerRecordObj
                  |L6.368|
000170  766f6c00          DCB      "vol",0
                  |L6.372|
000174  616d7000          DCB      "amp",0
                  |L6.376|
                          DCD      DevInfoObj+0x7
                  |L6.380|
00017c  56337b22          DCB      "V3{""sn"":""%s"",""response"":%d,""code"":%d}",0
000180  736e223a
000184  22257322
000188  2c227265
00018c  73706f6e
000190  7365223a
000194  25642c22
000198  636f6465
00019c  223a2564
0001a0  7d00    
0001a2  00                DCB      0
0001a3  00                DCB      0

                          AREA ||i.UdpGetPowerConsume||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UdpGetPowerConsume PROC
;;;727    
;;;728    static uint8_t UdpGetPowerConsume(char* pArgRecvBuf)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;729    {
000004  b0b2              SUB      sp,sp,#0xc8
000006  4681              MOV      r9,r0
;;;730        int     iLength;
;;;731        
;;;732        uint8_t iAck = 0;
000008  f04f0800          MOV      r8,#0
;;;733        uint8_t portID = 0;
00000c  2500              MOVS     r5,#0
;;;734        char *pData,*pTemp;
;;;735    	char  pAckBuf[200]={0};
00000e  21c8              MOVS     r1,#0xc8
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       __aeabi_memclr4
;;;736    
;;;737        pData = pAckBuf;
000016  466f              MOV      r7,sp
;;;738        pTemp = pData;
000018  463c              MOV      r4,r7
;;;739    
;;;740        iLength = sprintf(pTemp,  "V3{\"response\":%d,\"code\":%d,\"data\":{\"watt\":[",SWITCH_GET_POWER_CONSUME_UDP_90_CMD, (200<<iAck));
00001a  20c8              MOVS     r0,#0xc8
00001c  fa00f308          LSL      r3,r0,r8
000020  225a              MOVS     r2,#0x5a
000022  a132              ADR      r1,|L7.236|
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       __2sprintf
00002a  4606              MOV      r6,r0
;;;741        pTemp += iLength;
00002c  4434              ADD      r4,r4,r6
;;;742        for(portID=0;portID<PORT_NUM;portID++)
00002e  bf00              NOP      
000030  e00d              B        |L7.78|
                  |L7.50|
;;;743        {
;;;744            iLength = sprintf(pTemp, "%d,",PowerRecordObj[portID].record_ValidPower); //每个口的功耗
000032  ebc500c5          RSB      r0,r5,r5,LSL #3
000036  4938              LDR      r1,|L7.280|
000038  eb010080          ADD      r0,r1,r0,LSL #2
00003c  a137              ADR      r1,|L7.284|
00003e  6942              LDR      r2,[r0,#0x14]
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       __2sprintf
000046  4606              MOV      r6,r0
;;;745            pTemp  += iLength; 
000048  4434              ADD      r4,r4,r6
00004a  1c68              ADDS     r0,r5,#1              ;742
00004c  b2c5              UXTB     r5,r0                 ;742
                  |L7.78|
00004e  2d06              CMP      r5,#6                 ;742
000050  dbef              BLT      |L7.50|
;;;746        }
;;;747        *(pTemp-1) = ']';
000052  205d              MOVS     r0,#0x5d
000054  f8040c01          STRB     r0,[r4,#-1]
;;;748        
;;;749        iLength = sprintf(pTemp, ",\"amp\":[");
000058  a131              ADR      r1,|L7.288|
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       __2sprintf
000060  4606              MOV      r6,r0
;;;750        pTemp += iLength;
000062  4434              ADD      r4,r4,r6
;;;751        for(portID=0;portID<PORT_NUM;portID++)
000064  2500              MOVS     r5,#0
000066  e00d              B        |L7.132|
                  |L7.104|
;;;752        {
;;;753            iLength = sprintf(pTemp, "%d,", PowerRecordObj[portID].record_ValidCurrent); //每个口的电流
000068  ebc500c5          RSB      r0,r5,r5,LSL #3
00006c  492a              LDR      r1,|L7.280|
00006e  eb010080          ADD      r0,r1,r0,LSL #2
000072  a12a              ADR      r1,|L7.284|
000074  6842              LDR      r2,[r0,#4]
000076  4620              MOV      r0,r4
000078  f7fffffe          BL       __2sprintf
00007c  4606              MOV      r6,r0
;;;754            pTemp  += iLength; 
00007e  4434              ADD      r4,r4,r6
000080  1c68              ADDS     r0,r5,#1              ;751
000082  b2c5              UXTB     r5,r0                 ;751
                  |L7.132|
000084  2d06              CMP      r5,#6                 ;751
000086  dbef              BLT      |L7.104|
;;;755        }
;;;756        *(pTemp-1) = ']';
000088  205d              MOVS     r0,#0x5d
00008a  f8040c01          STRB     r0,[r4,#-1]
;;;757    
;;;758        iLength = sprintf(pTemp, ",\"switch\":[");
00008e  a127              ADR      r1,|L7.300|
000090  4620              MOV      r0,r4
000092  f7fffffe          BL       __2sprintf
000096  4606              MOV      r6,r0
;;;759        pTemp += iLength;
000098  4434              ADD      r4,r4,r6
;;;760        for(portID=0;portID<PORT_NUM;portID++)
00009a  2500              MOVS     r5,#0
00009c  e00d              B        |L7.186|
                  |L7.158|
;;;761        {
;;;762            iLength = sprintf(pTemp, "%d,", SwInformation.PortInfor[portID].OnOffStatus ); //每个口的开关
00009e  eb050185          ADD      r1,r5,r5,LSL #2
0000a2  4825              LDR      r0,|L7.312|
0000a4  eb000081          ADD      r0,r0,r1,LSL #2
0000a8  7c42              LDRB     r2,[r0,#0x11]
0000aa  a11c              ADR      r1,|L7.284|
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       __2sprintf
0000b2  4606              MOV      r6,r0
;;;763            pTemp  += iLength; 
0000b4  4434              ADD      r4,r4,r6
0000b6  1c68              ADDS     r0,r5,#1              ;760
0000b8  b2c5              UXTB     r5,r0                 ;760
                  |L7.186|
0000ba  2d06              CMP      r5,#6                 ;760
0000bc  dbef              BLT      |L7.158|
;;;764        }
;;;765        *(pTemp-1) = ']';
0000be  205d              MOVS     r0,#0x5d
0000c0  f8040c01          STRB     r0,[r4,#-1]
;;;766        *pTemp = '}';
0000c4  207d              MOVS     r0,#0x7d
0000c6  7020              STRB     r0,[r4,#0]
;;;767         pTemp++;
0000c8  1c64              ADDS     r4,r4,#1
;;;768        *pTemp = '}';
0000ca  7020              STRB     r0,[r4,#0]
;;;769        pTemp++;
0000cc  1c64              ADDS     r4,r4,#1
;;;770        *pTemp = '\0';
0000ce  2000              MOVS     r0,#0
0000d0  7020              STRB     r0,[r4,#0]
;;;771    
;;;772        #if defined(__HTTP_SET_DBG__) && defined(__UDP_PRINT_DBG__) 
;;;773            UdpDebugPrint("The RTdata is:\r\n", sizeof("The data is:\r\n")-1);
;;;774            UdpDebugPrint(pAckBuf, pTemp-pData);                                         
;;;775        #endif 
;;;776        //u_printf("The new data = %s,the length is %d\n",pAckBuf,pTemp-pData);
;;;777    
;;;778    	SendUdpData(pAckBuf, strlen(pAckBuf));
0000d2  4668              MOV      r0,sp
0000d4  f7fffffe          BL       strlen
0000d8  4682              MOV      r10,r0
0000da  4651              MOV      r1,r10
0000dc  4668              MOV      r0,sp
0000de  f7fffffe          BL       SendUdpData
;;;779        return 0; 
0000e2  2000              MOVS     r0,#0
;;;780                            
;;;781    }
0000e4  b032              ADD      sp,sp,#0xc8
0000e6  e8bd87f0          POP      {r4-r10,pc}
;;;782    
                          ENDP

0000ea  0000              DCW      0x0000
                  |L7.236|
0000ec  56337b22          DCB      "V3{""response"":%d,""code"":%d,""data"":{""watt"":[",0
0000f0  72657370
0000f4  6f6e7365
0000f8  223a2564
0000fc  2c22636f
000100  6465223a
000104  25642c22
000108  64617461
00010c  223a7b22
000110  77617474
000114  223a5b00
                  |L7.280|
                          DCD      PowerRecordObj
                  |L7.284|
00011c  25642c00          DCB      "%d,",0
                  |L7.288|
000120  2c22616d          DCB      ",""amp"":[",0
000124  70223a5b
000128  00      
000129  00                DCB      0
00012a  00                DCB      0
00012b  00                DCB      0
                  |L7.300|
00012c  2c227377          DCB      ",""switch"":[",0
000130  69746368
000134  223a5b00
                  |L7.312|
                          DCD      SwInformation+0x8

                          AREA ||i.UdpModifyName||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  UdpModifyName PROC
;;;888    *******************************************************************************/ 
;;;889    static uint8_t UdpModifyName(char *pBuf)
000000  b5f0              PUSH     {r4-r7,lr}
;;;890    { 
000002  b09b              SUB      sp,sp,#0x6c
000004  4604              MOV      r4,r0
;;;891        int         iLength; 
;;;892        char        AckMsgArray[100]={0}; 
000006  2164              MOVS     r1,#0x64
000008  a802              ADD      r0,sp,#8
00000a  f7fffffe          BL       __aeabi_memclr4
;;;893        uint8_t     iResult        = 0; 
00000e  2600              MOVS     r6,#0
;;;894        char        *pTempData     = pBuf; 
000010  4627              MOV      r7,r4
;;;895        
;;;896        iResult = ModifyDevName(pTempData);
000012  4638              MOV      r0,r7
000014  f7fffffe          BL       ModifyDevName
000018  4606              MOV      r6,r0
;;;897        iLength = sprintf(AckMsgArray,"V3{\"sn\":\"%s\",\"response\":%d,\"code\":%d}",
00001a  20c8              MOVS     r0,#0xc8
00001c  40b0              LSLS     r0,r0,r6
00001e  2318              MOVS     r3,#0x18
000020  4a06              LDR      r2,|L8.60|
000022  a107              ADR      r1,|L8.64|
000024  9000              STR      r0,[sp,#0]
000026  a802              ADD      r0,sp,#8
000028  f7fffffe          BL       __2sprintf
00002c  4605              MOV      r5,r0
;;;898    									DevInfoObj.dev_sn,
;;;899                                      (SWITCH_RENAME_UDP_18_CMD), 
;;;900                                      (200<<iResult)); 
;;;901    
;;;902        SendUdpData(AckMsgArray, iLength); 
00002e  4629              MOV      r1,r5
000030  a802              ADD      r0,sp,#8
000032  f7fffffe          BL       SendUdpData
;;;903    
;;;904        return 0; 
000036  2000              MOVS     r0,#0
;;;905    } 
000038  b01b              ADD      sp,sp,#0x6c
00003a  bdf0              POP      {r4-r7,pc}
;;;906    
                          ENDP

                  |L8.60|
                          DCD      DevInfoObj+0x7
                  |L8.64|
000040  56337b22          DCB      "V3{""sn"":""%s"",""response"":%d,""code"":%d}",0
000044  736e223a
000048  22257322
00004c  2c227265
000050  73706f6e
000054  7365223a
000058  25642c22
00005c  636f6465
000060  223a2564
000064  7d00    
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.UdpModifyProductSn||, CODE, READONLY, ALIGN=2

                          REQUIRE _scanf_int
                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  UdpModifyProductSn PROC
;;;633    *******************************************************************************/
;;;634    static uint8_t UdpModifyProductSn(char* pArgRecvBuf) 
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;635    {
000004  b0a4              SUB      sp,sp,#0x90
000006  4681              MOV      r9,r0
;;;636        char    iAck = 0, isSaveSakSn;
000008  f04f0a00          MOV      r10,#0
;;;637        char    AckMsgArray[100]={0};
00000c  2164              MOVS     r1,#0x64
00000e  a80b              ADD      r0,sp,#0x2c
000010  f7fffffe          BL       __aeabi_memclr4
;;;638    	cJSON   *json;
;;;639    	char    *pValue;
;;;640    	int     mac[7];
;;;641    	
;;;642        int     i, iLength;
;;;643    
;;;644        //u_printf("Modify sn cmd is:%s\n",pArgRecvBuf);
;;;645        
;;;646    	json = cJSON_Parse(pArgRecvBuf);
000014  4648              MOV      r0,r9
000016  f7fffffe          BL       cJSON_Parse
00001a  4680              MOV      r8,r0
;;;647    	if(json)
00001c  f1b80f00          CMP      r8,#0
000020  d064              BEQ      |L9.236|
;;;648    	{
;;;649    	    isSaveSakSn = 1;
000022  2701              MOVS     r7,#1
;;;650    		pValue = cJSON_GetObjectItem(json,"sn")->valuestring;
000024  a13d              ADR      r1,|L9.284|
000026  4640              MOV      r0,r8
000028  f7fffffe          BL       cJSON_GetObjectItem
00002c  6906              LDR      r6,[r0,#0x10]
;;;651    		if(strcmp(pValue, "null") != 0)
00002e  a13c              ADR      r1,|L9.288|
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       strcmp
000036  b170              CBZ      r0,|L9.86|
;;;652    		{
;;;653                iLength = strlen(pValue);
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       strlen
00003e  4604              MOV      r4,r0
;;;654                i       = HF_SUCCESS+1;
000040  2501              MOVS     r5,#1
;;;655                if(SERIAL_NUN_ID_LEN != iLength)
000042  2c10              CMP      r4,#0x10
000044  d000              BEQ      |L9.72|
;;;656                {
;;;657                    goto ModSnExit;
000046  e04e              B        |L9.230|
                  |L9.72|
;;;658                }
;;;659                i           = HF_SUCCESS;
000048  2500              MOVS     r5,#0
;;;660                isSaveSakSn = 0;
00004a  2700              MOVS     r7,#0
;;;661                memcpy(DevInfoObj.dev_sn, pValue, iLength);
00004c  4622              MOV      r2,r4
00004e  4631              MOV      r1,r6
000050  4835              LDR      r0,|L9.296|
000052  f7fffffe          BL       __aeabi_memcpy
                  |L9.86|
;;;662    		}
;;;663    		// 
;;;664    		pValue = cJSON_GetObjectItem(json,"sak")->valuestring;
000056  a135              ADR      r1,|L9.300|
000058  4640              MOV      r0,r8
00005a  f7fffffe          BL       cJSON_GetObjectItem
00005e  6906              LDR      r6,[r0,#0x10]
;;;665    		if(strcmp(pValue, "null") != 0)
000060  a12f              ADR      r1,|L9.288|
000062  4630              MOV      r0,r6
000064  f7fffffe          BL       strcmp
000068  b178              CBZ      r0,|L9.138|
;;;666    		{ 
;;;667                iLength = strlen(pValue);
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       strlen
000070  4604              MOV      r4,r0
;;;668                i       = HF_SUCCESS+1;
000072  2501              MOVS     r5,#1
;;;669                if(SAK_LEN != iLength)
000074  2c0c              CMP      r4,#0xc
000076  d000              BEQ      |L9.122|
;;;670                {
;;;671                    goto ModSnExit;
000078  e035              B        |L9.230|
                  |L9.122|
;;;672                }
;;;673                i           = HF_SUCCESS;
00007a  2500              MOVS     r5,#0
;;;674                isSaveSakSn = 0;
00007c  2700              MOVS     r7,#0
;;;675                memcpy(DevInfoObj.dev_sak, pValue, iLength);
00007e  4622              MOV      r2,r4
000080  4631              MOV      r1,r6
000082  4829              LDR      r0,|L9.296|
000084  3011              ADDS     r0,r0,#0x11
000086  f7fffffe          BL       __aeabi_memcpy
                  |L9.138|
;;;676    		} 
;;;677    		// 
;;;678            if(0x00 == isSaveSakSn)
00008a  b90f              CBNZ     r7,|L9.144|
;;;679            {
;;;680    
;;;681                WriteDevSakSN();
00008c  f7fffffe          BL       WriteDevSakSN
                  |L9.144|
;;;682    
;;;683            }
;;;684    		// 
;;;685    		pValue = cJSON_GetObjectItem(json,"mac")->valuestring;
000090  a127              ADR      r1,|L9.304|
000092  4640              MOV      r0,r8
000094  f7fffffe          BL       cJSON_GetObjectItem
000098  6906              LDR      r6,[r0,#0x10]
;;;686    		if(strcmp(pValue, "null") != 0)
00009a  a121              ADR      r1,|L9.288|
00009c  4630              MOV      r0,r6
00009e  f7fffffe          BL       strcmp
0000a2  b1f8              CBZ      r0,|L9.228|
;;;687    		{ 
;;;688                i       = HF_SUCCESS+1;
0000a4  2501              MOVS     r5,#1
;;;689    			iLength = sscanf(pValue, "%02X:%02X:%02X:%02X:%02X:%02X",
0000a6  a809              ADD      r0,sp,#0x24
0000a8  a908              ADD      r1,sp,#0x20
0000aa  aa07              ADD      r2,sp,#0x1c
0000ac  ab06              ADD      r3,sp,#0x18
0000ae  e9cd3200          STRD     r3,r2,[sp,#0]
0000b2  e9cd1002          STRD     r1,r0,[sp,#8]
0000b6  ab05              ADD      r3,sp,#0x14
0000b8  aa04              ADD      r2,sp,#0x10
0000ba  a11e              ADR      r1,|L9.308|
0000bc  4630              MOV      r0,r6
0000be  f7fffffe          BL       __0sscanf
0000c2  4604              MOV      r4,r0
;;;690                                        &mac[0], &mac[1],
;;;691                                        &mac[2], &mac[3],
;;;692                                        &mac[4], &mac[5]); 
;;;693                if(iLength)
0000c4  b174              CBZ      r4,|L9.228|
;;;694                { 
;;;695                    for(i=0; i<6; i++)
0000c6  2500              MOVS     r5,#0
0000c8  e006              B        |L9.216|
                  |L9.202|
;;;696                    {
;;;697                        DevInfoObj.Dev_Mac[i] = (uint8_t)mac[i];
0000ca  a804              ADD      r0,sp,#0x10
0000cc  f8100025          LDRB     r0,[r0,r5,LSL #2]
0000d0  4915              LDR      r1,|L9.296|
0000d2  1fc9              SUBS     r1,r1,#7
0000d4  5548              STRB     r0,[r1,r5]
0000d6  1c6d              ADDS     r5,r5,#1              ;695
                  |L9.216|
0000d8  2d06              CMP      r5,#6                 ;695
0000da  dbf6              BLT      |L9.202|
;;;698                    }
;;;699                    i = HF_SUCCESS;
0000dc  2500              MOVS     r5,#0
;;;700                    MacChgFlag = 1;
0000de  2001              MOVS     r0,#1
0000e0  491c              LDR      r1,|L9.340|
0000e2  7008              STRB     r0,[r1,#0]
                  |L9.228|
;;;701                } 
;;;702    		} 
;;;703          ModSnExit:
0000e4  bf00              NOP      
                  |L9.230|
;;;704    		cJSON_Delete(json);
0000e6  4640              MOV      r0,r8
0000e8  f7fffffe          BL       cJSON_Delete
                  |L9.236|
;;;705    	}
;;;706    	
;;;707        iAck = (i==HF_SUCCESS)?(0):(1);
0000ec  b10d              CBZ      r5,|L9.242|
0000ee  2001              MOVS     r0,#1
0000f0  e000              B        |L9.244|
                  |L9.242|
0000f2  2000              MOVS     r0,#0
                  |L9.244|
0000f4  4682              MOV      r10,r0
;;;708        iLength = sprintf(AckMsgArray,"V3{\"sn\":\"%s\",\"response\":%d,\"code\":%d}",		
0000f6  20c8              MOVS     r0,#0xc8
0000f8  fa00f00a          LSL      r0,r0,r10
0000fc  234a              MOVS     r3,#0x4a
0000fe  4a0a              LDR      r2,|L9.296|
000100  a115              ADR      r1,|L9.344|
000102  9000              STR      r0,[sp,#0]
000104  a80b              ADD      r0,sp,#0x2c
000106  f7fffffe          BL       __2sprintf
00010a  4604              MOV      r4,r0
;;;709    								DevInfoObj.dev_sn,
;;;710    								  (SWITCH_SET_DEVICE_MAC_UDP_74_CMD), 
;;;711    								  (200<<iAck));
;;;712    
;;;713    	SendUdpData(AckMsgArray, iLength);
00010c  4621              MOV      r1,r4
00010e  a80b              ADD      r0,sp,#0x2c
000110  f7fffffe          BL       SendUdpData
;;;714    	return 0;
000114  2000              MOVS     r0,#0
;;;715    } 
000116  b024              ADD      sp,sp,#0x90
000118  e8bd87f0          POP      {r4-r10,pc}
;;;716    
                          ENDP

                  |L9.284|
00011c  736e00            DCB      "sn",0
00011f  00                DCB      0
                  |L9.288|
000120  6e756c6c          DCB      "null",0
000124  00      
000125  00                DCB      0
000126  00                DCB      0
000127  00                DCB      0
                  |L9.296|
                          DCD      DevInfoObj+0x7
                  |L9.300|
00012c  73616b00          DCB      "sak",0
                  |L9.304|
000130  6d616300          DCB      "mac",0
                  |L9.308|
000134  25303258          DCB      "%02X:%02X:%02X:%02X:%02X:%02X",0
000138  3a253032
00013c  583a2530
000140  32583a25
000144  3032583a
000148  25303258
00014c  3a253032
000150  5800    
000152  00                DCB      0
000153  00                DCB      0
                  |L9.340|
                          DCD      MacChgFlag
                  |L9.344|
000158  56337b22          DCB      "V3{""sn"":""%s"",""response"":%d,""code"":%d}",0
00015c  736e223a
000160  22257322
000164  2c227265
000168  73706f6e
00016c  7365223a
000170  25642c22
000174  636f6465
000178  223a2564
00017c  7d00    
00017e  00                DCB      0
00017f  00                DCB      0

                          AREA ||i.UdpRelatedControlSwitch||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  UdpRelatedControlSwitch PROC
;;;915    *******************************************************************************/
;;;916    static uint8_t UdpRelatedControlSwitch(char *pBuf) 
000000  b570              PUSH     {r4-r6,lr}
;;;917    {
000002  b09a              SUB      sp,sp,#0x68
000004  4604              MOV      r4,r0
;;;918        int     iLength;
;;;919        char    AckMsgArray[100]={0};
000006  2164              MOVS     r1,#0x64
000008  a801              ADD      r0,sp,#4
00000a  f7fffffe          BL       __aeabi_memclr4
;;;920        uint8_t iRslt = 0;
00000e  2600              MOVS     r6,#0
;;;921        
;;;922    	iRslt   = Switch_RelatedCtl(pBuf);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       Switch_RelatedCtl
000016  4606              MOV      r6,r0
;;;923    	
;;;924        iLength = sprintf(AckMsgArray, "V3{\"sn\":\"%s\",\"response\":%d,\"code\":%d}", 
000018  20c8              MOVS     r0,#0xc8
00001a  40b0              LSLS     r0,r0,r6
00001c  231c              MOVS     r3,#0x1c
00001e  4a07              LDR      r2,|L10.60|
000020  a107              ADR      r1,|L10.64|
000022  9000              STR      r0,[sp,#0]
000024  a801              ADD      r0,sp,#4
000026  f7fffffe          BL       __2sprintf
00002a  4605              MOV      r5,r0
;;;925    									DevInfoObj.dev_sn,
;;;926                                       (SWITCH_RELATED_CONTROL_UDP_28_CMD), 
;;;927                                       (200<<iRslt)); 
;;;928    
;;;929        SendUdpData(AckMsgArray, iLength); 
00002c  4629              MOV      r1,r5
00002e  a801              ADD      r0,sp,#4
000030  f7fffffe          BL       SendUdpData
;;;930    #if 0
;;;931    
;;;932        UdpDebugPrint("Now report OnOff reback\r\n", strlen("Now report OnOff reback\r\n"));
;;;933        UdpDebugPrint(AckMsgArray, iLength);
;;;934    #endif
;;;935        return 0;
000034  2000              MOVS     r0,#0
;;;936    }
000036  b01a              ADD      sp,sp,#0x68
000038  bd70              POP      {r4-r6,pc}
;;;937    
                          ENDP

00003a  0000              DCW      0x0000
                  |L10.60|
                          DCD      DevInfoObj+0x7
                  |L10.64|
000040  56337b22          DCB      "V3{""sn"":""%s"",""response"":%d,""code"":%d}",0
000044  736e223a
000048  22257322
00004c  2c227265
000050  73706f6e
000054  7365223a
000058  25642c22
00005c  636f6465
000060  223a2564
000064  7d00    
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.UdpRestartMachine||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  UdpRestartMachine PROC
;;;373    
;;;374    static uint8_t UdpRestartMachine(char *pData) 
000000  b570              PUSH     {r4-r6,lr}
;;;375    { 
000002  b09e              SUB      sp,sp,#0x78
000004  4605              MOV      r5,r0
;;;376        char    iAck, AckMsgArray[100]={0}; 
000006  2164              MOVS     r1,#0x64
000008  a805              ADD      r0,sp,#0x14
00000a  f7fffffe          BL       __aeabi_memclr4
;;;377        int     iLength,option; 
;;;378        
;;;379        iAck    = RebootSyncDev(pData,&option); 
00000e  a904              ADD      r1,sp,#0x10
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       RebootSyncDev
000016  4606              MOV      r6,r0
;;;380    
;;;381        iLength = sprintf(AckMsgArray, "V3{\"sn\":\"%s\",\"sak\":\"%s\",\"response\":%d,\"op\":%d,\"code\":%d}", 
000018  20c8              MOVS     r0,#0xc8
00001a  40b0              LSLS     r0,r0,r6
00001c  221e              MOVS     r2,#0x1e
00001e  9904              LDR      r1,[sp,#0x10]
000020  4b0c              LDR      r3,|L11.84|
000022  e9cd2100          STRD     r2,r1,[sp,#0]
000026  9002              STR      r0,[sp,#8]
000028  f1a30211          SUB      r2,r3,#0x11
00002c  a10a              ADR      r1,|L11.88|
00002e  a805              ADD      r0,sp,#0x14
000030  f7fffffe          BL       __2sprintf
000034  4604              MOV      r4,r0
;;;382                                        DevInfoObj.dev_sn, 
;;;383                                        DevInfoObj.dev_sak,
;;;384                                       (SWTICH_RESTART_SYN_UDP_1E_CMD), 
;;;385                                        option,
;;;386                                       (200<<iAck) ); 
;;;387    
;;;388        SendDataToServer(FwUpdateStatusObj.UdpFd,(struct sockaddr*)&MainSvrSockAddr,AckMsgArray, iLength);
000036  4917              LDR      r1,|L11.148|
000038  4623              MOV      r3,r4
00003a  aa05              ADD      r2,sp,#0x14
00003c  6888              LDR      r0,[r1,#8]  ; FwUpdateStatusObj
00003e  4916              LDR      r1,|L11.152|
000040  f7fffffe          BL       SendDataToServer
;;;389        SendUdpData(AckMsgArray, iLength); 
000044  4621              MOV      r1,r4
000046  a805              ADD      r0,sp,#0x14
000048  f7fffffe          BL       SendUdpData
;;;390    
;;;391        #if 0
;;;392            UdpDebugPrint("The reback od reboot is :\r\n",strlen("The reback od reboot is :\r\n"));
;;;393            UdpDebugPrint(AckMsgArray, iLength);
;;;394        #endif
;;;395        
;;;396        return 0; 
00004c  2000              MOVS     r0,#0
;;;397    } 
00004e  b01e              ADD      sp,sp,#0x78
000050  bd70              POP      {r4-r6,pc}
;;;398    
                          ENDP

000052  0000              DCW      0x0000
                  |L11.84|
                          DCD      DevInfoObj+0x18
                  |L11.88|
000058  56337b22          DCB      "V3{""sn"":""%s"",""sak"":""%s"",""response"":%d,""op"":"
00005c  736e223a
000060  22257322
000064  2c227361
000068  6b223a22
00006c  2573222c
000070  22726573
000074  706f6e73
000078  65223a25
00007c  642c226f
000080  70223a  
000083  25642c22          DCB      "%d,""code"":%d}",0
000087  636f6465
00008b  223a2564
00008f  7d00    
000091  00                DCB      0
000092  00                DCB      0
000093  00                DCB      0
                  |L11.148|
                          DCD      FwUpdateStatusObj
                  |L11.152|
                          DCD      MainSvrSockAddr

                          AREA ||i.UdpScanNearbyWifiSignal||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UdpScanNearbyWifiSignal PROC
;;;584    ****************************************************************************************************/
;;;585    static uint8_t UdpScanNearbyWifiSignal(char* pArgRecvBuf) 
000000  b570              PUSH     {r4-r6,lr}
;;;586    { 
000002  f5ad6daf          SUB      sp,sp,#0x578
000006  4606              MOV      r6,r0
;;;587        int iAck = 0, iLength;
000008  2500              MOVS     r5,#0
;;;588    	char AckMsgArray[1400];
;;;589        
;;;590        iLengthHttpAckBuf = HTTP_SERVER_ACK_LENGTH-3-1; 
00000a  f2405074          MOV      r0,#0x574
00000e  492b              LDR      r1,|L12.188|
000010  6008              STR      r0,[r1,#0]  ; iLengthHttpAckBuf
;;;591        
;;;592    
;;;593        pHttpAckBuf  = AckMsgArray;
000012  492b              LDR      r1,|L12.192|
000014  f8c1d000          STR      sp,[r1,#0]  ; pHttpAckBuf
;;;594        iLength      = sprintf(pHttpAckBuf,"V3{\"response\":%d,"
000018  2248              MOVS     r2,#0x48
00001a  a12a              ADR      r1,|L12.196|
00001c  4828              LDR      r0,|L12.192|
00001e  6800              LDR      r0,[r0,#0]  ; pHttpAckBuf
000020  f7fffffe          BL       __2sprintf
000024  4604              MOV      r4,r0
;;;595                                        "\"code\":200,"
;;;596                                        "\"data\":{\"signal\":[", SWITCH_GET_WIFI_SIGNAL_UDP_72_CMD);
;;;597        pHttpAckBuf  += iLength; 
000026  4826              LDR      r0,|L12.192|
000028  6800              LDR      r0,[r0,#0]  ; pHttpAckBuf
00002a  4420              ADD      r0,r0,r4
00002c  4924              LDR      r1,|L12.192|
00002e  6008              STR      r0,[r1,#0]  ; pHttpAckBuf
;;;598    
;;;599        iLengthHttpAckBuf -= iLength; 
000030  4822              LDR      r0,|L12.188|
000032  6800              LDR      r0,[r0,#0]  ; iLengthHttpAckBuf
000034  1b00              SUBS     r0,r0,r4
000036  4921              LDR      r1,|L12.188|
000038  6008              STR      r0,[r1,#0]  ; iLengthHttpAckBuf
;;;600        
;;;601    	iAck         = hfwifi_scan(hfwifi_scan_callback); 
00003a  482e              LDR      r0,|L12.244|
00003c  f7fffffe          BL       hfwifi_scan
000040  4605              MOV      r5,r0
;;;602    	if(iAck < 0)
000042  2d00              CMP      r5,#0
000044  da0b              BGE      |L12.94|
;;;603    	{
;;;604    		memset(AckMsgArray,0,sizeof(AckMsgArray));
000046  f44f61af          MOV      r1,#0x578
00004a  4668              MOV      r0,sp
00004c  f7fffffe          BL       __aeabi_memclr4
;;;605            iLength  = sprintf(AckMsgArray,"V3{\"response\":%d,\"code\":400}", SWITCH_GET_WIFI_SIGNAL_UDP_72_CMD);
000050  2248              MOVS     r2,#0x48
000052  a129              ADR      r1,|L12.248|
000054  4668              MOV      r0,sp
000056  f7fffffe          BL       __2sprintf
00005a  4604              MOV      r4,r0
00005c  e01f              B        |L12.158|
                  |L12.94|
;;;606    	}
;;;607    	else
;;;608    	{
;;;609    	    pHttpAckBuf--;
00005e  4818              LDR      r0,|L12.192|
000060  6800              LDR      r0,[r0,#0]  ; pHttpAckBuf
000062  1e40              SUBS     r0,r0,#1
000064  4916              LDR      r1,|L12.192|
000066  6008              STR      r0,[r1,#0]  ; pHttpAckBuf
;;;610            *pHttpAckBuf = ']';
000068  205d              MOVS     r0,#0x5d
00006a  6809              LDR      r1,[r1,#0]  ; pHttpAckBuf
00006c  7008              STRB     r0,[r1,#0]
;;;611            pHttpAckBuf++;
00006e  4814              LDR      r0,|L12.192|
000070  6800              LDR      r0,[r0,#0]  ; pHttpAckBuf
000072  1c40              ADDS     r0,r0,#1
000074  4912              LDR      r1,|L12.192|
000076  6008              STR      r0,[r1,#0]  ; pHttpAckBuf
;;;612            *pHttpAckBuf = '}';
000078  207d              MOVS     r0,#0x7d
00007a  6809              LDR      r1,[r1,#0]  ; pHttpAckBuf
00007c  7008              STRB     r0,[r1,#0]
;;;613            pHttpAckBuf++;
00007e  4810              LDR      r0,|L12.192|
000080  6800              LDR      r0,[r0,#0]  ; pHttpAckBuf
000082  1c40              ADDS     r0,r0,#1
000084  490e              LDR      r1,|L12.192|
000086  6008              STR      r0,[r1,#0]  ; pHttpAckBuf
;;;614            *pHttpAckBuf = '}';
000088  207d              MOVS     r0,#0x7d
00008a  6809              LDR      r1,[r1,#0]  ; pHttpAckBuf
00008c  7008              STRB     r0,[r1,#0]
;;;615            pHttpAckBuf++;
00008e  480c              LDR      r0,|L12.192|
000090  6800              LDR      r0,[r0,#0]  ; pHttpAckBuf
000092  1c40              ADDS     r0,r0,#1
000094  490a              LDR      r1,|L12.192|
000096  6008              STR      r0,[r1,#0]  ; pHttpAckBuf
;;;616            *pHttpAckBuf = '\0';
000098  2000              MOVS     r0,#0
00009a  6809              LDR      r1,[r1,#0]  ; pHttpAckBuf
00009c  7008              STRB     r0,[r1,#0]
                  |L12.158|
;;;617    	}
;;;618    	SendUdpData(AckMsgArray, sizeof(AckMsgArray)-1);
00009e  f2405177          MOV      r1,#0x577
0000a2  4668              MOV      r0,sp
0000a4  f7fffffe          BL       SendUdpData
;;;619    	
;;;620    	UdpDebugPrint(AckMsgArray, sizeof(AckMsgArray)-1);
0000a8  f2405177          MOV      r1,#0x577
0000ac  4668              MOV      r0,sp
0000ae  f7fffffe          BL       UdpDebugPrint
;;;621     
;;;622    	return 0;
0000b2  2000              MOVS     r0,#0
;;;623    } 
0000b4  f50d6daf          ADD      sp,sp,#0x578
0000b8  bd70              POP      {r4-r6,pc}
;;;624    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L12.188|
                          DCD      iLengthHttpAckBuf
                  |L12.192|
                          DCD      pHttpAckBuf
                  |L12.196|
0000c4  56337b22          DCB      "V3{""response"":%d,""code"":200,""data"":{""signal"":[",0
0000c8  72657370
0000cc  6f6e7365
0000d0  223a2564
0000d4  2c22636f
0000d8  6465223a
0000dc  3230302c
0000e0  22646174
0000e4  61223a7b
0000e8  22736967
0000ec  6e616c22
0000f0  3a5b00  
0000f3  00                DCB      0
                  |L12.244|
                          DCD      hfwifi_scan_callback
                  |L12.248|
0000f8  56337b22          DCB      "V3{""response"":%d,""code"":400}",0
0000fc  72657370
000100  6f6e7365
000104  223a2564
000108  2c22636f
00010c  6465223a
000110  3430307d
000114  00      
000115  00                DCB      0
000116  00                DCB      0
000117  00                DCB      0

                          AREA ||i.UdpServer_RecvData||, CODE, READONLY, ALIGN=2

                  UdpServer_RecvData PROC
;;;141    *******************************************************************************/ 
;;;142    extern int USER_FUNC UdpServer_RecvData(uint32_t event, char *pRecvData, uint32_t len,uint32_t buf_len)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;143    {
000004  b083              SUB      sp,sp,#0xc
000006  4682              MOV      r10,r0
000008  460f              MOV      r7,r1
;;;144        char        *pRecvBufTemp,*pJasonBufTemp; 
;;;145        char        *pContextData; 
;;;146        cJSON       *json; 
;;;147        int8_t      iCmdBuf[UDP_FIELD_1_CMD_LENTH+1] = {0}; 
00000a  2000              MOVS     r0,#0
00000c  9001              STR      r0,[sp,#4]
;;;148        uint32_t    Cmd; 
;;;149        uint8_t     iArrCount,iTemp; 
;;;150    
;;;151        //u_printf("Receive data is %s\n",pRecvData);
;;;152        //UdpDebugPrint(pRecvData,strlen(pRecvData));
;;;153        
;;;154        if(event == HFNET_SOCKETA_DATA_READY)
00000e  f1ba0f00          CMP      r10,#0
000012  d145              BNE      |L13.160|
;;;155        { 
;;;156            pRecvBufTemp  = pRecvData; 
000014  463c              MOV      r4,r7
;;;157            
;;;158            if('V' != *(pRecvBufTemp+0))
000016  7820              LDRB     r0,[r4,#0]
000018  2856              CMP      r0,#0x56
00001a  d00e              BEQ      |L13.58|
;;;159            {
;;;160                iCmdBuf[0]    = *(pRecvBufTemp+0); 
00001c  7820              LDRB     r0,[r4,#0]
00001e  b240              SXTB     r0,r0
000020  f88d0004          STRB     r0,[sp,#4]
;;;161                iCmdBuf[1]    = *(pRecvBufTemp+1); 
000024  7860              LDRB     r0,[r4,#1]
000026  b240              SXTB     r0,r0
000028  f88d0005          STRB     r0,[sp,#5]
;;;162                Cmd           = strtoul((char const*)iCmdBuf, NULL,16);
00002c  2210              MOVS     r2,#0x10
00002e  2100              MOVS     r1,#0
000030  a801              ADD      r0,sp,#4
000032  f7fffffe          BL       strtoul
000036  4606              MOV      r6,r0
000038  e010              B        |L13.92|
                  |L13.58|
;;;163    
;;;164    			//u_printf("Cmd = %D\n",Cmd);
;;;165            }
;;;166            else
;;;167            {
;;;168                pJasonBufTemp = pRecvBufTemp + UDP_FIELD_1_CMD_LENTH;
00003a  1ca0              ADDS     r0,r4,#2
00003c  9002              STR      r0,[sp,#8]
;;;169                
;;;170                json = cJSON_Parse(pJasonBufTemp);
00003e  9802              LDR      r0,[sp,#8]
000040  f7fffffe          BL       cJSON_Parse
000044  4681              MOV      r9,r0
;;;171                if(json)
000046  f1b90f00          CMP      r9,#0
00004a  d004              BEQ      |L13.86|
;;;172                {
;;;173            		Cmd = cJSON_GetObjectItem(json,"cmd")->valueint;
00004c  a116              ADR      r1,|L13.168|
00004e  4648              MOV      r0,r9
000050  f7fffffe          BL       cJSON_GetObjectItem
000054  6946              LDR      r6,[r0,#0x14]
                  |L13.86|
;;;174                }
;;;175                cJSON_Delete(json);       
000056  4648              MOV      r0,r9
000058  f7fffffe          BL       cJSON_Delete
                  |L13.92|
;;;176            }
;;;177    
;;;178            #if 0
;;;179            else
;;;180            { 
;;;181                u_printf("Receive data is %s\n",pRecvData);
;;;182                
;;;183                iCmdBuf[0]    = *(pRecvBufTemp+33); 
;;;184                iCmdBuf[1]    = *(pRecvBufTemp+34); 
;;;185                Cmd           = strtoul((char const*)iCmdBuf, NULL,10);
;;;186            }
;;;187            #endif
;;;188            
;;;189            
;;;190            pContextData = pRecvBufTemp + UDP_FIELD_1_CMD_LENTH;
00005c  f1040802          ADD      r8,r4,#2
;;;191            
;;;192            if(SWTICH_UPDATE_FW_UDP_81_CMD == Cmd) 
000060  2e81              CMP      r6,#0x81
000062  d101              BNE      |L13.104|
;;;193            { 
;;;194                pContextData += SERIAL_NUN_ID_LEN;                              // UDP广播包有设备ID 
000064  f1080810          ADD      r8,r8,#0x10
                  |L13.104|
;;;195            }
;;;196    
;;;197            #if 0
;;;198            //u_printf("Receive data is %s\n",pRecvData);
;;;199            u_printf("Jason data is %s\n",pContextData);
;;;200            u_printf("Cmd buffer is %s  Cmd = %d\n",iCmdBuf,Cmd);
;;;201            #endif
;;;202    
;;;203            iArrCount = Dim(UdpServerArr); 
000068  f04f0b0e          MOV      r11,#0xe
;;;204            for(iTemp=0; iTemp<iArrCount; iTemp++) 
00006c  2500              MOVS     r5,#0
00006e  e014              B        |L13.154|
                  |L13.112|
;;;205            { 
;;;206                if(Cmd == UdpServerArr[iTemp].iCmdField)  
000070  480e              LDR      r0,|L13.172|
000072  f8100035          LDRB     r0,[r0,r5,LSL #3]
000076  42b0              CMP      r0,r6
000078  d10d              BNE      |L13.150|
;;;207                { 
;;;208                    if(NULL != UdpServerArr[iTemp].pfUdpServerObj) 
00007a  480c              LDR      r0,|L13.172|
00007c  eb0000c5          ADD      r0,r0,r5,LSL #3
000080  6840              LDR      r0,[r0,#4]
000082  b128              CBZ      r0,|L13.144|
;;;209                    { 
;;;210                        UdpServerArr[iTemp].pfUdpServerObj(pContextData);
000084  4809              LDR      r0,|L13.172|
000086  eb0000c5          ADD      r0,r0,r5,LSL #3
00008a  6841              LDR      r1,[r0,#4]
00008c  4640              MOV      r0,r8
00008e  4788              BLX      r1
                  |L13.144|
;;;211                    } 
;;;212                    len = 0;
000090  2000              MOVS     r0,#0
000092  9005              STR      r0,[sp,#0x14]
;;;213                    break; 
000094  e003              B        |L13.158|
                  |L13.150|
000096  1c68              ADDS     r0,r5,#1              ;204
000098  b2c5              UXTB     r5,r0                 ;204
                  |L13.154|
00009a  455d              CMP      r5,r11                ;204
00009c  dbe8              BLT      |L13.112|
                  |L13.158|
00009e  bf00              NOP      
                  |L13.160|
;;;214                } 
;;;215            } 
;;;216    	} 
;;;217    	return len;
0000a0  9805              LDR      r0,[sp,#0x14]
;;;218    }
0000a2  b007              ADD      sp,sp,#0x1c
0000a4  e8bd8ff0          POP      {r4-r11,pc}
;;;219    /*******************************************************************************
                          ENDP

                  |L13.168|
0000a8  636d6400          DCB      "cmd",0
                  |L13.172|
                          DCD      UdpServerArr

                          AREA ||i.UdpSetDevReboot||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  UdpSetDevReboot PROC
;;;946    *******************************************************************************/ 
;;;947    static uint8_t UdpSetDevReboot(char *pBuf)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;948    { 
000004  b09b              SUB      sp,sp,#0x6c
000006  4607              MOV      r7,r0
;;;949        int         iLength; 
;;;950        char        AckMsgArray[100]={0}; 
000008  2164              MOVS     r1,#0x64
00000a  a802              ADD      r0,sp,#8
00000c  f7fffffe          BL       __aeabi_memclr4
;;;951    	uint8_t		port_num=0,j=0,en=0, iRet;
000010  f04f0800          MOV      r8,#0
000014  2400              MOVS     r4,#0
000016  46a1              MOV      r9,r4
;;;952    	cJSON   	*json,*port;
;;;953    
;;;954    	json = cJSON_Parse(pBuf);
000018  4638              MOV      r0,r7
00001a  f7fffffe          BL       cJSON_Parse
00001e  4606              MOV      r6,r0
;;;955    	iRet = FAILED; 
000020  f04f0a01          MOV      r10,#1
;;;956    	if(json)
000024  2e00              CMP      r6,#0
000026  d037              BEQ      |L14.152|
;;;957    	{
;;;958    
;;;959    		en   		= cJSON_GetObjectItem(json, "en")->valueint;
000028  a125              ADR      r1,|L14.192|
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       cJSON_GetObjectItem
000030  f8909014          LDRB     r9,[r0,#0x14]
;;;960    		port        = cJSON_GetObjectItem(json, "port");
000034  a123              ADR      r1,|L14.196|
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       cJSON_GetObjectItem
00003c  4683              MOV      r11,r0
;;;961    		port_num    = cJSON_GetArraySize(port);		
00003e  4658              MOV      r0,r11
000040  f7fffffe          BL       cJSON_GetArraySize
000044  f00008ff          AND      r8,r0,#0xff
;;;962    		for(j=0; j<port_num; j++)
000048  bf00              NOP      
00004a  e00c              B        |L14.102|
                  |L14.76|
;;;963    		{
;;;964    			SwInformation.PortInfor[j].rebootPort= cJSON_GetArrayItem(port, j)->valueint;
00004c  4621              MOV      r1,r4
00004e  4658              MOV      r0,r11
000050  f7fffffe          BL       cJSON_GetArrayItem
000054  7d01              LDRB     r1,[r0,#0x14]
000056  eb040284          ADD      r2,r4,r4,LSL #2
00005a  481c              LDR      r0,|L14.204|
00005c  eb000082          ADD      r0,r0,r2,LSL #2
000060  74c1              STRB     r1,[r0,#0x13]
000062  1c60              ADDS     r0,r4,#1              ;962
000064  b2c4              UXTB     r4,r0                 ;962
                  |L14.102|
000066  4544              CMP      r4,r8                 ;962
000068  dbf0              BLT      |L14.76|
;;;965    			//u_printf("port[%d] = %d\n",ruleID,cJSON_GetArrayItem(port,j)->valueint);
;;;966    	    }
;;;967    		SwInformation.isRebootEnable = en;
00006a  4818              LDR      r0,|L14.204|
00006c  3808              SUBS     r0,r0,#8
00006e  f8809002          STRB     r9,[r0,#2]
;;;968    			
;;;969    		iRet = PASSED;
000072  f04f0a00          MOV      r10,#0
;;;970    
;;;971    		reportRebootInfo = 1;
000076  2001              MOVS     r0,#1
000078  4915              LDR      r1,|L14.208|
00007a  7008              STRB     r0,[r1,#0]
;;;972    		SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_CKECK_BIT_14_SW_STATE_IS_DIRTY_CMD);   //save the master status to flash
00007c  4815              LDR      r0,|L14.212|
00007e  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
000080  f4404080          ORR      r0,r0,#0x4000
000084  4913              LDR      r1,|L14.212|
000086  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
;;;973    		SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_CKECK_BIT_17_REPORT_PORT_REBOOT_CMD);	
000088  4608              MOV      r0,r1
00008a  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
00008c  f4403000          ORR      r0,r0,#0x20000
000090  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
;;;974            
;;;975    		cJSON_Delete(json); 
000092  4630              MOV      r0,r6
000094  f7fffffe          BL       cJSON_Delete
                  |L14.152|
;;;976    	}
;;;977    	
;;;978    	iLength = sprintf(AckMsgArray,"V3{\"sn\":\"%s\",\"response\":%d,\"code\":%d}", 
000098  20c8              MOVS     r0,#0xc8
00009a  fa00f00a          LSL      r0,r0,r10
00009e  231a              MOVS     r3,#0x1a
0000a0  4a0d              LDR      r2,|L14.216|
0000a2  a10e              ADR      r1,|L14.220|
0000a4  9000              STR      r0,[sp,#0]
0000a6  a802              ADD      r0,sp,#8
0000a8  f7fffffe          BL       __2sprintf
0000ac  4605              MOV      r5,r0
;;;979    											DevInfoObj.dev_sn,
;;;980    										  (SWITCH_SET_DEV_REBOOT_1A_CMD), 
;;;981    										  (200<<iRet)); 
;;;982        
;;;983        
;;;984        SendUdpData(AckMsgArray, iLength); 
0000ae  4629              MOV      r1,r5
0000b0  a802              ADD      r0,sp,#8
0000b2  f7fffffe          BL       SendUdpData
;;;985    
;;;986        return 0; 
0000b6  2000              MOVS     r0,#0
;;;987    } 
0000b8  b01b              ADD      sp,sp,#0x6c
0000ba  e8bd8ff0          POP      {r4-r11,pc}
;;;988    
                          ENDP

0000be  0000              DCW      0x0000
                  |L14.192|
0000c0  656e00            DCB      "en",0
0000c3  00                DCB      0
                  |L14.196|
0000c4  706f7274          DCB      "port",0
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L14.204|
                          DCD      SwInformation+0x8
                  |L14.208|
                          DCD      reportRebootInfo
                  |L14.212|
                          DCD      FwUpdateStatusObj
                  |L14.216|
                          DCD      DevInfoObj+0x7
                  |L14.220|
0000dc  56337b22          DCB      "V3{""sn"":""%s"",""response"":%d,""code"":%d}",0
0000e0  736e223a
0000e4  22257322
0000e8  2c227265
0000ec  73706f6e
0000f0  7365223a
0000f4  25642c22
0000f8  636f6465
0000fc  223a2564
000100  7d00    
000102  00                DCB      0
000103  00                DCB      0

                          AREA ||i.UdpSetHostSlave||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UdpSetHostSlave PROC
;;;1023   *******************************************************************************/ 
;;;1024   uint8_t UdpSetHostSlave(char *pDataBuf)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1025   {    
000004  b08a              SUB      sp,sp,#0x28
000006  4607              MOV      r7,r0
;;;1026       cJSON *pJson,*master;
;;;1027       uint8_t num, portID;
;;;1028       char    AckMsgArray[40]={0};
000008  2128              MOVS     r1,#0x28
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       __aeabi_memclr4
;;;1029       int     iLength,iRet;
;;;1030       
;;;1031       iRet = 1;
000010  f04f0801          MOV      r8,#1
;;;1032       pJson = cJSON_Parse(pDataBuf); 
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       cJSON_Parse
00001a  4605              MOV      r5,r0
;;;1033       if(pJson) 
00001c  2d00              CMP      r5,#0
00001e  d061              BEQ      |L15.228|
;;;1034       { 
;;;1035           master = cJSON_GetObjectItem(pJson,"master");
000020  a133              ADR      r1,|L15.240|
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       cJSON_GetObjectItem
000028  4682              MOV      r10,r0
;;;1036   		num = cJSON_GetArraySize(master);
00002a  4650              MOV      r0,r10
00002c  f7fffffe          BL       cJSON_GetArraySize
000030  b2c6              UXTB     r6,r0
;;;1037   		for(portID=0;portID<num;portID++)
000032  2400              MOVS     r4,#0
000034  e00c              B        |L15.80|
                  |L15.54|
;;;1038   		{
;;;1039   			SwInformation.PortInfor[portID].msType = cJSON_GetArrayItem(master,portID)->valueint;
000036  4621              MOV      r1,r4
000038  4650              MOV      r0,r10
00003a  f7fffffe          BL       cJSON_GetArrayItem
00003e  7d01              LDRB     r1,[r0,#0x14]
000040  eb040284          ADD      r2,r4,r4,LSL #2
000044  482c              LDR      r0,|L15.248|
000046  eb000082          ADD      r0,r0,r2,LSL #2
00004a  7481              STRB     r1,[r0,#0x12]
00004c  1c60              ADDS     r0,r4,#1              ;1037
00004e  b2c4              UXTB     r4,r0                 ;1037
                  |L15.80|
000050  42b4              CMP      r4,r6                 ;1037
000052  dbf0              BLT      |L15.54|
;;;1040   			//u_printf("PortInfor[%d].msType = %d\n",portID,SwInformation.PortInfor[portID].msType);
;;;1041   		}
;;;1042   		
;;;1043   		SwInformation.LimitData = cJSON_GetObjectItem(pJson,"limit")->valueint;
000054  a129              ADR      r1,|L15.252|
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       cJSON_GetObjectItem
00005c  7d00              LDRB     r0,[r0,#0x14]
00005e  4926              LDR      r1,|L15.248|
000060  3908              SUBS     r1,r1,#8
000062  7008              STRB     r0,[r1,#0]
;;;1044   		switch (SwInformation.LimitData)
000064  4608              MOV      r0,r1
000066  7800              LDRB     r0,[r0,#0]  ; SwInformation
000068  b130              CBZ      r0,|L15.120|
00006a  2801              CMP      r0,#1
00006c  d009              BEQ      |L15.130|
00006e  2802              CMP      r0,#2
000070  d00c              BEQ      |L15.140|
000072  2803              CMP      r0,#3
000074  d114              BNE      |L15.160|
000076  e00e              B        |L15.150|
                  |L15.120|
;;;1045   		{
;;;1046   		    case 0:
;;;1047   		    {
;;;1048   		        SwInformation.masterLimitWatt = 2;
000078  2002              MOVS     r0,#2
00007a  491f              LDR      r1,|L15.248|
00007c  3908              SUBS     r1,r1,#8
00007e  7048              STRB     r0,[r1,#1]
;;;1049   		        break;
000080  e00f              B        |L15.162|
                  |L15.130|
;;;1050   		    }
;;;1051   		    case 1:
;;;1052   		    {
;;;1053   		        SwInformation.masterLimitWatt = 5;
000082  2005              MOVS     r0,#5
000084  491c              LDR      r1,|L15.248|
000086  3908              SUBS     r1,r1,#8
000088  7048              STRB     r0,[r1,#1]
;;;1054   		        break;
00008a  e00a              B        |L15.162|
                  |L15.140|
;;;1055   		    }
;;;1056   		    case 2:
;;;1057   		    {
;;;1058   		        SwInformation.masterLimitWatt = 10;
00008c  200a              MOVS     r0,#0xa
00008e  491a              LDR      r1,|L15.248|
000090  3908              SUBS     r1,r1,#8
000092  7048              STRB     r0,[r1,#1]
;;;1059   		        break;
000094  e005              B        |L15.162|
                  |L15.150|
;;;1060   		    }
;;;1061   		    case 3:
;;;1062   		    {
;;;1063   		        SwInformation.masterLimitWatt = 35;
000096  2023              MOVS     r0,#0x23
000098  4917              LDR      r1,|L15.248|
00009a  3908              SUBS     r1,r1,#8
00009c  7048              STRB     r0,[r1,#1]
;;;1064   		        break;
00009e  e000              B        |L15.162|
                  |L15.160|
;;;1065   		    }
;;;1066   		    default:
;;;1067   		    {
;;;1068   		        break;
0000a0  bf00              NOP      
                  |L15.162|
0000a2  bf00              NOP                            ;1049
;;;1069   		    }
;;;1070   		}
;;;1071   		iRet = 0;
0000a4  f04f0800          MOV      r8,#0
;;;1072           
;;;1073   		cJSON_Delete(pJson); 
0000a8  4628              MOV      r0,r5
0000aa  f7fffffe          BL       cJSON_Delete
;;;1074   
;;;1075           //u_printf("masterLimitWatt=%d\n",SwInformation.masterLimitWatt);
;;;1076           
;;;1077           SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_CKECK_BIT_14_SW_STATE_IS_DIRTY_CMD);   //save the master status to flash
0000ae  4815              LDR      r0,|L15.260|
0000b0  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
0000b2  f4404080          ORR      r0,r0,#0x4000
0000b6  4913              LDR      r1,|L15.260|
0000b8  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
;;;1078           SaveDevStatusPoll();
0000ba  f7fffffe          BL       SaveDevStatusPoll
;;;1079   
;;;1080           iLength = sprintf(AckMsgArray, "V3{\"response\":%d,\"code\":\"200\"}", SWITCH_SET_PORT_HOST_SLAVE_15_CMD); 
0000be  2215              MOVS     r2,#0x15
0000c0  a111              ADR      r1,|L15.264|
0000c2  4668              MOV      r0,sp
0000c4  f7fffffe          BL       __2sprintf
0000c8  4681              MOV      r9,r0
;;;1081   
;;;1082   		SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_CKECK_BIT_16_REPORT_MASTER_SLAVE_CMD);	
0000ca  480e              LDR      r0,|L15.260|
0000cc  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
0000ce  f4403080          ORR      r0,r0,#0x10000
0000d2  490c              LDR      r1,|L15.260|
0000d4  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
;;;1083   		reportMasterSlaveInfo = 1;
0000d6  2001              MOVS     r0,#1
0000d8  4913              LDR      r1,|L15.296|
0000da  7008              STRB     r0,[r1,#0]
;;;1084           SendUdpData(AckMsgArray, iLength);
0000dc  4649              MOV      r1,r9
0000de  4668              MOV      r0,sp
0000e0  f7fffffe          BL       SendUdpData
                  |L15.228|
;;;1085   
;;;1086   	} 
;;;1087   	return iRet;
0000e4  f00800ff          AND      r0,r8,#0xff
;;;1088   }
0000e8  b00a              ADD      sp,sp,#0x28
0000ea  e8bd87f0          POP      {r4-r10,pc}
;;;1089   
                          ENDP

0000ee  0000              DCW      0x0000
                  |L15.240|
0000f0  6d617374          DCB      "master",0
0000f4  657200  
0000f7  00                DCB      0
                  |L15.248|
                          DCD      SwInformation+0x8
                  |L15.252|
0000fc  6c696d69          DCB      "limit",0
000100  7400    
000102  00                DCB      0
000103  00                DCB      0
                  |L15.260|
                          DCD      FwUpdateStatusObj
                  |L15.264|
000108  56337b22          DCB      "V3{""response"":%d,""code"":""200""}",0
00010c  72657370
000110  6f6e7365
000114  223a2564
000118  2c22636f
00011c  6465223a
000120  22323030
000124  227d00  
000127  00                DCB      0
                  |L15.296|
                          DCD      reportMasterSlaveInfo

                          AREA ||i.UdpUpdateAppFwAsSlave||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                  UdpUpdateAppFwAsSlave PROC
;;;448    
;;;449    static uint8_t UdpUpdateAppFwAsSlave(char *pDataBuf)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;450    { 
000004  b0a1              SUB      sp,sp,#0x84
000006  4604              MOV      r4,r0
;;;451        int         iLength;
;;;452        uint32_t    iNumPackage;
;;;453    	static uint32_t lastPackID = 0;
;;;454        char        *pFwData;
;;;455        char        AckMsgArray[120]={0};
000008  2178              MOVS     r1,#0x78
00000a  a803              ADD      r0,sp,#0xc
00000c  f7fffffe          BL       __aeabi_memclr4
;;;456        char        iAck;
;;;457        //char		testBuf[100] = {0};
;;;458        int16_t     TotalCheck;
;;;459        
;;;460       #if  defined(__WATCH_DOG_ENABLE__)
;;;461    	FeedWatchDog(); 
000010  f7fffffe          BL       FeedWatchDog
;;;462       #endif 
;;;463    
;;;464    	iNumPackage = ((pDataBuf[0]<<24)&(0xff000000))|((pDataBuf[1]<<16)&(0xff0000))|((pDataBuf[2]<<8)&(0xff00))|((pDataBuf[3]<<0)&(0xff<<0));
000014  7820              LDRB     r0,[r4,#0]
000016  f04f417f          MOV      r1,#0xff000000
00001a  ea016000          AND      r0,r1,r0,LSL #24
00001e  7861              LDRB     r1,[r4,#1]
000020  f44f027f          MOV      r2,#0xff0000
000024  ea024101          AND      r1,r2,r1,LSL #16
000028  4308              ORRS     r0,r0,r1
00002a  78a1              LDRB     r1,[r4,#2]
00002c  1212              ASRS     r2,r2,#8
00002e  ea022101          AND      r1,r2,r1,LSL #8
000032  4308              ORRS     r0,r0,r1
000034  78e1              LDRB     r1,[r4,#3]
000036  ea400601          ORR      r6,r0,r1
;;;465    	            
;;;466    	iLength     = ((pDataBuf[4]<<8)&0xFF00) | (pDataBuf[5]); 
00003a  7920              LDRB     r0,[r4,#4]
00003c  4611              MOV      r1,r2
00003e  ea012000          AND      r0,r1,r0,LSL #8
000042  7961              LDRB     r1,[r4,#5]
000044  ea400701          ORR      r7,r0,r1
;;;467    	pFwData     = pDataBuf; 
000048  4625              MOV      r5,r4
;;;468    	pFwData    += 6; 
00004a  1dad              ADDS     r5,r5,#6
;;;469    
;;;470        //u_printf("Now we updata!	iLength = %d	iNumPackage = %d\n",iLength,iNumPackage);
;;;471    	
;;;472    	iAck = 1; 
00004c  f04f0901          MOV      r9,#1
;;;473    	if(iLength != 0)
000050  b337              CBZ      r7,|L16.160|
;;;474        { 
;;;475            if(0x01 == iNumPackage)
000052  2e01              CMP      r6,#1
000054  d114              BNE      |L16.128|
;;;476            { 	
;;;477    			hfuart_close(0);			
000056  2000              MOVS     r0,#0
000058  f7fffffe          BL       hfuart_close
;;;478                
;;;479                FwUpdateObj.CheckSumWhole = 0; 
00005c  2000              MOVS     r0,#0
00005e  4933              LDR      r1,|L16.300|
000060  f8a1011a          STRH     r0,[r1,#0x11a]
;;;480                FwUpdateObj.intFwLength   = 0; 
000064  f8c10114          STR      r0,[r1,#0x114]  ; FwUpdateObj
;;;481                hfupdate_start(HFUPDATE_SW);
000068  f7fffffe          BL       hfupdate_start
;;;482                iAck = SaveUpdateFw(pFwData, iLength,iNumPackage); 
00006c  4632              MOV      r2,r6
00006e  4639              MOV      r1,r7
000070  4628              MOV      r0,r5
000072  f7fffffe          BL       SaveUpdateFw
000076  4681              MOV      r9,r0
;;;483    			lastPackID = 1;
000078  2001              MOVS     r0,#1
00007a  492d              LDR      r1,|L16.304|
00007c  6008              STR      r0,[r1,#0]  ; lastPackID
00007e  e03d              B        |L16.252|
                  |L16.128|
;;;484                
;;;485            } 
;;;486            else 
;;;487            { 
;;;488    			if(iNumPackage>lastPackID)
000080  482b              LDR      r0,|L16.304|
000082  6800              LDR      r0,[r0,#0]  ; lastPackID
000084  4286              CMP      r6,r0
000086  d908              BLS      |L16.154|
;;;489    			{
;;;490                	iAck = SaveUpdateFw(pFwData, iLength, iNumPackage);			
000088  4632              MOV      r2,r6
00008a  4639              MOV      r1,r7
00008c  4628              MOV      r0,r5
00008e  f7fffffe          BL       SaveUpdateFw
000092  4681              MOV      r9,r0
;;;491    
;;;492    			#if 0
;;;493    				if(iNumPackage-lastPackID >= 2)
;;;494    				{
;;;495    					memset(testBuf,0,sizeof(testBuf));
;;;496    					sprintf(testBuf,"curPackage	%d.Lost %d package.Lost package ID=%d\n",iNumPackage,iNumPackage-lastPackID-1,(iNumPackage+lastPackID)/2);
;;;497    					UdpDebugPrint(testBuf,strlen(testBuf));
;;;498    
;;;499    					iAck = 1;
;;;500    				}
;;;501    			#endif
;;;502    				lastPackID = iNumPackage;
000094  4826              LDR      r0,|L16.304|
000096  6006              STR      r6,[r0,#0]  ; lastPackID
000098  e030              B        |L16.252|
                  |L16.154|
;;;503    			}
;;;504    			else
;;;505    			{
;;;506    				iAck = 0;
00009a  f04f0900          MOV      r9,#0
00009e  e02d              B        |L16.252|
                  |L16.160|
;;;507    			}
;;;508            } 
;;;509        } 
;;;510        else 
;;;511        { 
;;;512    		iLength    = (pFwData[0]<<24&0xFF000000)|(pFwData[1]<<16&0xFFFF0000)|(pFwData[2]<<8&0xFFFFF00)|(pFwData[3]);
0000a0  7828              LDRB     r0,[r5,#0]
0000a2  f04f417f          MOV      r1,#0xff000000
0000a6  ea016000          AND      r0,r1,r0,LSL #24
0000aa  7869              LDRB     r1,[r5,#1]
0000ac  4a21              LDR      r2,|L16.308|
0000ae  ea024101          AND      r1,r2,r1,LSL #16
0000b2  4308              ORRS     r0,r0,r1
0000b4  78a9              LDRB     r1,[r5,#2]
0000b6  4a20              LDR      r2,|L16.312|
0000b8  ea022101          AND      r1,r2,r1,LSL #8
0000bc  4308              ORRS     r0,r0,r1
0000be  78e9              LDRB     r1,[r5,#3]
0000c0  ea400701          ORR      r7,r0,r1
;;;513    		TotalCheck = ((pFwData[4]<<8)&0xFF00) | pFwData[5];
0000c4  7928              LDRB     r0,[r5,#4]
0000c6  f44f417f          MOV      r1,#0xff00
0000ca  ea012000          AND      r0,r1,r0,LSL #8
0000ce  7969              LDRB     r1,[r5,#5]
0000d0  4308              ORRS     r0,r0,r1
0000d2  fa0ff880          SXTH     r8,r0
;;;514    
;;;515    	#if 0
;;;516    		memset(testBuf,0,sizeof(testBuf));
;;;517            sprintf(testBuf,"TotalCheck = %d      FwUpdateObj.CheckSumWhole = %d\r\n", TotalCheck, FwUpdateObj.CheckSumWhole);
;;;518    		UdpDebugPrint(testBuf,strlen(testBuf));
;;;519    	#endif
;;;520    	
;;;521            huart1 = hfuart_open(0);
0000d6  2000              MOVS     r0,#0
0000d8  f7fffffe          BL       hfuart_open
0000dc  4917              LDR      r1,|L16.316|
0000de  6008              STR      r0,[r1,#0]  ; huart1
;;;522            
;;;523    		if(TotalCheck == FwUpdateObj.CheckSumWhole)
0000e0  4812              LDR      r0,|L16.300|
0000e2  f9b0011a          LDRSH    r0,[r0,#0x11a]  ; FwUpdateObj
0000e6  4540              CMP      r0,r8
0000e8  d108              BNE      |L16.252|
;;;524    		{
;;;525    
;;;526                FwUpdateObj.FirmwareCompleted = 0x02;
0000ea  2002              MOVS     r0,#2
0000ec  490f              LDR      r1,|L16.300|
0000ee  f8a10118          STRH     r0,[r1,#0x118]
;;;527                FwUpdateObj.intFwLength       = iLength;
0000f2  4608              MOV      r0,r1
0000f4  f8c07114          STR      r7,[r0,#0x114]  ; FwUpdateObj
;;;528    			iAck = 0;
0000f8  f04f0900          MOV      r9,#0
                  |L16.252|
;;;529    
;;;530    		#if 0
;;;531    			memset(testBuf,0,sizeof(testBuf));
;;;532    			UdpDebugPrint("checkSum ok!\n",strlen("checkSum ok!\n"));	 
;;;533    	        sprintf(testBuf,"FwUpdateObj.FirmwareCompleted=%x\n",FwUpdateObj.FirmwareCompleted);
;;;534    			UdpDebugPrint(testBuf,strlen(testBuf));
;;;535    		#endif
;;;536    	       
;;;537    		}
;;;538        }
;;;539    
;;;540        iLength = sprintf(AckMsgArray,"%02X%s{\"code\":%d,\"num\":%d}", 
0000fc  20c8              MOVS     r0,#0xc8
0000fe  fa00f009          LSL      r0,r0,r9
000102  4b0f              LDR      r3,|L16.320|
000104  2281              MOVS     r2,#0x81
000106  a10f              ADR      r1,|L16.324|
000108  e9cd0600          STRD     r0,r6,[sp,#0]
00010c  a803              ADD      r0,sp,#0xc
00010e  f7fffffe          BL       __2sprintf
000112  4607              MOV      r7,r0
;;;541                                      (SWTICH_UPDATE_FW_UDP_81_CMD), 
;;;542                                      DevInfoObj.dev_sn, 
;;;543                                      (200<<iAck), iNumPackage ); 
;;;544        AckMsgArray[iLength] = '\0'; 
000114  2000              MOVS     r0,#0
000116  a903              ADD      r1,sp,#0xc
000118  55c8              STRB     r0,[r1,r7]
;;;545        SendUdpData(AckMsgArray, iLength); 
00011a  4639              MOV      r1,r7
00011c  a803              ADD      r0,sp,#0xc
00011e  f7fffffe          BL       SendUdpData
;;;546    
;;;547    	//u_printf("AckMsgArray=%s\n",AckMsgArray);
;;;548        return 0;
000122  2000              MOVS     r0,#0
;;;549    } 
000124  b021              ADD      sp,sp,#0x84
000126  e8bd83f0          POP      {r4-r9,pc}
;;;550    
                          ENDP

00012a  0000              DCW      0x0000
                  |L16.300|
                          DCD      FwUpdateObj
                  |L16.304|
                          DCD      lastPackID
                  |L16.308|
                          DCD      0xffff0000
                  |L16.312|
                          DCD      0x0fffff00
                  |L16.316|
                          DCD      huart1
                  |L16.320|
                          DCD      DevInfoObj+0x7
                  |L16.324|
000144  25303258          DCB      "%02X%s{""code"":%d,""num"":%d}",0
000148  25737b22
00014c  636f6465
000150  223a2564
000154  2c226e75
000158  6d223a25
00015c  647d00  
00015f  00                DCB      0

                          AREA ||i.UdpUpdateAppFwAsUrl||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  UdpUpdateAppFwAsUrl PROC
;;;255    *******************************************************************************/
;;;256    static uint8_t UdpUpdateAppFwAsUrl(char *pDataBuf)
000000  b570              PUSH     {r4-r6,lr}
;;;257    { 
000002  b08c              SUB      sp,sp,#0x30
000004  4604              MOV      r4,r0
;;;258        int         iLength; 
;;;259        char        AckMsgArray[40]={0}; 
000006  2128              MOVS     r1,#0x28
000008  a802              ADD      r0,sp,#8
00000a  f7fffffe          BL       __aeabi_memclr4
;;;260        uint8_t     iResult     = 0; 
00000e  2600              MOVS     r6,#0
;;;261        
;;;262        iResult = SetUpdateUrl(pDataBuf); 
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       SetUpdateUrl
000016  4606              MOV      r6,r0
;;;263        
;;;264        iLength = sprintf(AckMsgArray, "V3{\"sn\":\"%s\",\"response\":%d,\"code\":%d}", 
000018  20c8              MOVS     r0,#0xc8
00001a  40b0              LSLS     r0,r0,r6
00001c  2333              MOVS     r3,#0x33
00001e  4a07              LDR      r2,|L17.60|
000020  a107              ADR      r1,|L17.64|
000022  9000              STR      r0,[sp,#0]
000024  a802              ADD      r0,sp,#8
000026  f7fffffe          BL       __2sprintf
00002a  4605              MOV      r5,r0
;;;265    									DevInfoObj.dev_sn,
;;;266                                       (SWITCH_UPDATE_FW_UDP_33_CMD), 
;;;267                                       (200<<iResult) ); 
;;;268        SendUdpData(AckMsgArray, iLength); 
00002c  4629              MOV      r1,r5
00002e  a802              ADD      r0,sp,#8
000030  f7fffffe          BL       SendUdpData
;;;269         
;;;270        return 0;
000034  2000              MOVS     r0,#0
;;;271    } 
000036  b00c              ADD      sp,sp,#0x30
000038  bd70              POP      {r4-r6,pc}
;;;272    
                          ENDP

00003a  0000              DCW      0x0000
                  |L17.60|
                          DCD      DevInfoObj+0x7
                  |L17.64|
000040  56337b22          DCB      "V3{""sn"":""%s"",""response"":%d,""code"":%d}",0
000044  736e223a
000048  22257322
00004c  2c227265
000050  73706f6e
000054  7365223a
000058  25642c22
00005c  636f6465
000060  223a2564
000064  7d00    
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.Udp_TurnOnOffSwitch||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  Udp_TurnOnOffSwitch PROC
;;;863    *******************************************************************************/
;;;864    static uint8_t Udp_TurnOnOffSwitch(char *pBuf) 
000000  b570              PUSH     {r4-r6,lr}
;;;865    {
000002  b09a              SUB      sp,sp,#0x68
000004  4604              MOV      r4,r0
;;;866        int     iLength;
;;;867        char    AckMsgArray[100]={0};
000006  2164              MOVS     r1,#0x64
000008  a801              ADD      r0,sp,#4
00000a  f7fffffe          BL       __aeabi_memclr4
;;;868        uint8_t iRslt;
;;;869        
;;;870    	iRslt   = Switch_Ctl(pBuf);
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       Switch_Ctl
000014  4606              MOV      r6,r0
;;;871        iLength = sprintf(AckMsgArray, "V3{\"sn\":\"%s\",\"response\":%d,\"code\":%d}",
000016  20c8              MOVS     r0,#0xc8
000018  40b0              LSLS     r0,r0,r6
00001a  2314              MOVS     r3,#0x14
00001c  4a06              LDR      r2,|L18.56|
00001e  a107              ADR      r1,|L18.60|
000020  9000              STR      r0,[sp,#0]
000022  a801              ADD      r0,sp,#4
000024  f7fffffe          BL       __2sprintf
000028  4605              MOV      r5,r0
;;;872    									DevInfoObj.dev_sn,
;;;873                                       (SWITCH_ON_OFF_CTL_UDP_14_CMD), 
;;;874                                       (200<<iRslt)); 
;;;875        SendUdpData(AckMsgArray, iLength); 
00002a  4629              MOV      r1,r5
00002c  a801              ADD      r0,sp,#4
00002e  f7fffffe          BL       SendUdpData
;;;876    
;;;877       // UdpDebugPrint("Now report OnOff reback\r\n", strlen("Now report OnOff reback\r\n"));
;;;878       // UdpDebugPrint(AckMsgArray, iLength);
;;;879        return 0;
000032  2000              MOVS     r0,#0
;;;880    }
000034  b01a              ADD      sp,sp,#0x68
000036  bd70              POP      {r4-r6,pc}
;;;881    
                          ENDP

                  |L18.56|
                          DCD      DevInfoObj+0x7
                  |L18.60|
00003c  56337b22          DCB      "V3{""sn"":""%s"",""response"":%d,""code"":%d}",0
000040  736e223a
000044  22257322
000048  2c227265
00004c  73706f6e
000050  7365223a
000054  25642c22
000058  636f6465
00005c  223a2564
000060  7d00    
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.findMasterPort||, CODE, READONLY, ALIGN=2

                  findMasterPort PROC
;;;1091   
;;;1092   uint8_t findMasterPort(uint8_t *masterID)
000000  4602              MOV      r2,r0
;;;1093   {
;;;1094   	uint8_t portID = 0;
000002  2100              MOVS     r1,#0
;;;1095   	 	
;;;1096   	for(portID=0;portID<PORT_NUM;portID++)
000004  bf00              NOP      
000006  e00b              B        |L19.32|
                  |L19.8|
;;;1097       {    
;;;1098           if(SwInformation.PortInfor[portID].msType == 1)
000008  eb010381          ADD      r3,r1,r1,LSL #2
00000c  4806              LDR      r0,|L19.40|
00000e  eb000083          ADD      r0,r0,r3,LSL #2
000012  7c80              LDRB     r0,[r0,#0x12]
000014  2801              CMP      r0,#1
000016  d101              BNE      |L19.28|
;;;1099           {
;;;1100               *masterID = portID; 
000018  7011              STRB     r1,[r2,#0]
                  |L19.26|
;;;1101   			return 1;
;;;1102   		}	
;;;1103   	}
;;;1104   
;;;1105   	return 0;  
;;;1106   }
00001a  4770              BX       lr
                  |L19.28|
00001c  1c48              ADDS     r0,r1,#1              ;1096
00001e  b2c1              UXTB     r1,r0                 ;1096
                  |L19.32|
000020  2906              CMP      r1,#6                 ;1096
000022  dbf1              BLT      |L19.8|
000024  2000              MOVS     r0,#0                 ;1105
000026  e7f8              B        |L19.26|
;;;1107   
                          ENDP

                  |L19.40|
                          DCD      SwInformation+0x8

                          AREA ||i.masterSlaveControl||, CODE, READONLY, ALIGN=2

                  masterSlaveControl PROC
;;;1109   
;;;1110   void masterSlaveControl(void)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;1111   {
;;;1112       uint8_t i,j,masterID = 0;
000004  2000              MOVS     r0,#0
000006  9002              STR      r0,[sp,#8]
;;;1113       static uint8_t msCurState=0,msLastState=0;
;;;1114   	//char testBuf[100];
;;;1115   
;;;1116   	if(findMasterPort(&masterID))
000008  a802              ADD      r0,sp,#8
00000a  f7fffffe          BL       findMasterPort
00000e  2800              CMP      r0,#0
                  |L20.16|
000010  d072              BEQ      |L20.248|
;;;1117   	{
;;;1118   		if((PowerRecordObj[masterID].record_ValidPower/1000+0.5) >= SwInformation.masterLimitWatt)     //主用电器开启
000012  4959              LDR      r1,|L20.376|
000014  7848              LDRB     r0,[r1,#1]  ; SwInformation
000016  f7fffffe          BL       __aeabi_ui2d
00001a  4605              MOV      r5,r0
00001c  460e              MOV      r6,r1
00001e  f89d0008          LDRB     r0,[sp,#8]
000022  ebc000c0          RSB      r0,r0,r0,LSL #3
000026  4955              LDR      r1,|L20.380|
000028  eb010080          ADD      r0,r1,r0,LSL #2
00002c  6940              LDR      r0,[r0,#0x14]
00002e  f44f717a          MOV      r1,#0x3e8
000032  fb90faf1          SDIV     r10,r0,r1
000036  4650              MOV      r0,r10
000038  f7fffffe          BL       __aeabi_i2d
00003c  4607              MOV      r7,r0
00003e  2200              MOVS     r2,#0
000040  4b4f              LDR      r3,|L20.384|
000042  f7fffffe          BL       __aeabi_dadd
000046  462a              MOV      r2,r5
000048  4633              MOV      r3,r6
00004a  e9cd0100          STRD     r0,r1,[sp,#0]
00004e  f7fffffe          BL       __aeabi_cdrcmple
000052  d803              BHI      |L20.92|
;;;1119   	    {
;;;1120   	       msCurState = 1;
000054  2001              MOVS     r0,#1
000056  494b              LDR      r1,|L20.388|
000058  7008              STRB     r0,[r1,#0]
00005a  e002              B        |L20.98|
                  |L20.92|
;;;1121   		   //UdpDebugPrint("The master portID turned on!\n",sizeof("The master portID turned on!\n")-1);
;;;1122   	    }
;;;1123   	    else                            //主用电器关闭
;;;1124   	    {
;;;1125   	       msCurState = 0;
00005c  2000              MOVS     r0,#0
00005e  4949              LDR      r1,|L20.388|
000060  7008              STRB     r0,[r1,#0]
                  |L20.98|
;;;1126   		   //UdpDebugPrint("The master portID turned off!\n",sizeof("The master portID turned off!\n")-1);
;;;1127   	    }
;;;1128   
;;;1129   		if(msLastState != msCurState)
000062  4849              LDR      r0,|L20.392|
000064  7800              LDRB     r0,[r0,#0]  ; msLastState
000066  4947              LDR      r1,|L20.388|
000068  7809              LDRB     r1,[r1,#0]  ; msCurState
00006a  4288              CMP      r0,r1
00006c  d0d0              BEQ      |L20.16|
;;;1130   		{			
;;;1131   			if(msCurState == 1)
00006e  4845              LDR      r0,|L20.388|
000070  7800              LDRB     r0,[r0,#0]  ; msCurState
000072  2801              CMP      r0,#1
000074  d11e              BNE      |L20.180|
;;;1132   			{
;;;1133   				for(j=0;j<PORT_NUM;j++)
000076  2400              MOVS     r4,#0
000078  e019              B        |L20.174|
                  |L20.122|
;;;1134   				{
;;;1135   					if(SwInformation.PortInfor[j].msType==0 && (SwInformation.PortInfor[j].OnOffStatus==0))
00007a  eb040184          ADD      r1,r4,r4,LSL #2
00007e  483e              LDR      r0,|L20.376|
000080  3008              ADDS     r0,r0,#8
000082  eb000081          ADD      r0,r0,r1,LSL #2
000086  7c80              LDRB     r0,[r0,#0x12]
000088  b978              CBNZ     r0,|L20.170|
00008a  eb040184          ADD      r1,r4,r4,LSL #2
00008e  483a              LDR      r0,|L20.376|
000090  3008              ADDS     r0,r0,#8
000092  eb000081          ADD      r0,r0,r1,LSL #2
000096  7c40              LDRB     r0,[r0,#0x11]
000098  b938              CBNZ     r0,|L20.170|
;;;1136   					{
;;;1137   						SetPortState(j+1, 1);
00009a  1c61              ADDS     r1,r4,#1
00009c  b2c8              UXTB     r0,r1
00009e  2101              MOVS     r1,#1
0000a0  f7fffffe          BL       SetPortState
;;;1138   						SwInformation.portChangeReason = PORT_CHANGE_BY_MSCONTROL;
0000a4  2005              MOVS     r0,#5
0000a6  4934              LDR      r1,|L20.376|
0000a8  70c8              STRB     r0,[r1,#3]
                  |L20.170|
0000aa  1c60              ADDS     r0,r4,#1              ;1133
0000ac  b2c4              UXTB     r4,r0                 ;1133
                  |L20.174|
0000ae  2c06              CMP      r4,#6                 ;1133
0000b0  dbe3              BLT      |L20.122|
0000b2  e01e              B        |L20.242|
                  |L20.180|
;;;1139   						//UdpDebugPrint("\r\nNow excute master_slave On control",sizeof("\r\nNow excute master_slave On control")-1);
;;;1140   						//u_printf("Now turn on the port:%d\n",j);
;;;1141   					}
;;;1142   				}
;;;1143   				//UdpDebugPrint("\r\nNow turn on the device",sizeof("\r\nNow turn on the device")-1);
;;;1144   			}
;;;1145   			else
;;;1146   			{
;;;1147   				for(j=0;j<PORT_NUM;j++)
0000b4  2400              MOVS     r4,#0
0000b6  e01a              B        |L20.238|
                  |L20.184|
;;;1148   				{
;;;1149   					if(SwInformation.PortInfor[j].msType==0 && (0x01 == SwInformation.PortInfor[j].OnOffStatus))
0000b8  eb040184          ADD      r1,r4,r4,LSL #2
0000bc  482e              LDR      r0,|L20.376|
0000be  3008              ADDS     r0,r0,#8
0000c0  eb000081          ADD      r0,r0,r1,LSL #2
0000c4  7c80              LDRB     r0,[r0,#0x12]
0000c6  b980              CBNZ     r0,|L20.234|
0000c8  eb040184          ADD      r1,r4,r4,LSL #2
0000cc  482a              LDR      r0,|L20.376|
0000ce  3008              ADDS     r0,r0,#8
0000d0  eb000081          ADD      r0,r0,r1,LSL #2
0000d4  7c40              LDRB     r0,[r0,#0x11]
0000d6  2801              CMP      r0,#1
0000d8  d107              BNE      |L20.234|
;;;1150   	                {
;;;1151   	                    SetPortState(j+1, 0);
0000da  1c61              ADDS     r1,r4,#1
0000dc  b2c8              UXTB     r0,r1
0000de  2100              MOVS     r1,#0
0000e0  f7fffffe          BL       SetPortState
;;;1152   						SwInformation.portChangeReason = PORT_CHANGE_BY_MSCONTROL;
0000e4  2005              MOVS     r0,#5
0000e6  4924              LDR      r1,|L20.376|
0000e8  70c8              STRB     r0,[r1,#3]
                  |L20.234|
0000ea  1c60              ADDS     r0,r4,#1              ;1147
0000ec  b2c4              UXTB     r4,r0                 ;1147
                  |L20.238|
0000ee  2c06              CMP      r4,#6                 ;1147
0000f0  dbe2              BLT      |L20.184|
                  |L20.242|
;;;1153   	                    //UdpDebugPrint("\r\nNow excute master_slave Off control",sizeof("\r\nNow excute master_slave Off control")-1);
;;;1154   	                    //u_printf("Now turn off the port:%d\n",j);
;;;1155   	                }
;;;1156   	            }
;;;1157   	            //UdpDebugPrint("\r\nNow turn off the device",sizeof("\r\nNow turn off the device")-1);
;;;1158   			}
;;;1159   		#if 0
;;;1160   			memset(testBuf,0,sizeof(testBuf));
;;;1161   			sprintf(testBuf,"\n masterID = %d	masterLimitWatt = %d\t msLastState=%d\t msCurState=%d\n",masterID,SwInformation.masterLimitWatt,msLastState,msCurState);
;;;1162   			UdpDebugPrint(testBuf,sizeof(testBuf));
;;;1163   		#endif
;;;1164   
;;;1165   			for(i=0;i<PORT_NUM;i++)
0000f2  f04f0900          MOV      r9,#0
0000f6  e02d              B        |L20.340|
                  |L20.248|
0000f8  e03b              B        |L20.370|
                  |L20.250|
;;;1166   		    {
;;;1167   		        if(SwInformation.PortInfor[i].OnOffStatus)
0000fa  eb090189          ADD      r1,r9,r9,LSL #2
0000fe  481e              LDR      r0,|L20.376|
000100  3008              ADDS     r0,r0,#8
000102  eb000081          ADD      r0,r0,r1,LSL #2
000106  7c40              LDRB     r0,[r0,#0x11]
000108  b170              CBZ      r0,|L20.296|
;;;1168   		        {
;;;1169   		            SwOnOffData |= SwInformation.PortInfor[i].OnOffStatus<<i;
00010a  eb090189          ADD      r1,r9,r9,LSL #2
00010e  481a              LDR      r0,|L20.376|
000110  3008              ADDS     r0,r0,#8
000112  eb000081          ADD      r0,r0,r1,LSL #2
000116  7c40              LDRB     r0,[r0,#0x11]
000118  fa00f009          LSL      r0,r0,r9
00011c  491b              LDR      r1,|L20.396|
00011e  7809              LDRB     r1,[r1,#0]  ; SwOnOffData
000120  4308              ORRS     r0,r0,r1
000122  491a              LDR      r1,|L20.396|
000124  7008              STRB     r0,[r1,#0]
000126  e011              B        |L20.332|
                  |L20.296|
;;;1170   		        }
;;;1171   		        else
;;;1172   		        {
;;;1173   		            SwOnOffData &= ~((!SwInformation.PortInfor[i].OnOffStatus)<<i);
000128  eb090189          ADD      r1,r9,r9,LSL #2
00012c  4812              LDR      r0,|L20.376|
00012e  3008              ADDS     r0,r0,#8
000130  eb000081          ADD      r0,r0,r1,LSL #2
000134  7c40              LDRB     r0,[r0,#0x11]
000136  b908              CBNZ     r0,|L20.316|
000138  2001              MOVS     r0,#1
00013a  e000              B        |L20.318|
                  |L20.316|
00013c  2000              MOVS     r0,#0
                  |L20.318|
00013e  fa00f009          LSL      r0,r0,r9
000142  4912              LDR      r1,|L20.396|
000144  7809              LDRB     r1,[r1,#0]  ; SwOnOffData
000146  4381              BICS     r1,r1,r0
000148  4810              LDR      r0,|L20.396|
00014a  7001              STRB     r1,[r0,#0]
                  |L20.332|
00014c  f1090001          ADD      r0,r9,#1              ;1165
000150  f00009ff          AND      r9,r0,#0xff           ;1165
                  |L20.340|
000154  f1b90f06          CMP      r9,#6                 ;1165
000158  dbcf              BLT      |L20.250|
;;;1174   		        }
;;;1175   		    }
;;;1176   
;;;1177   	        UsartControlPortOnOff(); 
00015a  f7fffffe          BL       UsartControlPortOnOff
;;;1178   			msleep(500);
00015e  f44f70fa          MOV      r0,#0x1f4
000162  f7fffffe          BL       hf_thread_delay
;;;1179   			UsartControlPortOnOff(); 
000166  f7fffffe          BL       UsartControlPortOnOff
;;;1180   			msLastState = msCurState;
00016a  4806              LDR      r0,|L20.388|
00016c  7800              LDRB     r0,[r0,#0]  ; msCurState
00016e  4906              LDR      r1,|L20.392|
000170  7008              STRB     r0,[r1,#0]
                  |L20.370|
;;;1181   
;;;1182   		}
;;;1183   	}
;;;1184           
;;;1185   	//UdpDebugPrint("\r\nNow excute master_slave control",sizeof("\r\nNow excute master_slave control")-1);
;;;1186   }
000172  e8bd8ffe          POP      {r1-r11,pc}
;;;1187   
                          ENDP

000176  0000              DCW      0x0000
                  |L20.376|
                          DCD      SwInformation
                  |L20.380|
                          DCD      PowerRecordObj
                  |L20.384|
                          DCD      0x3fe00000
                  |L20.388|
                          DCD      msCurState
                  |L20.392|
                          DCD      msLastState
                  |L20.396|
                          DCD      SwOnOffData

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  UdpAckMsg
                          %        1404
                  PhoneSockAddr
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  UdpServerArr
000000  15000000          DCB      0x15,0x00,0x00,0x00
                          DCD      UdpSetHostSlave
000008  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ReportUdpBroadcast
000010  14000000          DCB      0x14,0x00,0x00,0x00
                          DCD      Udp_TurnOnOffSwitch
000018  18000000          DCB      0x18,0x00,0x00,0x00
                          DCD      UdpModifyName
000020  1c000000          DCB      0x1c,0x00,0x00,0x00
                          DCD      UdpRelatedControlSwitch
000028  1a000000          DCB      0x1a,0x00,0x00,0x00
                          DCD      UdpSetDevReboot
000030  1e000000          DCB      0x1e,0x00,0x00,0x00
                          DCD      UdpRestartMachine
000038  33000000          DCB      0x33,0x00,0x00,0x00
                          DCD      UdpUpdateAppFwAsUrl
000040  47000000          DCB      0x47,0x00,0x00,0x00
                          DCD      UDPSetWifiMode
000048  48000000          DCB      0x48,0x00,0x00,0x00
                          DCD      UdpScanNearbyWifiSignal
000050  4a000000          DCB      0x4a,0x00,0x00,0x00
                          DCD      UdpModifyProductSn
000058  4b000000          DCB      0x4b,0x00,0x00,0x00
                          DCD      UdpCalibratePowerConsume
000060  5a000000          DCB      0x5a,0x00,0x00,0x00
                          DCD      UdpGetPowerConsume
000068  81000000          DCB      0x81,0x00,0x00,0x00
                          DCD      UdpUpdateAppFwAsSlave
000070  7b227265          DCB      0x7b,0x22,0x72,0x65
000074  73706f6e          DCB      0x73,0x70,0x6f,0x6e
000078  7365223a          DCB      0x73,0x65,0x22,0x3a
00007c  25582c22          DCB      0x25,0x58,0x2c,0x22
000080  64617461          DCB      0x64,0x61,0x74,0x61
000084  223a7b22          DCB      0x22,0x3a,0x7b,0x22
000088  736e223a          DCB      0x73,0x6e,0x22,0x3a
00008c  22257322          DCB      0x22,0x25,0x73,0x22
000090  2c226e61          DCB      0x2c,0x22,0x6e,0x61
000094  6d65223a          DCB      0x6d,0x65,0x22,0x3a
000098  22257322          DCB      0x22,0x25,0x73,0x22
00009c  2c226d61          DCB      0x2c,0x22,0x6d,0x61
0000a0  63223a22          DCB      0x63,0x22,0x3a,0x22
0000a4  25303258          DCB      0x25,0x30,0x32,0x58
0000a8  3a253032          DCB      0x3a,0x25,0x30,0x32
0000ac  583a2530          DCB      0x58,0x3a,0x25,0x30
0000b0  32583a25          DCB      0x32,0x58,0x3a,0x25
0000b4  3032583a          DCB      0x30,0x32,0x58,0x3a
0000b8  25303258          DCB      0x25,0x30,0x32,0x58
0000bc  3a253032          DCB      0x3a,0x25,0x30,0x32
0000c0  58222c22          DCB      0x58,0x22,0x2c,0x22
0000c4  73616b22          DCB      0x73,0x61,0x6b,0x22
0000c8  3a222573          DCB      0x3a,0x22,0x25,0x73
0000cc  222c2272          DCB      0x22,0x2c,0x22,0x72
0000d0  65676964          DCB      0x65,0x67,0x69,0x64
0000d4  223a2225          DCB      0x22,0x3a,0x22,0x25
0000d8  73222c22          DCB      0x73,0x22,0x2c,0x22
0000dc  69734765          DCB      0x69,0x73,0x47,0x65
0000e0  74526567          DCB      0x74,0x52,0x65,0x67
0000e4  6964223a          DCB      0x69,0x64,0x22,0x3a
0000e8  25642c22          DCB      0x25,0x64,0x2c,0x22
0000ec  69734d61          DCB      0x69,0x73,0x4d,0x61
0000f0  696e5376          DCB      0x69,0x6e,0x53,0x76
0000f4  724f4b22          DCB      0x72,0x4f,0x4b,0x22
0000f8  3a25642c          DCB      0x3a,0x25,0x64,0x2c
0000fc  224d6169          DCB      0x22,0x4d,0x61,0x69
000100  6e537665          DCB      0x6e,0x53,0x76,0x65
000104  4950223a          DCB      0x49,0x50,0x22,0x3a
000108  22253038          DCB      0x22,0x25,0x30,0x38
00010c  58222c22          DCB      0x58,0x22,0x2c,0x22
000110  4d61696e          DCB      0x4d,0x61,0x69,0x6e
000114  53767250          DCB      0x53,0x76,0x72,0x50
000118  6f727422          DCB      0x6f,0x72,0x74,0x22
00011c  3a222578          DCB      0x3a,0x22,0x25,0x78
000120  222c2274          DCB      0x22,0x2c,0x22,0x74
000124  696d6522          DCB      0x69,0x6d,0x65,0x22
000128  3a25642c          DCB      0x3a,0x25,0x64,0x2c
00012c  22766572          DCB      0x22,0x76,0x65,0x72
000130  223a2225          DCB      0x22,0x3a,0x22,0x25
000134  642e2530          DCB      0x64,0x2e,0x25,0x30
000138  3264227d          DCB      0x32,0x64,0x22,0x7d
00013c  7d00              DCB      0x7d,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  isDevReg
000000  00                DCB      0x00
                  keyFactorySuccess
000001  00                DCB      0x00
                  RuleReportMark
000002  00                DCB      0x00
                  reportCountDownMark
000003  00                DCB      0x00
                  reportMasterSlaveInfo
000004  00                DCB      0x00
                  reportRebootInfo
000005  00                DCB      0x00
                  savePhoneIp
000006  0000              DCB      0x00,0x00
                  lastPackID
                          DCD      0x00000000
                  msCurState
00000c  00                DCB      0x00
                  msLastState
00000d  00                DCB      0x00
