; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\tickclock.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\tickclock.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=494 -I../sdk/1.50/include/ -I../inc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -D__KEIL_MDK__ -D__LPB100__ --enum_is_int --omf_browse=.\output\tickclock.crf ..\src\TickClock.c]
                          THUMB

                          AREA ||i.ReportHourData||, CODE, READONLY, ALIGN=2

                  ReportHourData PROC
;;;212    *******************************************************************************/ 
;;;213    void ReportHourData(void)
000000  4809              LDR      r0,|L1.40|
;;;214    {
;;;215        if(DevTimeObj.NowTimeSec>=reportHourTime && (reportHourTime!=0))
000002  6ac0              LDR      r0,[r0,#0x2c]  ; DevTimeObj
000004  4909              LDR      r1,|L1.44|
000006  6809              LDR      r1,[r1,#0]  ; reportHourTime
000008  4288              CMP      r0,r1
00000a  d30b              BCC      |L1.36|
00000c  4807              LDR      r0,|L1.44|
00000e  6800              LDR      r0,[r0,#0]  ; reportHourTime
000010  b140              CBZ      r0,|L1.36|
;;;216        {  
;;;217            reportHourTime = 0;
000012  2000              MOVS     r0,#0
000014  4905              LDR      r1,|L1.44|
000016  6008              STR      r0,[r1,#0]  ; reportHourTime
;;;218             SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_SEND_BIT_22_HOUR_DATA_CMD);
000018  4805              LDR      r0,|L1.48|
00001a  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
00001c  f4400080          ORR      r0,r0,#0x400000
000020  4903              LDR      r1,|L1.48|
000022  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
                  |L1.36|
;;;219            //u_printf("reportHourTime = %d    DevTimeObj.NowTimeSec=%ld\n",reportHourTime,DevTimeObj.NowTimeSec);         
;;;220        }  
;;;221    }
000024  4770              BX       lr
;;;222    
                          ENDP

000026  0000              DCW      0x0000
                  |L1.40|
                          DCD      DevTimeObj
                  |L1.44|
                          DCD      reportHourTime
                  |L1.48|
                          DCD      FwUpdateStatusObj

                          AREA ||i.ShowWorkMode||, CODE, READONLY, ALIGN=2

                  ShowWorkMode PROC
;;;431    
;;;432    void ShowWorkMode(void)
000000  b510              PUSH     {r4,lr}
;;;433    {
;;;434    #if 0
;;;435        if(0x00 == isBitSet(DevStatusObj.LedShowStatus, WIFI_LED_SHOW_1_BIT))
;;;436        {
;;;437            return;
;;;438        }
;;;439        ClrBit(DevStatusObj.LedShowStatus, WIFI_LED_SHOW_1_BIT);
;;;440    
;;;441        if(AP_MODE_LED == DevModeStatus)
;;;442        {
;;;443            LedBlink(2);
;;;444        }
;;;445    #endif
;;;446    
;;;447        if(isBitSet(DevStatusObj.LedShowStatus, WIFI_LED_SHOW_0_BIT)) 
000002  4804              LDR      r0,|L2.20|
000004  7800              LDRB     r0,[r0,#0]  ; DevStatusObj
000006  f0100f01          TST      r0,#1
00000a  d002              BEQ      |L2.18|
;;;448        {
;;;449            LedBlink(1);
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       LedBlink
                  |L2.18|
;;;450        }
;;;451    }
000012  bd10              POP      {r4,pc}
;;;452    /*******************************************************************************
                          ENDP

                  |L2.20|
                          DCD      DevStatusObj

                          AREA ||i.SysTime_GetTime||, CODE, READONLY, ALIGN=2

                  SysTime_GetTime PROC
;;;99     uint8_t testMark = 0;
;;;100    extern void SysTime_GetTime(void) 
000000  b510              PUSH     {r4,lr}
;;;101    {
;;;102        static int  Read8209TimeCtl = 100;
;;;103        //char testBuf[100] = {0};
;;;104    
;;;105        #if  !defined(__DS1302_RTC_ENABLE__)  
;;;106    	time_t      iTime;
;;;107        struct tm   *pTime;
;;;108    	#endif 
;;;109        
;;;110        if(isBitSet(FwUpdateStatusObj.TimelyCheck, TIMELY_CKECK_BIT_30_IS_SEC_TICK))
000002  483e              LDR      r0,|L3.252|
000004  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
000006  f0104f80          TST      r0,#0x40000000
00000a  d075              BEQ      |L3.248|
;;;111        {
;;;112            ClrBit(FwUpdateStatusObj.TimelyCheck, TIMELY_CKECK_BIT_30_IS_SEC_TICK); 
00000c  483b              LDR      r0,|L3.252|
00000e  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
000010  f0204080          BIC      r0,r0,#0x40000000
000014  4939              LDR      r1,|L3.252|
000016  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
;;;113            // 
;;;114           #if  defined(__DS1302_RTC_ENABLE__) 
;;;115            get_rtctime(&DevTimeObj.NowTimeTm);
000018  4839              LDR      r0,|L3.256|
00001a  f7fffffe          BL       get_rtctime
;;;116            #else 
;;;117        	iTime                   = (time_t)SysTimeObj.SysUnixTime;            //获取当前RTC时间 
;;;118            pTime                   = localtime(&iTime);                         //将当前RTC时间转换成struct tm时间 
;;;119            pTime->tm_year         += 1900;
;;;120            pTime->tm_mon          += 1;                                         //标准的struct tm月份范围为:0-11,将其转换成用户时间
;;;121            DevTimeObj.NowTimeTm    = *pTime; 
;;;122            DevTimeObj.NowTimeSec   = SysTimeObj.SysUnixTime;
;;;123           #endif 
;;;124    	   
;;;125            //calHourPowerTime++;   
;;;126            Read8209TimeCtl++;
00001e  4839              LDR      r0,|L3.260|
000020  6800              LDR      r0,[r0,#0]  ; Read8209TimeCtl
000022  1c40              ADDS     r0,r0,#1
000024  4937              LDR      r1,|L3.260|
000026  6008              STR      r0,[r1,#0]  ; Read8209TimeCtl
;;;127            CheckSwState();
000028  f7fffffe          BL       CheckSwState
;;;128    
;;;129    	#ifndef TEST	
;;;130    		if(DevTimeObj.NowTimeTm.tm_min==0 && DevTimeObj.NowTimeTm.tm_sec<5)			//每小时统计一次功耗
00002c  4834              LDR      r0,|L3.256|
00002e  6840              LDR      r0,[r0,#4]  ; DevTimeObj
000030  b948              CBNZ     r0,|L3.70|
000032  4833              LDR      r0,|L3.256|
000034  6800              LDR      r0,[r0,#0]  ; DevTimeObj
000036  2805              CMP      r0,#5
000038  da05              BGE      |L3.70|
;;;131    		{
;;;132    			SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_CKECK_BIT_9_IS_HOURS_DATA_CMD);
00003a  4830              LDR      r0,|L3.252|
00003c  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
00003e  f4407000          ORR      r0,r0,#0x200
000042  492e              LDR      r1,|L3.252|
000044  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
                  |L3.70|
;;;133    		}
;;;134         
;;;135            if(Read8209TimeCtl>=130)
000046  482f              LDR      r0,|L3.260|
000048  6800              LDR      r0,[r0,#0]  ; Read8209TimeCtl
00004a  2882              CMP      r0,#0x82
00004c  db1a              BLT      |L3.132|
;;;136            {
;;;137                if(DevTimeObj.NowTimeTm.tm_min<2 && reportHourTime==0)			//每小时上报一次功耗
00004e  482c              LDR      r0,|L3.256|
000050  6840              LDR      r0,[r0,#4]  ; DevTimeObj
000052  2802              CMP      r0,#2
000054  da16              BGE      |L3.132|
000056  482c              LDR      r0,|L3.264|
000058  6800              LDR      r0,[r0,#0]  ; reportHourTime
00005a  b998              CBNZ     r0,|L3.132|
;;;138                { 
;;;139                    Read8209TimeCtl = 0;
00005c  2000              MOVS     r0,#0
00005e  4929              LDR      r1,|L3.260|
000060  6008              STR      r0,[r1,#0]  ; Read8209TimeCtl
;;;140                    srand(DevTimeObj.NowTimeSec);
000062  4927              LDR      r1,|L3.256|
000064  6ac8              LDR      r0,[r1,#0x2c]  ; DevTimeObj
000066  f7fffffe          BL       srand
;;;141                    reportHourTime = DevTimeObj.NowTimeSec+rand()%110+10;				//整点随机两分钟内上报
00006a  f7fffffe          BL       rand
00006e  216e              MOVS     r1,#0x6e
000070  fb90f2f1          SDIV     r2,r0,r1
000074  fb010012          MLS      r0,r1,r2,r0
000078  4921              LDR      r1,|L3.256|
00007a  6ac9              LDR      r1,[r1,#0x2c]  ; DevTimeObj
00007c  4408              ADD      r0,r0,r1
00007e  300a              ADDS     r0,r0,#0xa
000080  4921              LDR      r1,|L3.264|
000082  6008              STR      r0,[r1,#0]  ; reportHourTime
                  |L3.132|
;;;142                }
;;;143            }
;;;144    	#else
;;;145    		if((DevTimeObj.NowTimeTm.tm_min%5 == 0) && DevTimeObj.NowTimeTm.tm_sec<5)			//每5分钟统计一次功耗
;;;146    		{
;;;147    			SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_CKECK_BIT_9_IS_HOURS_DATA_CMD);
;;;148    		}
;;;149    	
;;;150            if(Read8209TimeCtl>=70)
;;;151            {
;;;152                if((DevTimeObj.NowTimeTm.tm_min%5 ==0) && reportHourTime==0)
;;;153                { 
;;;154                    Read8209TimeCtl = 0;
;;;155                    srand(DevTimeObj.NowTimeSec);
;;;156                    reportHourTime = DevTimeObj.NowTimeSec+rand()%50+10;				//整点随机两分钟内上报
;;;157                    //u_printf("set:reportHourTime = %d   rand=%d\n",reportHourTime,rand()%300);
;;;158                }
;;;159            }
;;;160    	#endif
;;;161    		ReportHourData();                                               //查询上报小时功耗时间点是否到达
000084  f7fffffe          BL       ReportHourData
;;;162    
;;;163         
;;;164         	if(RelatedCtrl.ctlMark)
000088  4820              LDR      r0,|L3.268|
00008a  7880              LDRB     r0,[r0,#2]  ; RelatedCtrl
00008c  b350              CBZ      r0,|L3.228|
;;;165    	    {
;;;166    	   		//RelatedCtrl.ctlTime++;
;;;167    
;;;168    			//sprintf(testBuf,"ctlTime=%d\t holdTime=%d\n",RelatedCtrl.ctlTime,RelatedCtrl.holdTime*60);
;;;169    			//UdpDebugPrint(testBuf, sizeof(testBuf));
;;;170    			//u_printf("curTime=%ld\t ctlTime=%ld\t holdTime=%d\n",DevTimeObj.CurTimeSec,RelatedCtrl.ctlTime,RelatedCtrl.holdTime*60);
;;;171    			
;;;172    			if(DevTimeObj.CurTimeSec >= RelatedCtrl.delayTime+RelatedCtrl.ctlTime)
00008e  481f              LDR      r0,|L3.268|
000090  6840              LDR      r0,[r0,#4]  ; RelatedCtrl
000092  491e              LDR      r1,|L3.268|
000094  68c9              LDR      r1,[r1,#0xc]  ; RelatedCtrl
000096  4408              ADD      r0,r0,r1
000098  4919              LDR      r1,|L3.256|
00009a  6b09              LDR      r1,[r1,#0x30]  ; DevTimeObj
00009c  4288              CMP      r0,r1
00009e  d809              BHI      |L3.180|
;;;173    			{
;;;174    				if(!RelatedCtrl.afterMark)
0000a0  481a              LDR      r0,|L3.268|
0000a2  78c0              LDRB     r0,[r0,#3]  ; RelatedCtrl
0000a4  b930              CBNZ     r0,|L3.180|
;;;175    				{
;;;176    					Switch_delayCtl(RelatedCtrl.ctrStates);
0000a6  4919              LDR      r1,|L3.268|
0000a8  7848              LDRB     r0,[r1,#1]  ; RelatedCtrl
0000aa  f7fffffe          BL       Switch_delayCtl
;;;177    					RelatedCtrl.afterMark = 1;
0000ae  2001              MOVS     r0,#1
0000b0  4916              LDR      r1,|L3.268|
0000b2  70c8              STRB     r0,[r1,#3]
                  |L3.180|
;;;178    
;;;179    					//UdpDebugPrint("Now excute related control!\r\n",sizeof("Now excute related control!\r\n")-1);
;;;180    				}		
;;;181    			}
;;;182    
;;;183    			if(RelatedCtrl.holdTime > 0)
0000b4  4815              LDR      r0,|L3.268|
0000b6  6880              LDR      r0,[r0,#8]  ; RelatedCtrl
0000b8  2800              CMP      r0,#0
0000ba  dd13              BLE      |L3.228|
;;;184    			{
;;;185    				if(DevTimeObj.CurTimeSec >= RelatedCtrl.holdTime+RelatedCtrl.delayTime+RelatedCtrl.ctlTime)
0000bc  4813              LDR      r0,|L3.268|
0000be  6880              LDR      r0,[r0,#8]  ; RelatedCtrl
0000c0  4912              LDR      r1,|L3.268|
0000c2  6849              LDR      r1,[r1,#4]  ; RelatedCtrl
0000c4  4408              ADD      r0,r0,r1
0000c6  4911              LDR      r1,|L3.268|
0000c8  68c9              LDR      r1,[r1,#0xc]  ; RelatedCtrl
0000ca  4408              ADD      r0,r0,r1
0000cc  490c              LDR      r1,|L3.256|
0000ce  6b09              LDR      r1,[r1,#0x30]  ; DevTimeObj
0000d0  4288              CMP      r0,r1
0000d2  d807              BHI      |L3.228|
;;;186    				{
;;;187    					Switch_delayCtl(RelatedCtrl.preStates);
0000d4  490d              LDR      r1,|L3.268|
0000d6  7808              LDRB     r0,[r1,#0]  ; RelatedCtrl
0000d8  f7fffffe          BL       Switch_delayCtl
;;;188    					RelatedCtrl.ctlMark = 0;
0000dc  2000              MOVS     r0,#0
0000de  490b              LDR      r1,|L3.268|
0000e0  7088              STRB     r0,[r1,#2]
;;;189    					RelatedCtrl.ctlTime = 0;
0000e2  60c8              STR      r0,[r1,#0xc]  ; RelatedCtrl
                  |L3.228|
;;;190    
;;;191    					//UdpDebugPrint("Now recover related control!\r\n",sizeof("Now recover related control!\r\n")-1);
;;;192    				}
;;;193    			}
;;;194    	    }
;;;195    
;;;196         
;;;197            if(0x00 == (Read8209TimeCtl%5))                                  
0000e4  4807              LDR      r0,|L3.260|
0000e6  6800              LDR      r0,[r0,#0]  ; Read8209TimeCtl
0000e8  2105              MOVS     r1,#5
0000ea  fb90f2f1          SDIV     r2,r0,r1
0000ee  fb010012          MLS      r0,r1,r2,r0
0000f2  b908              CBNZ     r0,|L3.248|
;;;198            {
;;;199                ModifyDevMac();
0000f4  f7fffffe          BL       ModifyDevMac
                  |L3.248|
;;;200            }
;;;201    
;;;202        }      
;;;203    }
0000f8  bd10              POP      {r4,pc}
;;;204    
                          ENDP

0000fa  0000              DCW      0x0000
                  |L3.252|
                          DCD      FwUpdateStatusObj
                  |L3.256|
                          DCD      DevTimeObj
                  |L3.260|
                          DCD      Read8209TimeCtl
                  |L3.264|
                          DCD      reportHourTime
                  |L3.268|
                          DCD      RelatedCtrl

                          AREA ||i.app_timer_callback1||, CODE, READONLY, ALIGN=2

                  app_timer_callback1 PROC
;;;229    *******************************************************************************/ 
;;;230    void USER_FUNC app_timer_callback1( hftimer_handle_t htimer )
000000  b570              PUSH     {r4-r6,lr}
;;;231    { 
000002  4605              MOV      r5,r0
;;;232    	#if(PORT_NUM == 6)
;;;233    	uint8_t i = 0;
000004  2400              MOVS     r4,#0
;;;234    	#endif
;;;235        static int TimerCount = 0; 	
;;;236    	static uint8_t readDataStatusMark = 0;
;;;237    	//char testBuf[100] = {0};
;;;238    	
;;;239    
;;;240        if(isBitSet(FwUpdateStatusObj.TimelyCheck, TIMELY_CKECK_BIT_6_IS_REBOOT_CMD)) 
000006  489b              LDR      r0,|L4.628|
000008  7800              LDRB     r0,[r0,#0]  ; FwUpdateStatusObj
00000a  f0100f40          TST      r0,#0x40
00000e  d004              BEQ      |L4.26|
;;;241        { 
;;;242            FwUpdateStatusObj.RebootCountDown--; 
000010  4898              LDR      r0,|L4.628|
000012  7980              LDRB     r0,[r0,#6]  ; FwUpdateStatusObj
000014  1e40              SUBS     r0,r0,#1
000016  4997              LDR      r1,|L4.628|
000018  7188              STRB     r0,[r1,#6]
                  |L4.26|
;;;243        }
;;;244    
;;;245    #if 1
;;;246    	if(0x00 == (TimerCount%2))     //每2S检测一次wifi状态
00001a  4997              LDR      r1,|L4.632|
00001c  6808              LDR      r0,[r1,#0]  ; TimerCount
00001e  eb0071d0          ADD      r1,r0,r0,LSR #31
000022  1049              ASRS     r1,r1,#1
000024  ebb00141          SUBS     r1,r0,r1,LSL #1
000028  d101              BNE      |L4.46|
;;;247    	{
;;;248    		CheckDevMode();
00002a  f7fffffe          BL       CheckDevMode
                  |L4.46|
;;;249    	}
;;;250    #endif
;;;251    	
;;;252    
;;;253    		readDataStatusMark = !readDataStatusMark;
00002e  4893              LDR      r0,|L4.636|
000030  7800              LDRB     r0,[r0,#0]  ; readDataStatusMark
000032  b908              CBNZ     r0,|L4.56|
000034  2001              MOVS     r0,#1
000036  e000              B        |L4.58|
                  |L4.56|
000038  2000              MOVS     r0,#0
                  |L4.58|
00003a  4990              LDR      r1,|L4.636|
00003c  7008              STRB     r0,[r1,#0]
;;;254           #if (PORT_NUM==6)
;;;255    	/************************每2s交替读取一次端口数据和状态值,其他命令的下发优先********************************/	
;;;256    		if(readDataStatusMark)
00003e  4608              MOV      r0,r1
000040  7800              LDRB     r0,[r0,#0]  ; readDataStatusMark
000042  b140              CBZ      r0,|L4.86|
;;;257    		{
;;;258    			//UdpDebugPrint("Now we get the switch info!!!",strlen("Now we get the switch info!!!"));
;;;259    			UsartReadPortData();		//通过串口查询从机搜寻的实时数据
000044  f7fffffe          BL       UsartReadPortData
;;;260    			if(TimerCount >= 5)
000048  488b              LDR      r0,|L4.632|
00004a  6800              LDR      r0,[r0,#0]  ; TimerCount
00004c  2805              CMP      r0,#5
00004e  db04              BLT      |L4.90|
;;;261    		    {
;;;262    				masterSlaveControl();		//主从控制
000050  f7fffffe          BL       masterSlaveControl
000054  e001              B        |L4.90|
                  |L4.86|
;;;263    			}
;;;264    		}
;;;265    		else
;;;266    		{
;;;267    			//getStatusMark = 1;
;;;268    			UsartReadPortstatus();		  //每秒一次读取端口的开关状态
000056  f7fffffe          BL       UsartReadPortstatus
                  |L4.90|
;;;269    		}
;;;270    			
;;;271          #elif (PORT_NUM==1)
;;;272    		   RN8209_READ();
;;;273          #endif
;;;274    	  OverCurrentProtectPoll();   //过流保护
00005a  f7fffffe          BL       OverCurrentProtectPoll
;;;275    
;;;276    	
;;;277    
;;;278    
;;;279    	if(0x00 == (TimerCount%5))     //每5S上报规则信息
00005e  4886              LDR      r0,|L4.632|
000060  6800              LDR      r0,[r0,#0]  ; TimerCount
000062  2105              MOVS     r1,#5
000064  fb90f2f1          SDIV     r2,r0,r1
000068  fb010012          MLS      r0,r1,r2,r0
00006c  2800              CMP      r0,#0
00006e  d149              BNE      |L4.260|
;;;280        { 
;;;281    		
;;;282            SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_CKECK_BIT_0_IS_REG); 
000070  4880              LDR      r0,|L4.628|
000072  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
000074  f0400001          ORR      r0,r0,#1
000078  497e              LDR      r1,|L4.628|
00007a  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
;;;283    
;;;284    		
;;;285            
;;;286            if((surplusRecordCount>0) && (isBitSet(iStaticsFlag, WIFI_WORK_NORMAL)))
00007c  4880              LDR      r0,|L4.640|
00007e  8800              LDRH     r0,[r0,#0]  ; surplusRecordCount
000080  2800              CMP      r0,#0
000082  dd09              BLE      |L4.152|
000084  487f              LDR      r0,|L4.644|
000086  7800              LDRB     r0,[r0,#0]  ; iStaticsFlag
000088  f0100f02          TST      r0,#2
00008c  d004              BEQ      |L4.152|
;;;287    		{
;;;288    			SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_SEND_BIT_21_ADD_HOUR_DATA_CMD);		  //上报历史功耗
00008e  4608              MOV      r0,r1
000090  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
000092  f4401000          ORR      r0,r0,#0x200000
000096  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
                  |L4.152|
;;;289    		}
;;;290    		
;;;291    		
;;;292        	if(RuleReportMark)
000098  487b              LDR      r0,|L4.648|
00009a  7800              LDRB     r0,[r0,#0]  ; RuleReportMark
00009c  b128              CBZ      r0,|L4.170|
;;;293        	{
;;;294            	SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_CKECK_BIT_7_IS_REPORT_RULE_CMD);
00009e  4875              LDR      r0,|L4.628|
0000a0  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
0000a2  f0400080          ORR      r0,r0,#0x80
0000a6  4973              LDR      r1,|L4.628|
0000a8  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
                  |L4.170|
;;;295        	}
;;;296    		if(reportCountDownMark)
0000aa  4878              LDR      r0,|L4.652|
0000ac  7800              LDRB     r0,[r0,#0]  ; reportCountDownMark
0000ae  b128              CBZ      r0,|L4.188|
;;;297    		{
;;;298    			SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_CKECK_BIT_15_REPORT_COUNTDOWN_CMD);
0000b0  4870              LDR      r0,|L4.628|
0000b2  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
0000b4  f4404000          ORR      r0,r0,#0x8000
0000b8  496e              LDR      r1,|L4.628|
0000ba  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
                  |L4.188|
;;;299    		}
;;;300    		if(reportMasterSlaveInfo)
0000bc  4874              LDR      r0,|L4.656|
0000be  7800              LDRB     r0,[r0,#0]  ; reportMasterSlaveInfo
0000c0  b128              CBZ      r0,|L4.206|
;;;301    		{
;;;302    			SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_CKECK_BIT_16_REPORT_MASTER_SLAVE_CMD);	
0000c2  486c              LDR      r0,|L4.628|
0000c4  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
0000c6  f4403080          ORR      r0,r0,#0x10000
0000ca  496a              LDR      r1,|L4.628|
0000cc  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
                  |L4.206|
;;;303    		}
;;;304    		if(reportRebootInfo)
0000ce  4871              LDR      r0,|L4.660|
0000d0  7800              LDRB     r0,[r0,#0]  ; reportRebootInfo
0000d2  b128              CBZ      r0,|L4.224|
;;;305    		{
;;;306    			SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_CKECK_BIT_17_REPORT_PORT_REBOOT_CMD);	
0000d4  4867              LDR      r0,|L4.628|
0000d6  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
0000d8  f4403000          ORR      r0,r0,#0x20000
0000dc  4965              LDR      r1,|L4.628|
0000de  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
                  |L4.224|
;;;307    		}
;;;308    		if(reportSecurityInfo)
0000e0  486d              LDR      r0,|L4.664|
0000e2  7800              LDRB     r0,[r0,#0]  ; reportSecurityInfo
0000e4  b128              CBZ      r0,|L4.242|
;;;309    		{
;;;310    			SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_REPORT_BIT_20_SECURITY_MODE_CMD);		
0000e6  4863              LDR      r0,|L4.628|
0000e8  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
0000ea  f4401080          ORR      r0,r0,#0x100000
0000ee  4961              LDR      r1,|L4.628|
0000f0  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
                  |L4.242|
;;;311    		}
;;;312    
;;;313    		if(!hasSynInfo)
0000f2  486a              LDR      r0,|L4.668|
0000f4  7800              LDRB     r0,[r0,#0]  ; hasSynInfo
0000f6  b928              CBNZ     r0,|L4.260|
;;;314    		{
;;;315    			SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_CKECK_BIT_12_IS_ALL_DATA_CMD);
0000f8  485e              LDR      r0,|L4.628|
0000fa  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
0000fc  f4405080          ORR      r0,r0,#0x1000
000100  495c              LDR      r1,|L4.628|
000102  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
                  |L4.260|
;;;316    		}
;;;317    	}				
;;;318    
;;;319        if(0x00 == (TimerCount%10))     //每10秒钟检测主、从服务器域名
000104  485c              LDR      r0,|L4.632|
000106  6800              LDR      r0,[r0,#0]  ; TimerCount
000108  210a              MOVS     r1,#0xa
00010a  fb90f2f1          SDIV     r2,r0,r1
00010e  fb010012          MLS      r0,r1,r2,r0
000112  b950              CBNZ     r0,|L4.298|
;;;320        { 
;;;321            SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_CKECK_BIT_1_IS_MAIN_DOMAIN);
000114  4857              LDR      r0,|L4.628|
000116  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
000118  f0400002          ORR      r0,r0,#2
00011c  4955              LDR      r1,|L4.628|
00011e  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
;;;322            SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_CKECK_BIT_3_IS_SUB_DOMAIN);
000120  4608              MOV      r0,r1
000122  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
000124  f0400008          ORR      r0,r0,#8
000128  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
                  |L4.298|
;;;323    
;;;324    		//PublicServer_SyncBaseInfoWithServer();				//同步设备信息
;;;325        } 
;;;326       
;;;327        if(0x00 == (TimerCount%30)) 
00012a  4853              LDR      r0,|L4.632|
00012c  6800              LDR      r0,[r0,#0]  ; TimerCount
00012e  211e              MOVS     r1,#0x1e
000130  fb90f2f1          SDIV     r2,r0,r1
000134  fb010012          MLS      r0,r1,r2,r0
000138  b9c8              CBNZ     r0,|L4.366|
;;;328        { 
;;;329        	
;;;330            SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_CKECK_BIT_8_IS_SYNC_RT_DATA_CMD);        
00013a  484e              LDR      r0,|L4.628|
00013c  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
00013e  f4407080          ORR      r0,r0,#0x100
000142  494c              LDR      r1,|L4.628|
000144  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
;;;331            SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_CKECK_BIT_4_IS_GET_SOCKETA_FD); 
000146  4608              MOV      r0,r1
000148  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
00014a  f0400010          ORR      r0,r0,#0x10
00014e  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
;;;332    
;;;333            if((IS_ON == isDevReg)&&(IS_ON == FwUpdateStatusObj.isSubSvrOK)) 
000150  4853              LDR      r0,|L4.672|
000152  7800              LDRB     r0,[r0,#0]  ; isDevReg
000154  2801              CMP      r0,#1
000156  d108              BNE      |L4.362|
000158  4608              MOV      r0,r1
00015a  7900              LDRB     r0,[r0,#4]  ; FwUpdateStatusObj
00015c  2801              CMP      r0,#1
00015e  d104              BNE      |L4.362|
;;;334    		{
;;;335    			heartBeatCount++;
000160  4850              LDR      r0,|L4.676|
000162  8800              LDRH     r0,[r0,#0]  ; heartBeatCount
000164  1c40              ADDS     r0,r0,#1
000166  494f              LDR      r1,|L4.676|
000168  8008              STRH     r0,[r1,#0]
                  |L4.362|
;;;336    		}
;;;337    		
;;;338    		ReadPowerFreq();												//读电源频率
00016a  f7fffffe          BL       ReadPowerFreq
                  |L4.366|
;;;339        } 
;;;340       
;;;341        if(0x00 == (TimerCount%60))
00016e  4842              LDR      r0,|L4.632|
000170  6800              LDR      r0,[r0,#0]  ; TimerCount
000172  213c              MOVS     r1,#0x3c
000174  fb90f2f1          SDIV     r2,r0,r1
000178  fb010012          MLS      r0,r1,r2,r0
00017c  2800              CMP      r0,#0
00017e  d14f              BNE      |L4.544|
;;;342        {
;;;343            SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_CKECK_BIT_10_ADD_REPORT_HOURS_DATA_CMD);   
000180  483c              LDR      r0,|L4.628|
000182  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
000184  f4406080          ORR      r0,r0,#0x400
000188  493a              LDR      r1,|L4.628|
00018a  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
;;;344    
;;;345    		SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_CKECK_BIT_18_REBOOT_CONTROL_CMD);					//检测是否执行端口Reboot		
00018c  4608              MOV      r0,r1
00018e  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
000190  f4402080          ORR      r0,r0,#0x40000
000194  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
;;;346    		SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_DETECTE_BIT_19_DEV_SECURITY_MODE_CMD); 
000196  4608              MOV      r0,r1
000198  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
00019a  f4402000          ORR      r0,r0,#0x80000
00019e  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
;;;347    
;;;348    		if(reportRTHourmark && !isReportRTHourSuccess)              //上报实时功耗未成功，则每分钟补报一次
0001a0  4841              LDR      r0,|L4.680|
0001a2  7800              LDRB     r0,[r0,#0]  ; reportRTHourmark
0001a4  b138              CBZ      r0,|L4.438|
0001a6  4841              LDR      r0,|L4.684|
0001a8  7800              LDRB     r0,[r0,#0]  ; isReportRTHourSuccess
0001aa  b920              CBNZ     r0,|L4.438|
;;;349            {
;;;350            	SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_SEND_BIT_22_HOUR_DATA_CMD);		  //上报当前小时功耗
0001ac  4608              MOV      r0,r1
0001ae  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
0001b0  f4400080          ORR      r0,r0,#0x400000
0001b4  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
                  |L4.438|
;;;351            }
;;;352    
;;;353    		if(SecurityModeExcute.intervalTime > 0)
0001b6  483e              LDR      r0,|L4.688|
0001b8  f9b00004          LDRSH    r0,[r0,#4]  ; SecurityModeExcute
0001bc  2800              CMP      r0,#0
0001be  dd1e              BLE      |L4.510|
;;;354    		{
;;;355    			SecurityModeExcute.intervalTime--;
0001c0  483b              LDR      r0,|L4.688|
0001c2  8880              LDRH     r0,[r0,#4]  ; SecurityModeExcute
0001c4  1e40              SUBS     r0,r0,#1
0001c6  b200              SXTH     r0,r0
0001c8  4939              LDR      r1,|L4.688|
0001ca  8088              STRH     r0,[r1,#4]
;;;356    			if(0 == SecurityModeExcute.intervalTime)
0001cc  4608              MOV      r0,r1
0001ce  8880              LDRH     r0,[r0,#4]  ; SecurityModeExcute
0001d0  b9a8              CBNZ     r0,|L4.510|
;;;357    			{
;;;358    				SecurityModeExcute.RunningMark = 0;
0001d2  2000              MOVS     r0,#0
0001d4  7088              STRB     r0,[r1,#2]
;;;359    				SecurityModeExcute.nextIntervalTime = 0;
0001d6  7048              STRB     r0,[r1,#1]
;;;360    
;;;361    			  #if(PORT_NUM == 6)
;;;362    			  {
;;;363    				while((i<PORT_NUM))
0001d8  e00a              B        |L4.496|
                  |L4.474|
;;;364    			    {
;;;365    			        if(SecurityMode.PortArr[i]==1)
0001da  4836              LDR      r0,|L4.692|
0001dc  5d00              LDRB     r0,[r0,r4]
0001de  2801              CMP      r0,#1
0001e0  d104              BNE      |L4.492|
;;;366    			        {	
;;;367    				          SetPortState(i+1,0);            				       
0001e2  1c61              ADDS     r1,r4,#1
0001e4  b2c8              UXTB     r0,r1
0001e6  2100              MOVS     r1,#0
0001e8  f7fffffe          BL       SetPortState
                  |L4.492|
;;;368    			    	}
;;;369    				
;;;370    			        i++;
0001ec  1c60              ADDS     r0,r4,#1
0001ee  b2c4              UXTB     r4,r0
                  |L4.496|
0001f0  2c06              CMP      r4,#6                 ;363
0001f2  dbf2              BLT      |L4.474|
;;;371    			    }  
;;;372    				msleep(200);
0001f4  20c8              MOVS     r0,#0xc8
0001f6  f7fffffe          BL       hf_thread_delay
;;;373    			    UsartControlPortOnOff(); 
0001fa  f7fffffe          BL       UsartControlPortOnOff
                  |L4.510|
;;;374    			  }
;;;375    			  #elif (PORT_NUM == 1)
;;;376    			  {
;;;377    			    if(SecurityMode.PortArr[0]==1)			//翻转对应的IO口
;;;378    			    {				
;;;379    			        Port_TurnOnOff(0);					
;;;380    					plug_updata = 1;
;;;381    			     }
;;;382    			  }
;;;383    			  #endif
;;;384    			}
;;;385    		}
;;;386    
;;;387    		if(SecurityModeExcute.RunningMark)
0001fe  482c              LDR      r0,|L4.688|
000200  7880              LDRB     r0,[r0,#2]  ; SecurityModeExcute
000202  b168              CBZ      r0,|L4.544|
;;;388    		{
;;;389    			if(SecurityModeExcute.nextIntervalTime > 0)
000204  482a              LDR      r0,|L4.688|
000206  7840              LDRB     r0,[r0,#1]  ; SecurityModeExcute
000208  2800              CMP      r0,#0
00020a  dd09              BLE      |L4.544|
;;;390    			{
;;;391    				SecurityModeExcute.nextIntervalTime--;
00020c  4828              LDR      r0,|L4.688|
00020e  7840              LDRB     r0,[r0,#1]  ; SecurityModeExcute
000210  1e40              SUBS     r0,r0,#1
000212  4927              LDR      r1,|L4.688|
000214  7048              STRB     r0,[r1,#1]
;;;392    				if(0 == SecurityModeExcute.nextIntervalTime)
000216  4608              MOV      r0,r1
000218  7840              LDRB     r0,[r0,#1]  ; SecurityModeExcute
00021a  b908              CBNZ     r0,|L4.544|
;;;393    				{
;;;394    					SecurityModeExcute.timeOut = 1;				//防盗时间超时
00021c  2001              MOVS     r0,#1
00021e  7008              STRB     r0,[r1,#0]
                  |L4.544|
;;;395    				}
;;;396    			}
;;;397    		}
;;;398    		
;;;399    
;;;400        }
;;;401    
;;;402    	if(0x00 == (TimerCount%120))
000220  4815              LDR      r0,|L4.632|
000222  6800              LDR      r0,[r0,#0]  ; TimerCount
000224  2178              MOVS     r1,#0x78
000226  fb90f2f1          SDIV     r2,r0,r1
00022a  fb010012          MLS      r0,r1,r2,r0
00022e  b910              CBNZ     r0,|L4.566|
;;;403    	{
;;;404    		recycleResolveDomain = 1;
000230  2001              MOVS     r0,#1
000232  4921              LDR      r1,|L4.696|
000234  7008              STRB     r0,[r1,#0]
                  |L4.566|
;;;405    	}
;;;406    
;;;407        if(!isGetRegid)
000236  4821              LDR      r0,|L4.700|
000238  7800              LDRB     r0,[r0,#0]  ; isGetRegid
00023a  b928              CBNZ     r0,|L4.584|
;;;408        {
;;;409    		 SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_SEND_BIT_23_BROADCAST_INFO_CMD);			//上报广播报信息
00023c  480d              LDR      r0,|L4.628|
00023e  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
000240  f4400000          ORR      r0,r0,#0x800000
000244  490b              LDR      r1,|L4.628|
000246  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
                  |L4.584|
;;;410        }
;;;411    	
;;;412        SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_CKECK_BIT_30_IS_SEC_TICK);
000248  480a              LDR      r0,|L4.628|
00024a  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
00024c  f0404080          ORR      r0,r0,#0x40000000
000250  4908              LDR      r1,|L4.628|
000252  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
;;;413        
;;;414        SetBit(FwUpdateStatusObj.TimelyCheck, TIMELY_EXCUTE_BIT_11_DEV_INIT);
000254  4608              MOV      r0,r1
000256  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
000258  f4406000          ORR      r0,r0,#0x800
00025c  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
;;;415        
;;;416        TimerCount++; 
00025e  4806              LDR      r0,|L4.632|
000260  6800              LDR      r0,[r0,#0]  ; TimerCount
000262  1c40              ADDS     r0,r0,#1
000264  4904              LDR      r1,|L4.632|
000266  6008              STR      r0,[r1,#0]  ; TimerCount
;;;417    
;;;418        //testMark++;
;;;419        
;;;420       #if  !defined(__DS1302_RTC_ENABLE__)  
;;;421        { 
;;;422            SysTimeObj.SysUnixTime++; 
;;;423            SysTimeObj.SysTimeCount++; 
;;;424    
;;;425        } 
;;;426       #endif
;;;427    
;;;428       testSec++;
000268  4815              LDR      r0,|L4.704|
00026a  6800              LDR      r0,[r0,#0]  ; testSec
00026c  1c40              ADDS     r0,r0,#1
00026e  4914              LDR      r1,|L4.704|
000270  6008              STR      r0,[r1,#0]  ; testSec
;;;429    } 
000272  bd70              POP      {r4-r6,pc}
;;;430    
                          ENDP

                  |L4.628|
                          DCD      FwUpdateStatusObj
                  |L4.632|
                          DCD      TimerCount
                  |L4.636|
                          DCD      readDataStatusMark
                  |L4.640|
                          DCD      surplusRecordCount
                  |L4.644|
                          DCD      iStaticsFlag
                  |L4.648|
                          DCD      RuleReportMark
                  |L4.652|
                          DCD      reportCountDownMark
                  |L4.656|
                          DCD      reportMasterSlaveInfo
                  |L4.660|
                          DCD      reportRebootInfo
                  |L4.664|
                          DCD      reportSecurityInfo
                  |L4.668|
                          DCD      hasSynInfo
                  |L4.672|
                          DCD      isDevReg
                  |L4.676|
                          DCD      heartBeatCount
                  |L4.680|
                          DCD      reportRTHourmark
                  |L4.684|
                          DCD      isReportRTHourSuccess
                  |L4.688|
                          DCD      SecurityModeExcute
                  |L4.692|
                          DCD      SecurityMode+0x2
                  |L4.696|
                          DCD      recycleResolveDomain
                  |L4.700|
                          DCD      isGetRegid
                  |L4.704|
                          DCD      testSec

                          AREA ||i.clock_timer_callback||, CODE, READONLY, ALIGN=2

                  clock_timer_callback PROC
;;;457    *******************************************************************************/ 
;;;458    void USER_FUNC clock_timer_callback( hftimer_handle_t htimer )
000000  b510              PUSH     {r4,lr}
;;;459    { 
000002  4604              MOV      r4,r0
;;;460        static int ClockCount = 0; 
;;;461        // 
;;;462        Key_DriveEngine(ClockCount); 
000004  4806              LDR      r0,|L5.32|
000006  6800              LDR      r0,[r0,#0]  ; ClockCount
000008  f7fffffe          BL       Key_DriveEngine
;;;463    
;;;464        ClockCount++; 
00000c  4804              LDR      r0,|L5.32|
00000e  6800              LDR      r0,[r0,#0]  ; ClockCount
000010  1c40              ADDS     r0,r0,#1
000012  4903              LDR      r1,|L5.32|
000014  6008              STR      r0,[r1,#0]  ; ClockCount
;;;465        // 
;;;466        #if  defined(__SCAN_KEY_IN_TICK_TIMER__)
;;;467        Key_Scan(); 
000016  f7fffffe          BL       Key_Scan
;;;468        Key_Poll(); 
00001a  f7fffffe          BL       Key_Poll
;;;469        #endif 
;;;470        
;;;471        //SetBit(DevStatusObj.LedShowStatus, WIFI_LED_SHOW_1_BIT);
;;;472    } 
00001e  bd10              POP      {r4,pc}
;;;473    /******************************************************************************* 
                          ENDP

                  |L5.32|
                          DCD      ClockCount

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  SysTimeObj
                          %        12

                          AREA ||.data||, DATA, ALIGN=2

                  testSec
                          DCD      0x00000000
                  reportHourTime
                          DCD      0x00000000
                  testMark
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  Read8209TimeCtl
                          DCD      0x00000064
                  TimerCount
                          DCD      0x00000000
                  readDataStatusMark
000014  00000000          DCB      0x00,0x00,0x00,0x00
                  ClockCount
                          DCD      0x00000000
