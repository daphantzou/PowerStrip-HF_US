; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\rttime.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\rttime.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=494 -I../sdk/1.50/include/ -I../inc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -D__KEIL_MDK__ -D__LPB100__ --enum_is_int --omf_browse=.\output\rttime.crf ..\src\RtTime.c]
                          THUMB

                          AREA ||i.GetCurTime||, CODE, READONLY, ALIGN=2

                  GetCurTime PROC
;;;79     *******************************************************************************/ 
;;;80     extern DevTimeType *GetCurTime(void)
000000  4800              LDR      r0,|L1.4|
;;;81     {
;;;82         return &DevTimeObj;
;;;83     }
000002  4770              BX       lr
;;;84     
                          ENDP

                  |L1.4|
                          DCD      DevTimeObj

                          AREA ||i.GetDevTime||, CODE, READONLY, ALIGN=2

                  GetDevTime PROC
;;;94     
;;;95     extern void GetDevTime(void)
000000  4805              LDR      r0,|L2.24|
;;;96     {
;;;97         //DevTimeType     *pCurTime;
;;;98     
;;;99         //pCurTime    = GetCurTime();
;;;100    
;;;101        if(isBitSet(FwUpdateStatusObj.TimelyCheck, TIMELY_EXCUTE_BIT_11_DEV_INIT))
000002  8800              LDRH     r0,[r0,#0]  ; FwUpdateStatusObj
000004  f4106f00          TST      r0,#0x800
000008  d005              BEQ      |L2.22|
;;;102        {
;;;103            ClrBit(FwUpdateStatusObj.TimelyCheck, TIMELY_EXCUTE_BIT_11_DEV_INIT);
00000a  4803              LDR      r0,|L2.24|
00000c  6800              LDR      r0,[r0,#0]  ; FwUpdateStatusObj
00000e  f4206000          BIC      r0,r0,#0x800
000012  4901              LDR      r1,|L2.24|
000014  6008              STR      r0,[r1,#0]  ; FwUpdateStatusObj
                  |L2.22|
;;;104    
;;;105           #if 0
;;;106            u_printf("Print NowTimeSec = %d,%d-%d-%d %02d:%02d:%02d\r\n", 
;;;107    	            pCurTime->NowTimeSec, 
;;;108    	            pCurTime->NowTimeTm.tm_year,
;;;109    	            pCurTime->NowTimeTm.tm_mon,
;;;110    	            pCurTime->NowTimeTm.tm_mday,
;;;111    	            pCurTime->NowTimeTm.tm_hour,
;;;112    	            pCurTime->NowTimeTm.tm_min,
;;;113    	            pCurTime->NowTimeTm.tm_sec
;;;114    	            );
;;;115    	   #endif
;;;116    	   //u_printf("testSec = %d\r\n",testSec);
;;;117    	}  
;;;118    
;;;119    }
000016  4770              BX       lr
;;;120    
                          ENDP

                  |L2.24|
                          DCD      FwUpdateStatusObj

                          AREA ||i.Readbyte||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  Readbyte PROC
;;;273    *******************************************************************************/ 
;;;274    USER_FUNC static unsigned char Readbyte(unsigned char addr)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;275    {
000004  4605              MOV      r5,r0
;;;276    	unsigned char i,tmp,dat1;
;;;277    	unsigned char dat2[5] = {0};
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
00000a  9001              STR      r0,[sp,#4]
;;;278    	
;;;279    	hfthread_suspend_all();
00000c  f7fffffe          BL       hfthread_suspend_all
;;;280    	hfgpio_fset_out_low(RST);
000010  f04f5180          MOV      r1,#0x10000000
000014  2021              MOVS     r0,#0x21
000016  f7fffffe          BL       hfgpio_configure_fpin
;;;281    	hfgpio_fset_out_low(SCLK);
00001a  f04f5180          MOV      r1,#0x10000000
00001e  201f              MOVS     r0,#0x1f
000020  f7fffffe          BL       hfgpio_configure_fpin
;;;282    	delay_us(1);
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       delay_us
;;;283    	hfgpio_fset_out_high(RST);
00002a  f04f5100          MOV      r1,#0x20000000
00002e  2021              MOVS     r0,#0x21
000030  f7fffffe          BL       hfgpio_configure_fpin
;;;284    	for(i=0; i<8; i++)
000034  2600              MOVS     r6,#0
000036  e021              B        |L3.124|
                  |L3.56|
;;;285    	{
;;;286    		hfgpio_fset_out_low(SCLK);
000038  f04f5180          MOV      r1,#0x10000000
00003c  201f              MOVS     r0,#0x1f
00003e  f7fffffe          BL       hfgpio_configure_fpin
;;;287    		tmp = addr;
000042  462c              MOV      r4,r5
;;;288    		if(tmp & 0x01)
000044  f0140f01          TST      r4,#1
000048  d005              BEQ      |L3.86|
;;;289    		{
;;;290    	        hfgpio_fset_out_high(SDA);
00004a  f04f5100          MOV      r1,#0x20000000
00004e  2020              MOVS     r0,#0x20
000050  f7fffffe          BL       hfgpio_configure_fpin
000054  e004              B        |L3.96|
                  |L3.86|
;;;291    		}
;;;292    		else
;;;293    		{
;;;294                hfgpio_fset_out_low(SDA);
000056  f04f5180          MOV      r1,#0x10000000
00005a  2020              MOVS     r0,#0x20
00005c  f7fffffe          BL       hfgpio_configure_fpin
                  |L3.96|
;;;295    		}
;;;296    		addr >>= 1;
000060  106d              ASRS     r5,r5,#1
;;;297    		delay_us(1);
000062  2001              MOVS     r0,#1
000064  f7fffffe          BL       delay_us
;;;298    		hfgpio_fset_out_high(SCLK);
000068  f04f5100          MOV      r1,#0x20000000
00006c  201f              MOVS     r0,#0x1f
00006e  f7fffffe          BL       hfgpio_configure_fpin
;;;299    		delay_us(1);
000072  2001              MOVS     r0,#1
000074  f7fffffe          BL       delay_us
000078  1c70              ADDS     r0,r6,#1              ;284
00007a  b2c6              UXTB     r6,r0                 ;284
                  |L3.124|
00007c  2e08              CMP      r6,#8                 ;284
00007e  dbdb              BLT      |L3.56|
;;;300    	}
;;;301    	hfgpio_configure_fpin(SDA, HFM_IO_TYPE_INPUT);
000080  f04f6100          MOV      r1,#0x8000000
000084  2020              MOVS     r0,#0x20
000086  f7fffffe          BL       hfgpio_configure_fpin
;;;302    	tmp = 0;
00008a  2400              MOVS     r4,#0
;;;303    	for(i=0; i<8; i++)
00008c  2600              MOVS     r6,#0
00008e  e015              B        |L3.188|
                  |L3.144|
;;;304    	{
;;;305    		tmp >>= 1;
000090  1064              ASRS     r4,r4,#1
;;;306    		hfgpio_fset_out_low(SCLK);	
000092  f04f5180          MOV      r1,#0x10000000
000096  201f              MOVS     r0,#0x1f
000098  f7fffffe          BL       hfgpio_configure_fpin
;;;307    		if(hfgpio_fpin_is_high(SDA))
00009c  2020              MOVS     r0,#0x20
00009e  f7fffffe          BL       hfgpio_fpin_is_high
0000a2  b108              CBZ      r0,|L3.168|
;;;308    		{
;;;309    			tmp |= 0x80;
0000a4  f0440480          ORR      r4,r4,#0x80
                  |L3.168|
;;;310    		}
;;;311    		hfgpio_fset_out_high(SCLK);
0000a8  f04f5100          MOV      r1,#0x20000000
0000ac  201f              MOVS     r0,#0x1f
0000ae  f7fffffe          BL       hfgpio_configure_fpin
;;;312    		delay_us(1);
0000b2  2001              MOVS     r0,#1
0000b4  f7fffffe          BL       delay_us
0000b8  1c70              ADDS     r0,r6,#1              ;303
0000ba  b2c6              UXTB     r6,r0                 ;303
                  |L3.188|
0000bc  2e08              CMP      r6,#8                 ;303
0000be  dbe7              BLT      |L3.144|
;;;313    	}
;;;314    	hfgpio_fset_out_low(RST);
0000c0  f04f5180          MOV      r1,#0x10000000
0000c4  2021              MOVS     r0,#0x21
0000c6  f7fffffe          BL       hfgpio_configure_fpin
;;;315    	sprintf((char*)dat2, "%x", tmp);
0000ca  4622              MOV      r2,r4
0000cc  a106              ADR      r1,|L3.232|
0000ce  4668              MOV      r0,sp
0000d0  f7fffffe          BL       __2sprintf
;;;316    	dat1 = atoi((char*)dat2);
0000d4  4668              MOV      r0,sp
0000d6  f7fffffe          BL       atoi
0000da  b2c7              UXTB     r7,r0
;;;317    	hfthread_resume_all();
0000dc  f7fffffe          BL       hfthread_resume_all
;;;318    	return dat1;
0000e0  4638              MOV      r0,r7
;;;319    }
0000e2  e8bd81fc          POP      {r2-r8,pc}
;;;320    /*******************************************************************************
                          ENDP

0000e6  0000              DCW      0x0000
                  |L3.232|
0000e8  257800            DCB      "%x",0
0000eb  00                DCB      0

                          AREA ||i.Rtc_Init||, CODE, READONLY, ALIGN=1

                  Rtc_Init PROC
;;;54     *******************************************************************************/ 
;;;55     extern void Rtc_Init(void)
000000  b510              PUSH     {r4,lr}
;;;56     {
;;;57     	Writebyte(WRITE_PROTECT, 0x00);
000002  2100              MOVS     r1,#0
000004  208e              MOVS     r0,#0x8e
000006  f7fffffe          BL       Writebyte
;;;58     	Writebyte(WRITE_SECOND,  0);
00000a  2100              MOVS     r1,#0
00000c  2080              MOVS     r0,#0x80
00000e  f7fffffe          BL       Writebyte
;;;59     	Writebyte(WRITE_PROTECT, 0x80);
000012  2180              MOVS     r1,#0x80
000014  208e              MOVS     r0,#0x8e
000016  f7fffffe          BL       Writebyte
;;;60     }
00001a  bd10              POP      {r4,pc}
;;;61     /*******************************************************************************
                          ENDP


                          AREA ||i.Writebyte||, CODE, READONLY, ALIGN=1

                  Writebyte PROC
;;;221    *******************************************************************************/ 
;;;222    USER_FUNC static void Writebyte(unsigned char addr, unsigned char data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;223    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;224    
;;;225    	unsigned char i, tmp;
;;;226    	
;;;227    	hfthread_suspend_all();
000008  f7fffffe          BL       hfthread_suspend_all
;;;228    	hfgpio_fset_out_low(RST);
00000c  f04f5180          MOV      r1,#0x10000000
000010  2021              MOVS     r0,#0x21
000012  f7fffffe          BL       hfgpio_configure_fpin
;;;229    	hfgpio_fset_out_low(SCLK);
000016  f04f5180          MOV      r1,#0x10000000
00001a  201f              MOVS     r0,#0x1f
00001c  f7fffffe          BL       hfgpio_configure_fpin
;;;230    	delay_us(1);
000020  2001              MOVS     r0,#1
000022  f7fffffe          BL       delay_us
;;;231    	hfgpio_fset_out_high(RST);
000026  f04f5100          MOV      r1,#0x20000000
00002a  2021              MOVS     r0,#0x21
00002c  f7fffffe          BL       hfgpio_configure_fpin
;;;232    	for(i=0; i<8; i++)
000030  2600              MOVS     r6,#0
000032  e021              B        |L5.120|
                  |L5.52|
;;;233    	{
;;;234    		hfgpio_fset_out_low(SCLK);
000034  f04f5180          MOV      r1,#0x10000000
000038  201f              MOVS     r0,#0x1f
00003a  f7fffffe          BL       hfgpio_configure_fpin
;;;235    		delay_us(1);
00003e  2001              MOVS     r0,#1
000040  f7fffffe          BL       delay_us
;;;236    		tmp = addr;
000044  4627              MOV      r7,r4
;;;237    		if(tmp & 0x01)
000046  f0170f01          TST      r7,#1
00004a  d005              BEQ      |L5.88|
;;;238    		{
;;;239    			hfgpio_fset_out_high(SDA);
00004c  f04f5100          MOV      r1,#0x20000000
000050  2020              MOVS     r0,#0x20
000052  f7fffffe          BL       hfgpio_configure_fpin
000056  e004              B        |L5.98|
                  |L5.88|
;;;240    		}
;;;241    		else
;;;242    		{
;;;243    			hfgpio_fset_out_low(SDA);
000058  f04f5180          MOV      r1,#0x10000000
00005c  2020              MOVS     r0,#0x20
00005e  f7fffffe          BL       hfgpio_configure_fpin
                  |L5.98|
;;;244    		}
;;;245    		addr >>= 1;
000062  1064              ASRS     r4,r4,#1
;;;246    		hfgpio_fset_out_high(SCLK);
000064  f04f5100          MOV      r1,#0x20000000
000068  201f              MOVS     r0,#0x1f
00006a  f7fffffe          BL       hfgpio_configure_fpin
;;;247    		delay_us(1);
00006e  2001              MOVS     r0,#1
000070  f7fffffe          BL       delay_us
000074  1c70              ADDS     r0,r6,#1              ;232
000076  b2c6              UXTB     r6,r0                 ;232
                  |L5.120|
000078  2e08              CMP      r6,#8                 ;232
00007a  dbdb              BLT      |L5.52|
;;;248    	}
;;;249    	for(i=0; i<8; i++)
00007c  2600              MOVS     r6,#0
00007e  e01e              B        |L5.190|
                  |L5.128|
;;;250    	{
;;;251    		hfgpio_fset_out_low(SCLK);
000080  f04f5180          MOV      r1,#0x10000000
000084  201f              MOVS     r0,#0x1f
000086  f7fffffe          BL       hfgpio_configure_fpin
;;;252    		delay_us(1);
00008a  2001              MOVS     r0,#1
00008c  f7fffffe          BL       delay_us
;;;253    		tmp = data;
000090  462f              MOV      r7,r5
;;;254    		if(tmp & 0x01)
000092  f0170f01          TST      r7,#1
000096  d005              BEQ      |L5.164|
;;;255    		{
;;;256    			hfgpio_fset_out_high(SDA);
000098  f04f5100          MOV      r1,#0x20000000
00009c  2020              MOVS     r0,#0x20
00009e  f7fffffe          BL       hfgpio_configure_fpin
0000a2  e004              B        |L5.174|
                  |L5.164|
;;;257    		}
;;;258    		else
;;;259    		{
;;;260    			hfgpio_fset_out_low(SDA);
0000a4  f04f5180          MOV      r1,#0x10000000
0000a8  2020              MOVS     r0,#0x20
0000aa  f7fffffe          BL       hfgpio_configure_fpin
                  |L5.174|
;;;261    		}
;;;262    		data >>= 1;
0000ae  106d              ASRS     r5,r5,#1
;;;263    		hfgpio_fset_out_high(SCLK);
0000b0  f04f5100          MOV      r1,#0x20000000
0000b4  201f              MOVS     r0,#0x1f
0000b6  f7fffffe          BL       hfgpio_configure_fpin
0000ba  1c70              ADDS     r0,r6,#1              ;249
0000bc  b2c6              UXTB     r6,r0                 ;249
                  |L5.190|
0000be  2e08              CMP      r6,#8                 ;249
0000c0  dbde              BLT      |L5.128|
;;;264    	}
;;;265    	hfgpio_fset_out_low(RST);
0000c2  f04f5180          MOV      r1,#0x10000000
0000c6  2021              MOVS     r0,#0x21
0000c8  f7fffffe          BL       hfgpio_configure_fpin
;;;266    	hfthread_resume_all();
0000cc  f7fffffe          BL       hfthread_resume_all
;;;267    }
0000d0  e8bd81f0          POP      {r4-r8,pc}
;;;268    /*******************************************************************************
                          ENDP


                          AREA ||i.get_rtctime||, CODE, READONLY, ALIGN=2

                  get_rtctime PROC
;;;132    
;;;133    void get_rtctime(struct tm *p)
000000  b570              PUSH     {r4-r6,lr}
;;;134    {
000002  4604              MOV      r4,r0
;;;135        uint8_t iTemp;
;;;136        
;;;137    	p->tm_sec  = Readbyte(READ_SECOND);
000004  2081              MOVS     r0,#0x81
000006  f7fffffe          BL       Readbyte
00000a  6020              STR      r0,[r4,#0]
;;;138    	p->tm_min  = Readbyte(READ_MINUTE);
00000c  2083              MOVS     r0,#0x83
00000e  f7fffffe          BL       Readbyte
000012  6060              STR      r0,[r4,#4]
;;;139    	p->tm_hour = Readbyte(READ_HOUR);
000014  2085              MOVS     r0,#0x85
000016  f7fffffe          BL       Readbyte
00001a  60a0              STR      r0,[r4,#8]
;;;140    	p->tm_mday = Readbyte(READ_DAY);
00001c  2087              MOVS     r0,#0x87
00001e  f7fffffe          BL       Readbyte
000022  60e0              STR      r0,[r4,#0xc]
;;;141    	p->tm_wday = Readbyte(READ_WDAY)-1;
000024  208b              MOVS     r0,#0x8b
000026  f7fffffe          BL       Readbyte
00002a  1e40              SUBS     r0,r0,#1
00002c  61a0              STR      r0,[r4,#0x18]
;;;142    	p->tm_mon  = Readbyte(READ_MON)-1;
00002e  2089              MOVS     r0,#0x89
000030  f7fffffe          BL       Readbyte
000034  1e40              SUBS     r0,r0,#1
000036  6120              STR      r0,[r4,#0x10]
;;;143    	p->tm_year = Readbyte(READ_YEAR)+100;
000038  208d              MOVS     r0,#0x8d
00003a  f7fffffe          BL       Readbyte
00003e  3064              ADDS     r0,r0,#0x64
000040  6160              STR      r0,[r4,#0x14]
;;;144    	
;;;145    	DevTimeObj.CurTimeSec = mktime(p);
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       mktime
000048  4917              LDR      r1,|L6.168|
00004a  6308              STR      r0,[r1,#0x30]  ; DevTimeObj
;;;146    	
;;;147       
;;;148    	if(DevInfoObj.TimeZone>12) 
00004c  4817              LDR      r0,|L6.172|
00004e  f890003a          LDRB     r0,[r0,#0x3a]  ; DevInfoObj
000052  280c              CMP      r0,#0xc
000054  dd0f              BLE      |L6.118|
;;;149        { 
;;;150            iTemp           = DevInfoObj.TimeZone - 12; 
000056  4815              LDR      r0,|L6.172|
000058  f890003a          LDRB     r0,[r0,#0x3a]  ; DevInfoObj
00005c  380c              SUBS     r0,r0,#0xc
00005e  b2c5              UXTB     r5,r0
;;;151            DevTimeObj.NowTimeSec = DevTimeObj.CurTimeSec - iTemp * 3600; 
000060  4608              MOV      r0,r1
000062  6b00              LDR      r0,[r0,#0x30]  ; DevTimeObj
000064  ebc51145          RSB      r1,r5,r5,LSL #5
000068  ebc12105          RSB      r1,r1,r5,LSL #8
00006c  eba01001          SUB      r0,r0,r1,LSL #4
000070  490d              LDR      r1,|L6.168|
000072  62c8              STR      r0,[r1,#0x2c]  ; DevTimeObj
000074  e00f              B        |L6.150|
                  |L6.118|
;;;152        } 
;;;153        else 
;;;154        { 
;;;155            iTemp           = 12 - DevInfoObj.TimeZone; 
000076  480d              LDR      r0,|L6.172|
000078  f890003a          LDRB     r0,[r0,#0x3a]  ; DevInfoObj
00007c  f1c0000c          RSB      r0,r0,#0xc
000080  b2c5              UXTB     r5,r0
;;;156            DevTimeObj.NowTimeSec = DevTimeObj.CurTimeSec + iTemp * 3600; 
000082  4809              LDR      r0,|L6.168|
000084  6b00              LDR      r0,[r0,#0x30]  ; DevTimeObj
000086  ebc51145          RSB      r1,r5,r5,LSL #5
00008a  ebc12105          RSB      r1,r1,r5,LSL #8
00008e  eb001001          ADD      r0,r0,r1,LSL #4
000092  4905              LDR      r1,|L6.168|
000094  62c8              STR      r0,[r1,#0x2c]  ; DevTimeObj
                  |L6.150|
;;;157        } 
;;;158    #if  0      
;;;159    	u_printf("NowTimeSec is = %d,%d-%d-%d %d:%d:%d\r\n", 
;;;160    	            DevTimeObj.NowTimeSec, 
;;;161    	            p->tm_year,
;;;162    	            p->tm_mon,
;;;163    	            p->tm_mday,
;;;164    	            p->tm_hour,
;;;165    	            p->tm_min,
;;;166    	            p->tm_sec
;;;167    	            );
;;;168     #endif
;;;169     
;;;170        p->tm_mon++;
000096  6920              LDR      r0,[r4,#0x10]
000098  1c40              ADDS     r0,r0,#1
00009a  6120              STR      r0,[r4,#0x10]
;;;171    	p->tm_year += 1900;
00009c  6960              LDR      r0,[r4,#0x14]
00009e  f200706c          ADD      r0,r0,#0x76c
0000a2  6160              STR      r0,[r4,#0x14]
;;;172    	return;
;;;173    }
0000a4  bd70              POP      {r4-r6,pc}
;;;174    /*******************************************************************************
                          ENDP

0000a6  0000              DCW      0x0000
                  |L6.168|
                          DCD      DevTimeObj
                  |L6.172|
                          DCD      DevInfoObj

                          AREA ||i.num2hex||, CODE, READONLY, ALIGN=1

                  num2hex PROC
;;;325    *******************************************************************************/ 
;;;326    USER_FUNC static void num2hex(struct tm *timep)
000000  220a              MOVS     r2,#0xa
;;;327    {
;;;328    	timep->tm_sec   = timep->tm_sec/10*16  + timep->tm_sec%10;
000002  6801              LDR      r1,[r0,#0]
000004  fb91f3f2          SDIV     r3,r1,r2
000008  fb021213          MLS      r2,r2,r3,r1
00000c  230a              MOVS     r3,#0xa
00000e  fb91f1f3          SDIV     r1,r1,r3
000012  eb021101          ADD      r1,r2,r1,LSL #4
000016  6001              STR      r1,[r0,#0]
;;;329    	timep->tm_min   = timep->tm_min/10*16  + timep->tm_min%10;
000018  220a              MOVS     r2,#0xa
00001a  6841              LDR      r1,[r0,#4]
00001c  fb91f3f2          SDIV     r3,r1,r2
000020  fb021213          MLS      r2,r2,r3,r1
000024  230a              MOVS     r3,#0xa
000026  fb91f1f3          SDIV     r1,r1,r3
00002a  eb021101          ADD      r1,r2,r1,LSL #4
00002e  6041              STR      r1,[r0,#4]
;;;330    	timep->tm_hour  = timep->tm_hour/10*16 + timep->tm_hour%10;
000030  220a              MOVS     r2,#0xa
000032  6881              LDR      r1,[r0,#8]
000034  fb91f3f2          SDIV     r3,r1,r2
000038  fb021213          MLS      r2,r2,r3,r1
00003c  230a              MOVS     r3,#0xa
00003e  fb91f1f3          SDIV     r1,r1,r3
000042  eb021101          ADD      r1,r2,r1,LSL #4
000046  6081              STR      r1,[r0,#8]
;;;331    	timep->tm_mday  = timep->tm_mday/10*16 + timep->tm_mday%10;
000048  220a              MOVS     r2,#0xa
00004a  68c1              LDR      r1,[r0,#0xc]
00004c  fb91f3f2          SDIV     r3,r1,r2
000050  fb021213          MLS      r2,r2,r3,r1
000054  230a              MOVS     r3,#0xa
000056  fb91f1f3          SDIV     r1,r1,r3
00005a  eb021101          ADD      r1,r2,r1,LSL #4
00005e  60c1              STR      r1,[r0,#0xc]
;;;332    	
;;;333    	timep->tm_wday  = timep->tm_wday + 1;
000060  6981              LDR      r1,[r0,#0x18]
000062  1c49              ADDS     r1,r1,#1
000064  6181              STR      r1,[r0,#0x18]
;;;334    	timep->tm_mon += 1;
000066  6901              LDR      r1,[r0,#0x10]
000068  1c49              ADDS     r1,r1,#1
00006a  6101              STR      r1,[r0,#0x10]
;;;335    	//timep->tm_mon   = timep->tm_mon/10*16  + timep->tm_mon%10 + 1;
;;;336    	timep->tm_mon   = timep->tm_mon/10*16  + timep->tm_mon%10;
00006c  220a              MOVS     r2,#0xa
00006e  6901              LDR      r1,[r0,#0x10]
000070  fb91f3f2          SDIV     r3,r1,r2
000074  fb021213          MLS      r2,r2,r3,r1
000078  230a              MOVS     r3,#0xa
00007a  fb91f1f3          SDIV     r1,r1,r3
00007e  eb021101          ADD      r1,r2,r1,LSL #4
000082  6101              STR      r1,[r0,#0x10]
;;;337    	
;;;338    	timep->tm_year -= 100;
000084  6941              LDR      r1,[r0,#0x14]
000086  3964              SUBS     r1,r1,#0x64
000088  6141              STR      r1,[r0,#0x14]
;;;339    	timep->tm_year  = timep->tm_year/10*16 + timep->tm_year%10;
00008a  220a              MOVS     r2,#0xa
00008c  6941              LDR      r1,[r0,#0x14]
00008e  fb91f3f2          SDIV     r3,r1,r2
000092  fb021213          MLS      r2,r2,r3,r1
000096  230a              MOVS     r3,#0xa
000098  fb91f1f3          SDIV     r1,r1,r3
00009c  eb021101          ADD      r1,r2,r1,LSL #4
0000a0  6141              STR      r1,[r0,#0x14]
;;;340    	//timep->tm_year  = timep->tm_year/10*16 + timep->tm_year%10+1;
;;;341    }
0000a2  4770              BX       lr
;;;342    /******************************************************************************* 
                          ENDP


                          AREA ||i.set_rtctime||, CODE, READONLY, ALIGN=1

                  set_rtctime PROC
;;;179    *******************************************************************************/ 
;;;180    USER_FUNC int set_rtctime(struct tm *timep)
000000  b510              PUSH     {r4,lr}
;;;181    {
000002  4604              MOV      r4,r0
;;;182    	#if  0 
;;;183    	u_printf("Before NowTime T : %d-%d-%d %d:%d:%d\r\n", 
;;;184    	            timep->tm_year,
;;;185    	            timep->tm_mon,
;;;186    	            timep->tm_mday,
;;;187    	            timep->tm_hour,
;;;188    	            timep->tm_min,
;;;189    	            timep->tm_sec
;;;190    	            );
;;;191    	#endif 
;;;192    	num2hex(timep);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       num2hex
;;;193    	
;;;194    	#if  0 
;;;195    	u_printf("After NowTime T : %d-%d-%d %d:%d:%d\r\n", 
;;;196    	            timep->tm_year,
;;;197    	            timep->tm_mon,
;;;198    	            timep->tm_mday,
;;;199    	            timep->tm_hour,
;;;200    	            timep->tm_min,
;;;201    	            timep->tm_sec
;;;202    	            );
;;;203    	#endif 
;;;204    	// 
;;;205    	Writebyte(WRITE_PROTECT, 0x00);
00000a  2100              MOVS     r1,#0
00000c  208e              MOVS     r0,#0x8e
00000e  f7fffffe          BL       Writebyte
;;;206    	Writebyte(WRITE_SECOND,  timep->tm_sec);
000012  7821              LDRB     r1,[r4,#0]
000014  2080              MOVS     r0,#0x80
000016  f7fffffe          BL       Writebyte
;;;207    	Writebyte(WRITE_MINUTE,  timep->tm_min);
00001a  7921              LDRB     r1,[r4,#4]
00001c  2082              MOVS     r0,#0x82
00001e  f7fffffe          BL       Writebyte
;;;208    	Writebyte(WRITE_HOUR,    timep->tm_hour);
000022  7a21              LDRB     r1,[r4,#8]
000024  2084              MOVS     r0,#0x84
000026  f7fffffe          BL       Writebyte
;;;209    	Writebyte(WRITE_DAY,     timep->tm_mday);
00002a  7b21              LDRB     r1,[r4,#0xc]
00002c  2086              MOVS     r0,#0x86
00002e  f7fffffe          BL       Writebyte
;;;210    	Writebyte(WRITE_WDAY,    timep->tm_wday);
000032  7e21              LDRB     r1,[r4,#0x18]
000034  208a              MOVS     r0,#0x8a
000036  f7fffffe          BL       Writebyte
;;;211    	Writebyte(WRITE_MON,     timep->tm_mon);
00003a  7c21              LDRB     r1,[r4,#0x10]
00003c  2088              MOVS     r0,#0x88
00003e  f7fffffe          BL       Writebyte
;;;212    	Writebyte(WRITE_YEAR,    timep->tm_year);
000042  7d21              LDRB     r1,[r4,#0x14]
000044  208c              MOVS     r0,#0x8c
000046  f7fffffe          BL       Writebyte
;;;213    	Writebyte(WRITE_PROTECT, 0x80);
00004a  2180              MOVS     r1,#0x80
00004c  208e              MOVS     r0,#0x8e
00004e  f7fffffe          BL       Writebyte
;;;214    	return 0;
000052  2000              MOVS     r0,#0
;;;215    }
000054  bd10              POP      {r4,pc}
;;;216    /*******************************************************************************
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  DevTimeObj
                          %        52
