; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\startup.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\startup.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=494 -I../sdk/1.50/include/ -I../inc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -D__KEIL_MDK__ -D__LPB100__ --enum_is_int --omf_browse=.\output\startup.crf ..\src\startup.c]
                          THUMB

                          AREA ||i.__hf_mem_clear||, CODE, READONLY, ALIGN=2

                  __hf_mem_clear PROC
;;;293    
;;;294    void __hf_mem_clear(void)
000000  4905              LDR      r1,|L1.24|
;;;295    {
;;;296    	int *p_data = (int*)(0x20000000+CFG_SYS_STACK_SIZE);
;;;297    	int  i;
;;;298    	for(i=0;i<30*1024;i++)
000002  2000              MOVS     r0,#0
000004  e003              B        |L1.14|
                  |L1.6|
;;;299    	{
;;;300    		p_data[i]=0;
000006  2200              MOVS     r2,#0
000008  f8412020          STR      r2,[r1,r0,LSL #2]
00000c  1c40              ADDS     r0,r0,#1              ;298
                  |L1.14|
00000e  f5b04ff0          CMP      r0,#0x7800            ;298
000012  dbf8              BLT      |L1.6|
;;;301    	}
;;;302    	return;
;;;303    }
000014  4770              BX       lr
;;;304    
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      0x20000400

                          AREA ||i.audio_decoder_interrupt_handler2||, CODE, READONLY, ALIGN=1

                  audio_decoder_interrupt_handler2 PROC
;;;304    
;;;305    void audio_decoder_interrupt_handler2(void)
000000  4770              BX       lr
;;;306    {
;;;307    	//u_printf("audio_decoder_interrupt_handler2\n");
;;;308    }
;;;309    
                          ENDP


                          AREA EXCEPT_VECTS, DATA, READONLY, ALIGN=2

                  vect_table
                          DCD      0x20000400
                          DCD      reset_handler
                          DCD      nmi_handler
                          DCD      hardfault_handler
                          DCD      memmanage_handler
                          DCD      busfault_handler
                          DCD      usagefault_handler
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      svcall_interrupt
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      pendsv_interrupt
                          DCD      systick_interrupt
                          DCD      GpioInterrupt
                          DCD      RtcInterrupt
                          DCD      IrInterrupt
                          DCD      FuartInterruptHf
                          DCD      BuartInterrupt
                          DCD      PwcInterrupt
                          DCD      Timer0Interrupt
                          DCD      UsbInterrupt
                          DCD      DmaCh0Interrupt
                          DCD      DmaCh1Interrupt
                          DCD      audio_decoder_interrupt_handler2
                          DCD      SpisInterrupt
                          DCD      SdInterrupt
                          DCD      SpimInterrupt
                          DCD      Timer1Interrupt
                          DCD      WatchDogInterrupt

                          AREA MSP, DATA, ALIGN=0

                  sys_stack_heap
000000  a5000000          DCB      0xa5,0x00,0x00,0x00
                          %        1020

;*** Start embedded assembler ***

#line 1 "..\\src\\startup.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__bootup_stubs|
#line 82
|__bootup_stubs| PROC
#line 83

 PRESERVE8
 THUMB

__initial_sp EQU (0x20000000 + (1024))
 EXPORT __initial_sp 

 
 AREA |.ARM.__at_0x00000080|, CODE, READONLY
IMAGE_SIZE DCD 0xFFFFFFFF

 
 AREA |.ARM.__at_0x00000084|, CODE, READONLY
PIDCHKSUM FILL 8, 0xFF

 
 AREA |.ARM.__at_0x0000008C|, CODE, READONLY
CONSTDATA DCD 0xFFFFFFFF

 
 AREA |.ARM.__at_0x00000090|, CODE, READONLY
UPDATEDATA DCD 0xFFFFFFFF

 
 AREA |.ARM.__at_0x00000094|, CODE, READONLY
SDK_VERSION_CHAIP DCB 0x12
RSDK_VERSION_OTHER FILL 3,0xFF

 
 AREA |.ARM.__at_0x00000098|, CODE, READONLY
SDK_CODECRC DCD 0xFFFFFFFF

 
 AREA |.ARM.__at_0x0000009C|, CODE, READONLY
RESV4B FILL 4,0xFF

 AREA |.text|, CODE, READONLY

 IMPORT |Region$$Table$$Base|
 IMPORT |Region$$Table$$Limit|

 IMPORT main
 IMPORT mmm_pool_top 

 
__mv_main
 
 LDR SP,=mmm_pool_top 
 SUB SP,SP,#0x1000
 LDR R0,=__initial_sp
 SUB R0,R0,#(1024)
 LDR R0,[R0]
 PUSH {R0}

mv_main PROC
 EXPORT mv_main 
 IMPORT __hf_mem_clear
 BL __hf_mem_clear 
 
 LDR R4,=|Region$$Table$$Base|
 LDR R5,=|Region$$Table$$Limit|
__NEXT_REGION
 CMP R4,R5
 
 BCS __REGION_DECOMP_OK
 LDM R4,{R0-R3}
 
 STMDB R13!,{R4,R5}
 ORR R3,R3,#0x01
 BLX R3
 LDMIA R13!,{R4,R5}
 ADD R4,R4,#0x10
 B __NEXT_REGION
__REGION_DECOMP_OK
#line 161

 IMPORT __rt_lib_init
 BL __rt_lib_init


 
#line 176


 LDR SP,=__initial_sp
 LDR R0,=main
 BX R0

 ENDP
 ALIGN

reset_handler PROC
#line 187
 EXPORT reset_handler [WEAK] 
 MOV R0,R0
 LDR R0,=__mv_main
 BX R0
 ENDP


nmi_handler PROC
#line 196
 EXPORT nmi_handler [WEAK] 
 B .
 ENDP

hardfault_handler PROC
#line 202
 IMPORT hf_trapfault_handler_dumpstack
 EXPORT hardfault_handler [WEAK] 
 TST LR, #4
 MRSEQ R0, MSP
 MRSNE R0, PSP
 PUSH {R4-R11}
 MRS R1, MSP
 B hf_trapfault_handler_dumpstack
 BX LR
 ENDP
 
memmanage_handler PROC
#line 215
 IMPORT hf_trapfault_handler_dumpstack
 EXPORT memmanage_handler [WEAK] 
 TST LR, #4
 MRSEQ R0, MSP
 MRSNE R0, PSP
 PUSH {R4-R11}
 MRS R1, MSP
 B hf_trapfault_handler_dumpstack
 BX LR
 ENDP

busfault_handler PROC
#line 228
 IMPORT hf_trapfault_handler_dumpstack
 EXPORT busfault_handler [WEAK] 
 TST LR, #4
 MRSEQ R0, MSP
 MRSNE R0, PSP
 PUSH {R4-R11}
 MRS R1, MSP
 B hf_trapfault_handler_dumpstack
 BX LR
 ENDP

usagefault_handler PROC
#line 241
 IMPORT hf_trapfault_handler_dumpstack
 EXPORT usagefault_handler [WEAK] 
 TST LR, #4
 MRSEQ R0, MSP
 MRSNE R0, PSP
 PUSH {R4-R11}
 MRS R1, MSP
 B hf_trapfault_handler_dumpstack
 BX LR
 ENDP

 ALIGN

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 IF :DEF: __MICROLIB
 EXPORT __initial_sp
 EXPORT __heap_base
 EXPORT __heap_limit
 ELSE
 EXPORT __initial_sp
 
 
 ENDIF

 
 
 
 
 
 ALIGN
 
 
 
 
 
 
 END
	ENDP

;*** End   embedded assembler ***
