; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\app_main.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\app_main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=494 -I../sdk/1.50/include/ -I../inc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -D__KEIL_MDK__ -D__LPB100__ --enum_is_int --omf_browse=.\output\app_main.crf ..\src\app_main.c]
                          THUMB

                          AREA ||i.app_main||, CODE, READONLY, ALIGN=2

                  app_main PROC
;;;203    extern SwInformationType    SwInformation;
;;;204    int USER_FUNC app_main (void)
000000  b510              PUSH     {r4,lr}
;;;205    {
;;;206        u_printf("The version is :%d.%02d\n",big_version,little_version);
000002  4817              LDR      r0,|L1.96|
000004  7803              LDRB     r3,[r0,#0]  ; little_version
000006  4817              LDR      r0,|L1.100|
000008  7802              LDRB     r2,[r0,#0]  ; big_version
00000a  a117              ADR      r1,|L1.104|
00000c  200a              MOVS     r0,#0xa
00000e  f7fffffe          BL       HF_Debug
;;;207        
;;;208    	if(hfgpio_fmap_check(HFM_TYPE)!=0)
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       hfgpio_fmap_check
000018  b128              CBZ      r0,|L1.38|
;;;209    	{
;;;210    		while(1)
00001a  e003              B        |L1.36|
                  |L1.28|
;;;211    		{
;;;212    			msleep(1000);
00001c  f44f707a          MOV      r0,#0x3e8
000020  f7fffffe          BL       hf_thread_delay
                  |L1.36|
000024  e7fa              B        |L1.28|
                  |L1.38|
;;;213    		}
;;;214    	}
;;;215    
;;;216       #if   defined(__DOWN_SHUT_DBG__) 
;;;217    	show_reset_reason();
000026  f7fffffe          BL       show_reset_reason
;;;218       #endif 
;;;219    
;;;220    	DevGPIO_Init();                 //Init the device
00002a  f7fffffe          BL       DevGPIO_Init
;;;221    	hfsys_register_system_event((hfsys_event_callback_t)hfsys_event_callback); 
00002e  4815              LDR      r0,|L1.132|
000030  f7fffffe          BL       hfsys_register_system_event
;;;222     	
;;;223    	while(!hfnet_wifi_is_active()) 
000034  e002              B        |L1.60|
                  |L1.54|
;;;224    	{
;;;225    		msleep(50); 
000036  2032              MOVS     r0,#0x32
000038  f7fffffe          BL       hf_thread_delay
                  |L1.60|
00003c  f7fffffe          BL       hfnet_wifi_is_active
000040  2800              CMP      r0,#0                 ;223
000042  d0f8              BEQ      |L1.54|
;;;226    	}    
;;;227    
;;;228    	app_thread_and_timer_start();
000044  f7fffffe          BL       app_thread_and_timer_start
;;;229    	
;;;230    	//EnterAPSTAMode();
;;;231    	DevMode_Init();
000048  f7fffffe          BL       DevMode_Init
;;;232    	
;;;233    	hfnet_start_uart(HFTHREAD_PRIORITIES_LOW, (hfnet_callback_t)uart_process_callback);
00004c  490e              LDR      r1,|L1.136|
00004e  2001              MOVS     r0,#1
000050  f7fffffe          BL       hfnet_start_uart
;;;234    
;;;235         
;;;236        HttpdServerThread_Create();
000054  f7fffffe          BL       HttpdServerThread_Create
;;;237     	UdpServerThread_Create();
000058  f7fffffe          BL       UdpServerThread_Create
;;;238    
;;;239    	return 1;
00005c  2001              MOVS     r0,#1
;;;240    }
00005e  bd10              POP      {r4,pc}
                          ENDP

                  |L1.96|
                          DCD      little_version
                  |L1.100|
                          DCD      big_version
                  |L1.104|
000068  54686520          DCB      "The version is :%d.%02d\n",0
00006c  76657273
000070  696f6e20
000074  6973203a
000078  25642e25
00007c  3032640a
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
                  |L1.132|
                          DCD      hfsys_event_callback
                  |L1.136|
                          DCD      uart_process_callback

                          AREA ||i.hfsys_event_callback||, CODE, READONLY, ALIGN=2

                  hfsys_event_callback PROC
;;;162    /*************register the system callback********************/
;;;163    static int hfsys_event_callback( uint32_t event_id,void *param)
000000  b570              PUSH     {r4-r6,lr}
;;;164    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;165    	switch(event_id)
000006  2c05              CMP      r4,#5
000008  d219              BCS      |L2.62|
00000a  e8dff004          TBB      [pc,r4]
00000e  030d              DCB      0x03,0x0d
000010  17141500          DCB      0x17,0x14,0x15,0x00
;;;166    	{
;;;167    		case HFE_WIFI_STA_CONNECTED:         //when STA connext success trigger
;;;168    		{
;;;169    		    ClrBit(DevStatusObj.LedShowStatus, WIFI_LED_SHOW_0_BIT);
000014  480c              LDR      r0,|L2.72|
000016  7800              LDRB     r0,[r0,#0]  ; DevStatusObj
000018  f0200001          BIC      r0,r0,#1
00001c  490a              LDR      r1,|L2.72|
00001e  7008              STRB     r0,[r1,#0]
;;;170    		    LedCtl(WIFI_LED_ON); 
000020  2001              MOVS     r0,#1
000022  f7fffffe          BL       LedCtl
;;;171    		}
;;;172    		break;
000026  e00b              B        |L2.64|
;;;173    		case HFE_WIFI_STA_DISCONNECTED:
;;;174    		{
;;;175    		    // wifi快闪烁 
;;;176    		    SetBit(DevStatusObj.LedShowStatus, WIFI_LED_SHOW_0_BIT);
000028  4807              LDR      r0,|L2.72|
00002a  7800              LDRB     r0,[r0,#0]  ; DevStatusObj
00002c  f0400001          ORR      r0,r0,#1
000030  4905              LDR      r1,|L2.72|
000032  7008              STRB     r0,[r1,#0]
;;;177    		}
;;;178    		break;
000034  e004              B        |L2.64|
;;;179    		case HFE_DHCP_OK:
;;;180    		{
;;;181    			#if  0 
;;;182    			uint32_t *p_ip;
;;;183    			p_ip = (uint32_t*)param;
;;;184    			u_printf("dhcp ok %08X!\n", *p_ip);
;;;185    			#endif 
;;;186    		}
;;;187    		break;
000036  e003              B        |L2.64|
;;;188    		case HFE_SMTLK_OK:
;;;189    		{ 
;;;190                //EnterAPSTAMode();
;;;191    			return 0; 
000038  2000              MOVS     r0,#0
                  |L2.58|
;;;192    		}
;;;193    		//break;
;;;194    		case HFE_CONFIG_RELOAD:
;;;195    		{
;;;196    		}
;;;197    		break;
;;;198    		default: break;
;;;199    	}
;;;200    	return 0;
;;;201    }
00003a  bd70              POP      {r4-r6,pc}
00003c  e000              B        |L2.64|
                  |L2.62|
00003e  bf00              NOP                            ;198
                  |L2.64|
000040  bf00              NOP                            ;172
000042  2000              MOVS     r0,#0                 ;200
000044  e7f9              B        |L2.58|
;;;202    
                          ENDP

000046  0000              DCW      0x0000
                  |L2.72|
                          DCD      DevStatusObj

                          AREA ||i.show_reset_reason||, CODE, READONLY, ALIGN=2

                  show_reset_reason PROC
;;;111    /***************打印模块重启原因******************************/
;;;112    static void show_reset_reason(void)
000000  b510              PUSH     {r4,lr}
;;;113    {
;;;114    	uint32_t reset_reason=0;
000002  2400              MOVS     r4,#0
;;;115    	reset_reason = hfsys_get_reset_reason();     //API:Get the module reset 
000004  f7fffffe          BL       hfsys_get_reset_reason
000008  4604              MOV      r4,r0
;;;116    	// reason       
;;;117    	u_printf("reset_reasion:%08x\n",reset_reason);
00000a  4622              MOV      r2,r4
00000c  a11d              ADR      r1,|L3.132|
00000e  200a              MOVS     r0,#0xa
000010  f7fffffe          BL       HF_Debug
;;;118    	if(reset_reason&HFSYS_RESET_REASON_ERESET)
000014  f0140f01          TST      r4,#1
000018  d003              BEQ      |L3.34|
;;;119    	{
;;;120    		u_printf("ERESET\n");
00001a  a11f              ADR      r1,|L3.152|
00001c  200a              MOVS     r0,#0xa
00001e  f7fffffe          BL       HF_Debug
                  |L3.34|
;;;121    		//UdpDebugPrint("ERESET\n",sizeof("ERESET\n")-1);    
;;;122    	}
;;;123    	if(reset_reason&HFSYS_RESET_REASON_IRESET0)
000022  f0140f02          TST      r4,#2
000026  d003              BEQ      |L3.48|
;;;124    	{
;;;125    		u_printf("IRESET0\n");
000028  a11d              ADR      r1,|L3.160|
00002a  200a              MOVS     r0,#0xa
00002c  f7fffffe          BL       HF_Debug
                  |L3.48|
;;;126    		//UdpDebugPrint("IRESET0\n",sizeof("IRESET0\n")-1);    
;;;127    	}
;;;128    	if(reset_reason&HFSYS_RESET_REASON_IRESET1)
000030  f0140f04          TST      r4,#4
000034  d003              BEQ      |L3.62|
;;;129    	{
;;;130    		u_printf("IRESET1\n");
000036  a11d              ADR      r1,|L3.172|
000038  200a              MOVS     r0,#0xa
00003a  f7fffffe          BL       HF_Debug
                  |L3.62|
;;;131    		//UdpDebugPrint("IRESET1\n",sizeof("IRESET1\n")-1);    
;;;132    	}
;;;133    	if(reset_reason==HFSYS_RESET_REASON_NORMAL)
00003e  b91c              CBNZ     r4,|L3.72|
;;;134    	{
;;;135    		u_printf("RESET NORMAL\n");
000040  a11d              ADR      r1,|L3.184|
000042  200a              MOVS     r0,#0xa
000044  f7fffffe          BL       HF_Debug
                  |L3.72|
;;;136    		//UdpDebugPrint("RESET NORMAL\n",sizeof("RESET NORMAL\n")-1);    
;;;137    	}
;;;138    	if(reset_reason&HFSYS_RESET_REASON_WPS)
000048  f0140f08          TST      r4,#8
00004c  d003              BEQ      |L3.86|
;;;139    	{
;;;140    		u_printf("RESET FOR WPS\n");
00004e  a11e              ADR      r1,|L3.200|
000050  200a              MOVS     r0,#0xa
000052  f7fffffe          BL       HF_Debug
                  |L3.86|
;;;141    		//UdpDebugPrint("RESET FOR WPS\n",sizeof("RESET FOR WPS\n")-1);    
;;;142    	}
;;;143    	if(reset_reason&HFSYS_RESET_REASON_SMARTLINK_START)
000056  f0140f10          TST      r4,#0x10
00005a  d003              BEQ      |L3.100|
;;;144    	{
;;;145    		u_printf("RESET FOR SMARTLINK START\n");
00005c  a11e              ADR      r1,|L3.216|
00005e  200a              MOVS     r0,#0xa
000060  f7fffffe          BL       HF_Debug
                  |L3.100|
;;;146    		//UdpDebugPrint("RESET FOR SMARTLINK START\n",sizeof("RESET FOR SMARTLINK START\n")-1);    
;;;147    	}
;;;148    	if(reset_reason&HFSYS_RESET_REASON_SMARTLINK_OK)
000064  f0140f20          TST      r4,#0x20
000068  d003              BEQ      |L3.114|
;;;149    	{
;;;150    		u_printf("RESET FOR SMARTLINK OK\n");
00006a  a122              ADR      r1,|L3.244|
00006c  200a              MOVS     r0,#0xa
00006e  f7fffffe          BL       HF_Debug
                  |L3.114|
;;;151    		//UdpDebugPrint("RESET FOR SMARTLINK OK\n",sizeof("RESET FOR SMARTLINK OK\n")-1);    
;;;152    	}
;;;153    	if(reset_reason&HFSYS_RESET_REASON_WPS_OK)
000072  f0140f80          TST      r4,#0x80
000076  d003              BEQ      |L3.128|
;;;154    	{
;;;155    		u_printf("RESET FOR WPS OK\n");
000078  a124              ADR      r1,|L3.268|
00007a  200a              MOVS     r0,#0xa
00007c  f7fffffe          BL       HF_Debug
                  |L3.128|
;;;156    		//UdpDebugPrint("RESET FOR WPS OK\n",sizeof("RESET FOR WPS OK\n")-1);    
;;;157    	}
;;;158    	return;
;;;159    }
000080  bd10              POP      {r4,pc}
;;;160    #endif 
                          ENDP

000082  0000              DCW      0x0000
                  |L3.132|
000084  72657365          DCB      "reset_reasion:%08x\n",0
000088  745f7265
00008c  6173696f
000090  6e3a2530
000094  38780a00
                  |L3.152|
000098  45524553          DCB      "ERESET\n",0
00009c  45540a00
                  |L3.160|
0000a0  49524553          DCB      "IRESET0\n",0
0000a4  4554300a
0000a8  00      
0000a9  00                DCB      0
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L3.172|
0000ac  49524553          DCB      "IRESET1\n",0
0000b0  4554310a
0000b4  00      
0000b5  00                DCB      0
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L3.184|
0000b8  52455345          DCB      "RESET NORMAL\n",0
0000bc  54204e4f
0000c0  524d414c
0000c4  0a00    
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L3.200|
0000c8  52455345          DCB      "RESET FOR WPS\n",0
0000cc  5420464f
0000d0  52205750
0000d4  530a00  
0000d7  00                DCB      0
                  |L3.216|
0000d8  52455345          DCB      "RESET FOR SMARTLINK START\n",0
0000dc  5420464f
0000e0  5220534d
0000e4  4152544c
0000e8  494e4b20
0000ec  53544152
0000f0  540a00  
0000f3  00                DCB      0
                  |L3.244|
0000f4  52455345          DCB      "RESET FOR SMARTLINK OK\n",0
0000f8  5420464f
0000fc  5220534d
000100  4152544c
000104  494e4b20
000108  4f4b0a00
                  |L3.268|
00010c  52455345          DCB      "RESET FOR WPS OK\n",0
000110  5420464f
000114  52205750
000118  53204f4b
00011c  0a00    
00011e  00                DCB      0
00011f  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  hf_gpio_fid_to_pid_map_table
                          DCD      0x00080002
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00080005
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x008b0027
                          DCD      0x008b0028
                          DCD      0x008b0029
                          DCD      0x008b002a
                          DCD      0x028b001b
                          DCD      0x008b001c
                          DCD      0x028b001d
                          DCD      0x008b001e
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x0083002b
                          DCD      0x0083002c
                          DCD      0x0083002d
                          DCD      0x02830007
                          DCD      0x02830008
                          DCD      0x008b000f
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x0083000d
                          DCD      0x01830014
                          DCD      0x0383000b
                          DCD      0x0383000c
                          DCD      0x01830012
                          DCD      0x03830017
                          %        244
                  user_define_at_cmds_table
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
