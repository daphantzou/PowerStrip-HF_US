; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\cjson.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\cjson.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=494 -I../sdk/1.50/include/ -I../inc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -D__KEIL_MDK__ -D__LPB100__ --enum_is_int --omf_browse=.\output\cjson.crf ..\src\cJSON.c]
                          THUMB

                          AREA ||i.cJSON_AddItemReferenceToArray||, CODE, READONLY, ALIGN=1

                  cJSON_AddItemReferenceToArray PROC
;;;562    void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}
;;;563    void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       create_reference
00000c  4606              MOV      r6,r0
00000e  4631              MOV      r1,r6
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       cJSON_AddItemToArray
000016  bd70              POP      {r4-r6,pc}
;;;564    void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item)	{cJSON_AddItemToObject(object,string,create_reference(item));}
                          ENDP


                          AREA ||i.cJSON_AddItemReferenceToObject||, CODE, READONLY, ALIGN=1

                  cJSON_AddItemReferenceToObject PROC
;;;563    void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}
;;;564    void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item)	{cJSON_AddItemToObject(object,string,create_reference(item));}
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       create_reference
000010  4607              MOV      r7,r0
000012  463a              MOV      r2,r7
000014  4631              MOV      r1,r6
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       cJSON_AddItemToObject
00001c  e8bd81f0          POP      {r4-r8,pc}
;;;565    
                          ENDP


                          AREA ||i.cJSON_AddItemToArray||, CODE, READONLY, ALIGN=1

                  cJSON_AddItemToArray PROC
;;;560    /* Add item to array/object. */
;;;561    void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  68ac              LDR      r4,[r5,#8]
000008  b906              CBNZ     r6,|L3.12|
                  |L3.10|
00000a  bd70              POP      {r4-r6,pc}
                  |L3.12|
00000c  b90c              CBNZ     r4,|L3.18|
00000e  60ae              STR      r6,[r5,#8]
000010  e009              B        |L3.38|
                  |L3.18|
000012  e000              B        |L3.22|
                  |L3.20|
000014  6824              LDR      r4,[r4,#0]
                  |L3.22|
000016  b114              CBZ      r4,|L3.30|
000018  6820              LDR      r0,[r4,#0]
00001a  2800              CMP      r0,#0
00001c  d1fa              BNE      |L3.20|
                  |L3.30|
00001e  4631              MOV      r1,r6
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       suffix_object
                  |L3.38|
000026  bf00              NOP      
000028  e7ef              B        |L3.10|
;;;562    void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}
                          ENDP


                          AREA ||i.cJSON_AddItemToObject||, CODE, READONLY, ALIGN=2

                  cJSON_AddItemToObject PROC
;;;561    void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}
;;;562    void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
000008  b904              CBNZ     r4,|L4.12|
                  |L4.10|
00000a  bd70              POP      {r4-r6,pc}
                  |L4.12|
00000c  6a20              LDR      r0,[r4,#0x20]
00000e  b118              CBZ      r0,|L4.24|
000010  4906              LDR      r1,|L4.44|
000012  6a20              LDR      r0,[r4,#0x20]
000014  6809              LDR      r1,[r1,#0]  ; cJSON_free
000016  4788              BLX      r1
                  |L4.24|
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       cJSON_strdup
00001e  6220              STR      r0,[r4,#0x20]
000020  4621              MOV      r1,r4
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       cJSON_AddItemToArray
000028  bf00              NOP      
00002a  e7ee              B        |L4.10|
;;;563    void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}
                          ENDP

                  |L4.44|
                          DCD      cJSON_free

                          AREA ||i.cJSON_CreateArray||, CODE, READONLY, ALIGN=1

                  cJSON_CreateArray PROC
;;;584    cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}
;;;585    cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       cJSON_New_Item
000006  4604              MOV      r4,r0
000008  b10c              CBZ      r4,|L5.14|
00000a  2005              MOVS     r0,#5
00000c  60e0              STR      r0,[r4,#0xc]
                  |L5.14|
00000e  4620              MOV      r0,r4
000010  bd10              POP      {r4,pc}
;;;586    cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}
                          ENDP


                          AREA ||i.cJSON_CreateBool||, CODE, READONLY, ALIGN=1

                  cJSON_CreateBool PROC
;;;581    cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}
;;;582    cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  f7fffffe          BL       cJSON_New_Item
000008  4604              MOV      r4,r0
00000a  b124              CBZ      r4,|L6.22|
00000c  b10d              CBZ      r5,|L6.18|
00000e  2001              MOVS     r0,#1
000010  e000              B        |L6.20|
                  |L6.18|
000012  2000              MOVS     r0,#0
                  |L6.20|
000014  60e0              STR      r0,[r4,#0xc]
                  |L6.22|
000016  4620              MOV      r0,r4
000018  bd70              POP      {r4-r6,pc}
;;;583    cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}
                          ENDP


                          AREA ||i.cJSON_CreateDoubleArray||, CODE, READONLY, ALIGN=1

                  cJSON_CreateDoubleArray PROC
;;;590    cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
;;;591    cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  2500              MOVS     r5,#0
00000a  46a9              MOV      r9,r5
00000c  f7fffffe          BL       cJSON_CreateArray
000010  4606              MOV      r6,r0
000012  2400              MOVS     r4,#0
000014  e010              B        |L7.56|
                  |L7.22|
000016  eb0700c4          ADD      r0,r7,r4,LSL #3
00001a  e9d02100          LDRD     r2,r1,[r0,#0]
00001e  4610              MOV      r0,r2
000020  f7fffffe          BL       cJSON_CreateNumber
000024  4605              MOV      r5,r0
000026  b90c              CBNZ     r4,|L7.44|
000028  60b5              STR      r5,[r6,#8]
00002a  e003              B        |L7.52|
                  |L7.44|
00002c  4629              MOV      r1,r5
00002e  4648              MOV      r0,r9
000030  f7fffffe          BL       suffix_object
                  |L7.52|
000034  46a9              MOV      r9,r5
000036  1c64              ADDS     r4,r4,#1
                  |L7.56|
000038  b10e              CBZ      r6,|L7.62|
00003a  4544              CMP      r4,r8
00003c  dbeb              BLT      |L7.22|
                  |L7.62|
00003e  4630              MOV      r0,r6
000040  e8bd87f0          POP      {r4-r10,pc}
;;;592    cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
                          ENDP


                          AREA ||i.cJSON_CreateFalse||, CODE, READONLY, ALIGN=1

                  cJSON_CreateFalse PROC
;;;580    cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}
;;;581    cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       cJSON_New_Item
000006  4604              MOV      r4,r0
000008  b10c              CBZ      r4,|L8.14|
00000a  2000              MOVS     r0,#0
00000c  60e0              STR      r0,[r4,#0xc]
                  |L8.14|
00000e  4620              MOV      r0,r4
000010  bd10              POP      {r4,pc}
;;;582    cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}
                          ENDP


                          AREA ||i.cJSON_CreateFloatArray||, CODE, READONLY, ALIGN=1

                  cJSON_CreateFloatArray PROC
;;;589    cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
;;;590    cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4681              MOV      r9,r0
000006  468a              MOV      r10,r1
000008  2500              MOVS     r5,#0
00000a  46ab              MOV      r11,r5
00000c  f7fffffe          BL       cJSON_CreateArray
000010  4606              MOV      r6,r0
000012  2400              MOVS     r4,#0
000014  e010              B        |L9.56|
                  |L9.22|
000016  f8590024          LDR      r0,[r9,r4,LSL #2]
00001a  f7fffffe          BL       __aeabi_f2d
00001e  4607              MOV      r7,r0
000020  f7fffffe          BL       cJSON_CreateNumber
000024  4605              MOV      r5,r0
000026  b90c              CBNZ     r4,|L9.44|
000028  60b5              STR      r5,[r6,#8]
00002a  e003              B        |L9.52|
                  |L9.44|
00002c  4629              MOV      r1,r5
00002e  4658              MOV      r0,r11
000030  f7fffffe          BL       suffix_object
                  |L9.52|
000034  46ab              MOV      r11,r5
000036  1c64              ADDS     r4,r4,#1
                  |L9.56|
000038  b10e              CBZ      r6,|L9.62|
00003a  4554              CMP      r4,r10
00003c  dbeb              BLT      |L9.22|
                  |L9.62|
00003e  4630              MOV      r0,r6
000040  e8bd9ff0          POP      {r4-r12,pc}
;;;591    cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
                          ENDP


                          AREA ||i.cJSON_CreateIntArray||, CODE, READONLY, ALIGN=1

                  cJSON_CreateIntArray PROC
;;;588    /* Create Arrays: */
;;;589    cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4681              MOV      r9,r0
000006  468a              MOV      r10,r1
000008  2500              MOVS     r5,#0
00000a  46ab              MOV      r11,r5
00000c  f7fffffe          BL       cJSON_CreateArray
000010  4606              MOV      r6,r0
000012  2400              MOVS     r4,#0
000014  e010              B        |L10.56|
                  |L10.22|
000016  f8590024          LDR      r0,[r9,r4,LSL #2]
00001a  f7fffffe          BL       __aeabi_i2d
00001e  4607              MOV      r7,r0
000020  f7fffffe          BL       cJSON_CreateNumber
000024  4605              MOV      r5,r0
000026  b90c              CBNZ     r4,|L10.44|
000028  60b5              STR      r5,[r6,#8]
00002a  e003              B        |L10.52|
                  |L10.44|
00002c  4629              MOV      r1,r5
00002e  4658              MOV      r0,r11
000030  f7fffffe          BL       suffix_object
                  |L10.52|
000034  46ab              MOV      r11,r5
000036  1c64              ADDS     r4,r4,#1
                  |L10.56|
000038  b10e              CBZ      r6,|L10.62|
00003a  4554              CMP      r4,r10
00003c  dbeb              BLT      |L10.22|
                  |L10.62|
00003e  4630              MOV      r0,r6
000040  e8bd9ff0          POP      {r4-r12,pc}
;;;590    cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
                          ENDP


                          AREA ||i.cJSON_CreateNull||, CODE, READONLY, ALIGN=1

                  cJSON_CreateNull PROC
;;;578    /* Create basic types: */
;;;579    cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       cJSON_New_Item
000006  4604              MOV      r4,r0
000008  b10c              CBZ      r4,|L11.14|
00000a  2002              MOVS     r0,#2
00000c  60e0              STR      r0,[r4,#0xc]
                  |L11.14|
00000e  4620              MOV      r0,r4
000010  bd10              POP      {r4,pc}
;;;580    cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}
                          ENDP


                          AREA ||i.cJSON_CreateNumber||, CODE, READONLY, ALIGN=1

                  cJSON_CreateNumber PROC
;;;582    cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}
;;;583    cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  f7fffffe          BL       cJSON_New_Item
00000a  4604              MOV      r4,r0
00000c  b144              CBZ      r4,|L12.32|
00000e  2003              MOVS     r0,#3
000010  60e0              STR      r0,[r4,#0xc]
000012  e9c45606          STRD     r5,r6,[r4,#0x18]
000016  4628              MOV      r0,r5
000018  4631              MOV      r1,r6
00001a  f7fffffe          BL       __aeabi_d2iz
00001e  6160              STR      r0,[r4,#0x14]
                  |L12.32|
000020  4620              MOV      r0,r4
000022  bd70              POP      {r4-r6,pc}
;;;584    cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}
                          ENDP


                          AREA ||i.cJSON_CreateObject||, CODE, READONLY, ALIGN=1

                  cJSON_CreateObject PROC
;;;585    cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}
;;;586    cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       cJSON_New_Item
000006  4604              MOV      r4,r0
000008  b10c              CBZ      r4,|L13.14|
00000a  2006              MOVS     r0,#6
00000c  60e0              STR      r0,[r4,#0xc]
                  |L13.14|
00000e  4620              MOV      r0,r4
000010  bd10              POP      {r4,pc}
;;;587    
                          ENDP


                          AREA ||i.cJSON_CreateString||, CODE, READONLY, ALIGN=1

                  cJSON_CreateString PROC
;;;583    cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}
;;;584    cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  f7fffffe          BL       cJSON_New_Item
000008  4604              MOV      r4,r0
00000a  b12c              CBZ      r4,|L14.24|
00000c  2004              MOVS     r0,#4
00000e  60e0              STR      r0,[r4,#0xc]
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       cJSON_strdup
000016  6120              STR      r0,[r4,#0x10]
                  |L14.24|
000018  4620              MOV      r0,r4
00001a  bd70              POP      {r4-r6,pc}
;;;585    cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}
                          ENDP


                          AREA ||i.cJSON_CreateStringArray||, CODE, READONLY, ALIGN=1

                  cJSON_CreateStringArray PROC
;;;591    cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
;;;592    cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  2500              MOVS     r5,#0
00000a  46a9              MOV      r9,r5
00000c  f7fffffe          BL       cJSON_CreateArray
000010  4606              MOV      r6,r0
000012  2400              MOVS     r4,#0
000014  e00d              B        |L15.50|
                  |L15.22|
000016  f8570024          LDR      r0,[r7,r4,LSL #2]
00001a  f7fffffe          BL       cJSON_CreateString
00001e  4605              MOV      r5,r0
000020  b90c              CBNZ     r4,|L15.38|
000022  60b5              STR      r5,[r6,#8]
000024  e003              B        |L15.46|
                  |L15.38|
000026  4629              MOV      r1,r5
000028  4648              MOV      r0,r9
00002a  f7fffffe          BL       suffix_object
                  |L15.46|
00002e  46a9              MOV      r9,r5
000030  1c64              ADDS     r4,r4,#1
                  |L15.50|
000032  b10e              CBZ      r6,|L15.56|
000034  4544              CMP      r4,r8
000036  dbee              BLT      |L15.22|
                  |L15.56|
000038  4630              MOV      r0,r6
00003a  e8bd87f0          POP      {r4-r10,pc}
;;;593    
                          ENDP


                          AREA ||i.cJSON_CreateTrue||, CODE, READONLY, ALIGN=1

                  cJSON_CreateTrue PROC
;;;579    cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}
;;;580    cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       cJSON_New_Item
000006  4604              MOV      r4,r0
000008  b10c              CBZ      r4,|L16.14|
00000a  2001              MOVS     r0,#1
00000c  60e0              STR      r0,[r4,#0xc]
                  |L16.14|
00000e  4620              MOV      r0,r4
000010  bd10              POP      {r4,pc}
;;;581    cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}
                          ENDP


                          AREA ||i.cJSON_Delete||, CODE, READONLY, ALIGN=2

                  cJSON_Delete PROC
;;;100    /* Delete a cJSON structure. */
;;;101    void cJSON_Delete(cJSON *c)
000000  b570              PUSH     {r4-r6,lr}
;;;102    {
000002  4604              MOV      r4,r0
;;;103    	cJSON *next;
;;;104    	while (c)
000004  e01e              B        |L17.68|
                  |L17.6|
;;;105    	{
;;;106    		next=c->next;
000006  6825              LDR      r5,[r4,#0]
;;;107    		if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
000008  89a0              LDRH     r0,[r4,#0xc]
00000a  f4107f80          TST      r0,#0x100
00000e  d104              BNE      |L17.26|
000010  68a0              LDR      r0,[r4,#8]
000012  b110              CBZ      r0,|L17.26|
000014  68a0              LDR      r0,[r4,#8]
000016  f7fffffe          BL       cJSON_Delete
                  |L17.26|
;;;108    		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
00001a  89a0              LDRH     r0,[r4,#0xc]
00001c  f4107f80          TST      r0,#0x100
000020  d105              BNE      |L17.46|
000022  6920              LDR      r0,[r4,#0x10]
000024  b118              CBZ      r0,|L17.46|
000026  4909              LDR      r1,|L17.76|
000028  6920              LDR      r0,[r4,#0x10]
00002a  6809              LDR      r1,[r1,#0]  ; cJSON_free
00002c  4788              BLX      r1
                  |L17.46|
;;;109    		if (c->string) cJSON_free(c->string);
00002e  6a20              LDR      r0,[r4,#0x20]
000030  b118              CBZ      r0,|L17.58|
000032  4906              LDR      r1,|L17.76|
000034  6a20              LDR      r0,[r4,#0x20]
000036  6809              LDR      r1,[r1,#0]  ; cJSON_free
000038  4788              BLX      r1
                  |L17.58|
;;;110    		cJSON_free(c);
00003a  4620              MOV      r0,r4
00003c  4903              LDR      r1,|L17.76|
00003e  6809              LDR      r1,[r1,#0]  ; cJSON_free
000040  4788              BLX      r1
;;;111    		c=next;
000042  462c              MOV      r4,r5
                  |L17.68|
000044  2c00              CMP      r4,#0                 ;104
000046  d1de              BNE      |L17.6|
;;;112    	}
;;;113    }
000048  bd70              POP      {r4-r6,pc}
;;;114    
                          ENDP

00004a  0000              DCW      0x0000
                  |L17.76|
                          DCD      cJSON_free

                          AREA ||i.cJSON_DeleteItemFromArray||, CODE, READONLY, ALIGN=1

                  cJSON_DeleteItemFromArray PROC
;;;567    	if (c->prev) c->prev->next=c->next;if (c->next) c->next->prev=c->prev;if (c==array->child) array->child=c->next;c->prev=c->next=0;return c;}
;;;568    void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       cJSON_DetachItemFromArray
00000e  4606              MOV      r6,r0
000010  f7fffffe          BL       cJSON_Delete
000014  bd70              POP      {r4-r6,pc}
;;;569    cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}
                          ENDP


                          AREA ||i.cJSON_DeleteItemFromObject||, CODE, READONLY, ALIGN=1

                  cJSON_DeleteItemFromObject PROC
;;;569    cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}
;;;570    void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       cJSON_DetachItemFromObject
00000e  4606              MOV      r6,r0
000010  f7fffffe          BL       cJSON_Delete
000014  bd70              POP      {r4-r6,pc}
;;;571    
                          ENDP


                          AREA ||i.cJSON_DetachItemFromArray||, CODE, READONLY, ALIGN=1

                  cJSON_DetachItemFromArray PROC
;;;565    
;;;566    cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return 0;
000000  b510              PUSH     {r4,lr}
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
000006  6891              LDR      r1,[r2,#8]
000008  e001              B        |L20.14|
                  |L20.10|
00000a  6809              LDR      r1,[r1,#0]
00000c  1e5b              SUBS     r3,r3,#1
                  |L20.14|
00000e  b109              CBZ      r1,|L20.20|
000010  2b00              CMP      r3,#0
000012  dcfa              BGT      |L20.10|
                  |L20.20|
000014  b909              CBNZ     r1,|L20.26|
000016  2000              MOVS     r0,#0
                  |L20.24|
;;;567    	if (c->prev) c->prev->next=c->next;if (c->next) c->next->prev=c->prev;if (c==array->child) array->child=c->next;c->prev=c->next=0;return c;}
000018  bd10              POP      {r4,pc}
                  |L20.26|
00001a  6848              LDR      r0,[r1,#4]
00001c  b110              CBZ      r0,|L20.36|
00001e  e9d10400          LDRD     r0,r4,[r1,#0]
000022  6020              STR      r0,[r4,#0]
                  |L20.36|
000024  6808              LDR      r0,[r1,#0]
000026  b110              CBZ      r0,|L20.46|
000028  e9d14000          LDRD     r4,r0,[r1,#0]
00002c  6060              STR      r0,[r4,#4]
                  |L20.46|
00002e  6890              LDR      r0,[r2,#8]
000030  4288              CMP      r0,r1
000032  d101              BNE      |L20.56|
000034  6808              LDR      r0,[r1,#0]
000036  6090              STR      r0,[r2,#8]
                  |L20.56|
000038  2000              MOVS     r0,#0
00003a  6008              STR      r0,[r1,#0]
00003c  6048              STR      r0,[r1,#4]
00003e  4608              MOV      r0,r1
000040  e7ea              B        |L20.24|
;;;568    void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}
                          ENDP


                          AREA ||i.cJSON_DetachItemFromObject||, CODE, READONLY, ALIGN=1

                  cJSON_DetachItemFromObject PROC
;;;568    void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}
;;;569    cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  2600              MOVS     r6,#0
00000a  68ac              LDR      r4,[r5,#8]
00000c  e001              B        |L21.18|
                  |L21.14|
00000e  1c76              ADDS     r6,r6,#1
000010  6824              LDR      r4,[r4,#0]
                  |L21.18|
000012  b12c              CBZ      r4,|L21.32|
000014  4639              MOV      r1,r7
000016  6a20              LDR      r0,[r4,#0x20]
000018  f7fffffe          BL       cJSON_strcasecmp
00001c  2800              CMP      r0,#0
00001e  d1f6              BNE      |L21.14|
                  |L21.32|
000020  b12c              CBZ      r4,|L21.46|
000022  4631              MOV      r1,r6
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       cJSON_DetachItemFromArray
                  |L21.42|
00002a  e8bd81f0          POP      {r4-r8,pc}
                  |L21.46|
00002e  2000              MOVS     r0,#0
000030  e7fb              B        |L21.42|
;;;570    void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}
                          ENDP


                          AREA ||i.cJSON_Duplicate||, CODE, READONLY, ALIGN=1

                  cJSON_Duplicate PROC
;;;594    /* Duplication */
;;;595    cJSON *cJSON_Duplicate(cJSON *item,int recurse)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;596    {
000004  4605              MOV      r5,r0
000006  4689              MOV      r9,r1
;;;597    	cJSON *newitem,*cptr,*nptr=0,*newchild;
000008  f04f0800          MOV      r8,#0
;;;598    	/* Bail on bad ptr */
;;;599    	if (!item) return 0;
00000c  b915              CBNZ     r5,|L22.20|
00000e  2000              MOVS     r0,#0
                  |L22.16|
;;;600    	/* Create new item */
;;;601    	newitem=cJSON_New_Item();
;;;602    	if (!newitem) return 0;
;;;603    	/* Copy over all vars */
;;;604    	newitem->type=item->type&(~cJSON_IsReference),newitem->valueint=item->valueint,newitem->valuedouble=item->valuedouble;
;;;605    	if (item->valuestring)	{newitem->valuestring=cJSON_strdup(item->valuestring);	if (!newitem->valuestring)	{cJSON_Delete(newitem);return 0;}}
;;;606    	if (item->string)		{newitem->string=cJSON_strdup(item->string);			if (!newitem->string)		{cJSON_Delete(newitem);return 0;}}
;;;607    	/* If non-recursive, then we're done! */
;;;608    	if (!recurse) return newitem;
;;;609    	/* Walk the ->next chain for the child. */
;;;610    	cptr=item->child;
;;;611    	while (cptr)
;;;612    	{
;;;613    		newchild=cJSON_Duplicate(cptr,1);		/* Duplicate (with recurse) each item in the ->next chain */
;;;614    		if (!newchild) {cJSON_Delete(newitem);return 0;}
;;;615    		if (nptr)	{nptr->next=newchild,newchild->prev=nptr;nptr=newchild;}	/* If newitem->child already set, then crosswire ->prev and ->next and move on */
;;;616    		else		{newitem->child=newchild;nptr=newchild;}					/* Set newitem->child and move to it */
;;;617    		cptr=cptr->next;
;;;618    	}
;;;619    	return newitem;
;;;620    }
000010  e8bd87f0          POP      {r4-r10,pc}
                  |L22.20|
000014  f7fffffe          BL       cJSON_New_Item
000018  4604              MOV      r4,r0                 ;601
00001a  b90c              CBNZ     r4,|L22.32|
00001c  2000              MOVS     r0,#0                 ;602
00001e  e7f7              B        |L22.16|
                  |L22.32|
000020  68e8              LDR      r0,[r5,#0xc]          ;604
000022  f4207080          BIC      r0,r0,#0x100          ;604
000026  60e0              STR      r0,[r4,#0xc]          ;604
000028  6968              LDR      r0,[r5,#0x14]         ;604
00002a  6160              STR      r0,[r4,#0x14]         ;604
00002c  e9d50106          LDRD     r0,r1,[r5,#0x18]      ;604
000030  e9c40106          STRD     r0,r1,[r4,#0x18]      ;604
000034  6928              LDR      r0,[r5,#0x10]         ;605
000036  b150              CBZ      r0,|L22.78|
000038  6928              LDR      r0,[r5,#0x10]         ;605
00003a  f7fffffe          BL       cJSON_strdup
00003e  6120              STR      r0,[r4,#0x10]         ;605
000040  6920              LDR      r0,[r4,#0x10]         ;605
000042  b920              CBNZ     r0,|L22.78|
000044  4620              MOV      r0,r4                 ;605
000046  f7fffffe          BL       cJSON_Delete
00004a  2000              MOVS     r0,#0                 ;605
00004c  e7e0              B        |L22.16|
                  |L22.78|
00004e  6a28              LDR      r0,[r5,#0x20]         ;606
000050  b150              CBZ      r0,|L22.104|
000052  6a28              LDR      r0,[r5,#0x20]         ;606
000054  f7fffffe          BL       cJSON_strdup
000058  6220              STR      r0,[r4,#0x20]         ;606
00005a  6a20              LDR      r0,[r4,#0x20]         ;606
00005c  b920              CBNZ     r0,|L22.104|
00005e  4620              MOV      r0,r4                 ;606
000060  f7fffffe          BL       cJSON_Delete
000064  2000              MOVS     r0,#0                 ;606
000066  e7d3              B        |L22.16|
                  |L22.104|
000068  f1b90f00          CMP      r9,#0                 ;608
00006c  d101              BNE      |L22.114|
00006e  4620              MOV      r0,r4                 ;608
000070  e7ce              B        |L22.16|
                  |L22.114|
000072  68af              LDR      r7,[r5,#8]            ;610
000074  e016              B        |L22.164|
                  |L22.118|
000076  2101              MOVS     r1,#1                 ;613
000078  4638              MOV      r0,r7                 ;613
00007a  f7fffffe          BL       cJSON_Duplicate
00007e  4606              MOV      r6,r0                 ;613
000080  b926              CBNZ     r6,|L22.140|
000082  4620              MOV      r0,r4                 ;614
000084  f7fffffe          BL       cJSON_Delete
000088  2000              MOVS     r0,#0                 ;614
00008a  e7c1              B        |L22.16|
                  |L22.140|
00008c  f1b80f00          CMP      r8,#0                 ;615
000090  d005              BEQ      |L22.158|
000092  f8c86000          STR      r6,[r8,#0]            ;615
000096  f8c68004          STR      r8,[r6,#4]            ;615
00009a  46b0              MOV      r8,r6                 ;615
00009c  e001              B        |L22.162|
                  |L22.158|
00009e  60a6              STR      r6,[r4,#8]            ;616
0000a0  46b0              MOV      r8,r6                 ;616
                  |L22.162|
0000a2  683f              LDR      r7,[r7,#0]            ;617
                  |L22.164|
0000a4  2f00              CMP      r7,#0                 ;611
0000a6  d1e6              BNE      |L22.118|
0000a8  4620              MOV      r0,r4                 ;619
0000aa  e7b1              B        |L22.16|
;;;621    
                          ENDP


                          AREA ||i.cJSON_GetArrayItem||, CODE, READONLY, ALIGN=1

                  cJSON_GetArrayItem PROC
;;;551    int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}
;;;552    cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}
000000  4602              MOV      r2,r0
000002  6890              LDR      r0,[r2,#8]
000004  e001              B        |L23.10|
                  |L23.6|
000006  1e49              SUBS     r1,r1,#1
000008  6800              LDR      r0,[r0,#0]
                  |L23.10|
00000a  b108              CBZ      r0,|L23.16|
00000c  2900              CMP      r1,#0
00000e  dcfa              BGT      |L23.6|
                  |L23.16|
000010  4770              BX       lr
;;;553    cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}
                          ENDP


                          AREA ||i.cJSON_GetArraySize||, CODE, READONLY, ALIGN=1

                  cJSON_GetArraySize PROC
;;;550    /* Get Array size/item / object item. */
;;;551    int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}
000000  4601              MOV      r1,r0
000002  688a              LDR      r2,[r1,#8]
000004  2000              MOVS     r0,#0
000006  e001              B        |L24.12|
                  |L24.8|
000008  1c40              ADDS     r0,r0,#1
00000a  6812              LDR      r2,[r2,#0]
                  |L24.12|
00000c  2a00              CMP      r2,#0
00000e  d1fb              BNE      |L24.8|
000010  4770              BX       lr
;;;552    cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}
                          ENDP


                          AREA ||i.cJSON_GetErrorPtr||, CODE, READONLY, ALIGN=2

                  cJSON_GetErrorPtr PROC
;;;36     
;;;37     const char *cJSON_GetErrorPtr(void) {return ep;}
000000  4801              LDR      r0,|L25.8|
000002  6800              LDR      r0,[r0,#0]  ; ep
000004  4770              BX       lr
;;;38     
                          ENDP

000006  0000              DCW      0x0000
                  |L25.8|
                          DCD      ||ep||

                          AREA ||i.cJSON_GetObjectItem||, CODE, READONLY, ALIGN=1

                  cJSON_GetObjectItem PROC
;;;552    cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}
;;;553    cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  68ac              LDR      r4,[r5,#8]
000008  e000              B        |L26.12|
                  |L26.10|
00000a  6824              LDR      r4,[r4,#0]
                  |L26.12|
00000c  b12c              CBZ      r4,|L26.26|
00000e  4631              MOV      r1,r6
000010  6a20              LDR      r0,[r4,#0x20]
000012  f7fffffe          BL       cJSON_strcasecmp
000016  2800              CMP      r0,#0
000018  d1f7              BNE      |L26.10|
                  |L26.26|
00001a  4620              MOV      r0,r4
00001c  bd70              POP      {r4-r6,pc}
;;;554    
                          ENDP


                          AREA ||i.cJSON_InitHooks||, CODE, READONLY, ALIGN=2

                  cJSON_InitHooks PROC
;;;69     
;;;70     void cJSON_InitHooks(cJSON_Hooks* hooks)
000000  b930              CBNZ     r0,|L27.16|
;;;71     {
;;;72         if (!hooks) { /* Reset hooks */
;;;73            #if defined(__LWIP_MEM_MANAGET__)
;;;74             cJSON_malloc = mem_malloc;
;;;75             cJSON_free   = mem_free;
;;;76             #else
;;;77             cJSON_malloc = hfmem_malloc;
000002  490b              LDR      r1,|L27.48|
000004  4a0b              LDR      r2,|L27.52|
000006  6011              STR      r1,[r2,#0]  ; cJSON_malloc
;;;78             cJSON_free   = hfmem_free;
000008  490b              LDR      r1,|L27.56|
00000a  4a0c              LDR      r2,|L27.60|
00000c  6011              STR      r1,[r2,#0]  ; cJSON_free
                  |L27.14|
;;;79            #endif 
;;;80             return;
;;;81         }
;;;82     
;;;83        #if defined(__LWIP_MEM_MANAGET__)
;;;84     	cJSON_malloc = (hooks->malloc_fn)?hooks->malloc_fn:mem_malloc;
;;;85     	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:mem_free;
;;;86     	#else
;;;87     	cJSON_malloc = (hooks->malloc_fn)?hooks->malloc_fn:hfmem_malloc;
;;;88     	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:hfmem_free;
;;;89        #endif 
;;;90     }
00000e  4770              BX       lr
                  |L27.16|
000010  6801              LDR      r1,[r0,#0]            ;87
000012  b109              CBZ      r1,|L27.24|
000014  6801              LDR      r1,[r0,#0]            ;87
000016  e000              B        |L27.26|
                  |L27.24|
000018  4905              LDR      r1,|L27.48|
                  |L27.26|
00001a  4a06              LDR      r2,|L27.52|
00001c  6011              STR      r1,[r2,#0]            ;87  ; cJSON_malloc
00001e  6841              LDR      r1,[r0,#4]            ;88
000020  b109              CBZ      r1,|L27.38|
000022  6841              LDR      r1,[r0,#4]            ;88
000024  e000              B        |L27.40|
                  |L27.38|
000026  4904              LDR      r1,|L27.56|
                  |L27.40|
000028  4a04              LDR      r2,|L27.60|
00002a  6011              STR      r1,[r2,#0]            ;88  ; cJSON_free
00002c  bf00              NOP      
00002e  e7ee              B        |L27.14|
;;;91     
                          ENDP

                  |L27.48|
                          DCD      hfmem_malloc
                  |L27.52|
                          DCD      cJSON_malloc
                  |L27.56|
                          DCD      hfmem_free
                  |L27.60|
                          DCD      cJSON_free

                          AREA ||i.cJSON_Minify||, CODE, READONLY, ALIGN=1

                  cJSON_Minify PROC
;;;621    
;;;622    void cJSON_Minify(char *json)
000000  4601              MOV      r1,r0
;;;623    {
;;;624    	char *into=json;
;;;625    	while (*json)
000002  e055              B        |L28.176|
                  |L28.4|
;;;626    	{
;;;627    		if (*json==' ') json++;
000004  7802              LDRB     r2,[r0,#0]
000006  2a20              CMP      r2,#0x20
000008  d101              BNE      |L28.14|
00000a  1c40              ADDS     r0,r0,#1
00000c  e050              B        |L28.176|
                  |L28.14|
;;;628    		else if (*json=='\t') json++;	// Whitespace characters.
00000e  7802              LDRB     r2,[r0,#0]
000010  2a09              CMP      r2,#9
000012  d101              BNE      |L28.24|
000014  1c40              ADDS     r0,r0,#1
000016  e04b              B        |L28.176|
                  |L28.24|
;;;629    		else if (*json=='\r') json++;
000018  7802              LDRB     r2,[r0,#0]
00001a  2a0d              CMP      r2,#0xd
00001c  d101              BNE      |L28.34|
00001e  1c40              ADDS     r0,r0,#1
000020  e046              B        |L28.176|
                  |L28.34|
;;;630    		else if (*json=='\n') json++;
000022  7802              LDRB     r2,[r0,#0]
000024  2a0a              CMP      r2,#0xa
000026  d101              BNE      |L28.44|
000028  1c40              ADDS     r0,r0,#1
00002a  e041              B        |L28.176|
                  |L28.44|
;;;631    		else if (*json=='/' && json[1]=='/')  while (*json && *json!='\n') json++;	// double-slash comments, to end of line.
00002c  7802              LDRB     r2,[r0,#0]
00002e  2a2f              CMP      r2,#0x2f
000030  d10b              BNE      |L28.74|
000032  7842              LDRB     r2,[r0,#1]
000034  2a2f              CMP      r2,#0x2f
000036  d108              BNE      |L28.74|
000038  e000              B        |L28.60|
                  |L28.58|
00003a  1c40              ADDS     r0,r0,#1
                  |L28.60|
00003c  7802              LDRB     r2,[r0,#0]
00003e  2a00              CMP      r2,#0
000040  d036              BEQ      |L28.176|
000042  7802              LDRB     r2,[r0,#0]
000044  2a0a              CMP      r2,#0xa
000046  d033              BEQ      |L28.176|
000048  e7f7              B        |L28.58|
                  |L28.74|
;;;632    		else if (*json=='/' && json[1]=='*') {while (*json && !(*json=='*' && json[1]=='/')) json++;json+=2;}	// multiline comments.
00004a  7802              LDRB     r2,[r0,#0]
00004c  2a2f              CMP      r2,#0x2f
00004e  d10e              BNE      |L28.110|
000050  7842              LDRB     r2,[r0,#1]
000052  2a2a              CMP      r2,#0x2a
000054  d10b              BNE      |L28.110|
000056  e000              B        |L28.90|
                  |L28.88|
000058  1c40              ADDS     r0,r0,#1
                  |L28.90|
00005a  7802              LDRB     r2,[r0,#0]
00005c  b12a              CBZ      r2,|L28.106|
00005e  7802              LDRB     r2,[r0,#0]
000060  2a2a              CMP      r2,#0x2a
000062  d1f9              BNE      |L28.88|
000064  7842              LDRB     r2,[r0,#1]
000066  2a2f              CMP      r2,#0x2f
000068  d1f6              BNE      |L28.88|
                  |L28.106|
00006a  1c80              ADDS     r0,r0,#2
00006c  e020              B        |L28.176|
                  |L28.110|
;;;633    		else if (*json=='\"'){*into++=*json++;while (*json && *json!='\"'){if (*json=='\\') *into++=*json++;*into++=*json++;}*into++=*json++;} // string literals, which are \" sensitive.
00006e  7802              LDRB     r2,[r0,#0]
000070  2a22              CMP      r2,#0x22
000072  d119              BNE      |L28.168|
000074  f8102b01          LDRB     r2,[r0],#1
000078  f8012b01          STRB     r2,[r1],#1
00007c  e00a              B        |L28.148|
                  |L28.126|
00007e  7802              LDRB     r2,[r0,#0]
000080  2a5c              CMP      r2,#0x5c
000082  d103              BNE      |L28.140|
000084  f8102b01          LDRB     r2,[r0],#1
000088  f8012b01          STRB     r2,[r1],#1
                  |L28.140|
00008c  f8102b01          LDRB     r2,[r0],#1
000090  f8012b01          STRB     r2,[r1],#1
                  |L28.148|
000094  7802              LDRB     r2,[r0,#0]
000096  b112              CBZ      r2,|L28.158|
000098  7802              LDRB     r2,[r0,#0]
00009a  2a22              CMP      r2,#0x22
00009c  d1ef              BNE      |L28.126|
                  |L28.158|
00009e  f8102b01          LDRB     r2,[r0],#1
0000a2  f8012b01          STRB     r2,[r1],#1
0000a6  e003              B        |L28.176|
                  |L28.168|
;;;634    		else *into++=*json++;			// All other characters.
0000a8  f8102b01          LDRB     r2,[r0],#1
0000ac  f8012b01          STRB     r2,[r1],#1
                  |L28.176|
0000b0  7802              LDRB     r2,[r0,#0]            ;625
0000b2  2a00              CMP      r2,#0                 ;625
0000b4  d1a6              BNE      |L28.4|
;;;635    	}
;;;636    	*into=0;	// and null-terminate.
0000b6  700a              STRB     r2,[r1,#0]
;;;637    }
0000b8  4770              BX       lr
                          ENDP


                          AREA ||i.cJSON_New_Item||, CODE, READONLY, ALIGN=2

                  cJSON_New_Item PROC
;;;92     /* Internal constructor. */
;;;93     static cJSON *cJSON_New_Item(void)
000000  b510              PUSH     {r4,lr}
;;;94     {
;;;95     	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
000002  2028              MOVS     r0,#0x28
000004  4905              LDR      r1,|L29.28|
000006  6809              LDR      r1,[r1,#0]  ; cJSON_malloc
000008  4788              BLX      r1
00000a  4604              MOV      r4,r0
;;;96     	if (node) memset(node,0,sizeof(cJSON));
00000c  b11c              CBZ      r4,|L29.22|
00000e  2128              MOVS     r1,#0x28
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       __aeabi_memclr4
                  |L29.22|
;;;97     	return node;
000016  4620              MOV      r0,r4
;;;98     }
000018  bd10              POP      {r4,pc}
;;;99     
                          ENDP

00001a  0000              DCW      0x0000
                  |L29.28|
                          DCD      cJSON_malloc

                          AREA ||i.cJSON_Parse||, CODE, READONLY, ALIGN=1

                  cJSON_Parse PROC
;;;318    /* Default options for cJSON_Parse */
;;;319    cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  2200              MOVS     r2,#0
000006  4611              MOV      r1,r2
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       cJSON_ParseWithOpts
00000e  bd10              POP      {r4,pc}
;;;320    
                          ENDP


                          AREA ||i.cJSON_ParseWithOpts||, CODE, READONLY, ALIGN=2

                  cJSON_ParseWithOpts PROC
;;;302    /* Parse an object - create a new root, and populate. */
;;;303    cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;304    {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;305    	const char *end=0;
00000a  2400              MOVS     r4,#0
;;;306    	cJSON *c=cJSON_New_Item();
00000c  f7fffffe          BL       cJSON_New_Item
000010  4607              MOV      r7,r0
;;;307    	ep=0;
000012  2000              MOVS     r0,#0
000014  4912              LDR      r1,|L31.96|
000016  6008              STR      r0,[r1,#0]  ; ep
;;;308    	if (!c) return 0;       /* memory fail */
000018  b90f              CBNZ     r7,|L31.30|
                  |L31.26|
;;;309    
;;;310    	end=parse_value(c,skip(value));
;;;311    	if (!end)	{cJSON_Delete(c);return 0;}	/* parse failure. ep is set. */
;;;312    
;;;313    	/* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
;;;314    	if (require_null_terminated) {end=skip(end);if (*end) {cJSON_Delete(c);ep=end;return 0;}}
;;;315    	if (return_parse_end) *return_parse_end=end;
;;;316    	return c;
;;;317    }
00001a  e8bd87f0          POP      {r4-r10,pc}
                  |L31.30|
00001e  4640              MOV      r0,r8                 ;310
000020  f7fffffe          BL       skip
000024  4681              MOV      r9,r0                 ;310
000026  4649              MOV      r1,r9                 ;310
000028  4638              MOV      r0,r7                 ;310
00002a  f7fffffe          BL       parse_value
00002e  4604              MOV      r4,r0                 ;310
000030  b924              CBNZ     r4,|L31.60|
000032  4638              MOV      r0,r7                 ;311
000034  f7fffffe          BL       cJSON_Delete
000038  2000              MOVS     r0,#0                 ;311
00003a  e7ee              B        |L31.26|
                  |L31.60|
00003c  b166              CBZ      r6,|L31.88|
00003e  4620              MOV      r0,r4                 ;314
000040  f7fffffe          BL       skip
000044  4604              MOV      r4,r0                 ;314
000046  7820              LDRB     r0,[r4,#0]            ;314
000048  b130              CBZ      r0,|L31.88|
00004a  4638              MOV      r0,r7                 ;314
00004c  f7fffffe          BL       cJSON_Delete
000050  4803              LDR      r0,|L31.96|
000052  6004              STR      r4,[r0,#0]            ;314  ; ep
000054  2000              MOVS     r0,#0                 ;314
000056  e7e0              B        |L31.26|
                  |L31.88|
000058  b105              CBZ      r5,|L31.92|
00005a  602c              STR      r4,[r5,#0]            ;315
                  |L31.92|
00005c  4638              MOV      r0,r7                 ;316
00005e  e7dc              B        |L31.26|
;;;318    /* Default options for cJSON_Parse */
                          ENDP

                  |L31.96|
                          DCD      ||ep||

                          AREA ||i.cJSON_Print||, CODE, READONLY, ALIGN=1

                  cJSON_Print PROC
;;;321    /* Render a cJSON item/entity/structure to text. */
;;;322    char *cJSON_Print(cJSON *item)				{return print_value(item,0,1);}
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  2201              MOVS     r2,#1
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       print_value
00000e  bd10              POP      {r4,pc}
;;;323    char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0);}
                          ENDP


                          AREA ||i.cJSON_PrintUnformatted||, CODE, READONLY, ALIGN=1

                  cJSON_PrintUnformatted PROC
;;;322    char *cJSON_Print(cJSON *item)				{return print_value(item,0,1);}
;;;323    char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0);}
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  2200              MOVS     r2,#0
000006  4611              MOV      r1,r2
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       print_value
00000e  bd10              POP      {r4,pc}
;;;324    
                          ENDP


                          AREA ||i.cJSON_ReplaceItemInArray||, CODE, READONLY, ALIGN=1

                  cJSON_ReplaceItemInArray PROC
;;;572    /* Replace array/object items with new ones. */
;;;573    void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  68b5              LDR      r5,[r6,#8]
00000c  e001              B        |L34.18|
                  |L34.14|
00000e  682d              LDR      r5,[r5,#0]
000010  1e7f              SUBS     r7,r7,#1
                  |L34.18|
000012  b10d              CBZ      r5,|L34.24|
000014  2f00              CMP      r7,#0
000016  dcfa              BGT      |L34.14|
                  |L34.24|
000018  b90d              CBNZ     r5,|L34.30|
                  |L34.26|
;;;574    	newitem->next=c->next;newitem->prev=c->prev;if (newitem->next) newitem->next->prev=newitem;
;;;575    	if (c==array->child) array->child=newitem; else newitem->prev->next=newitem;c->next=c->prev=0;cJSON_Delete(c);}
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L34.30|
00001e  6828              LDR      r0,[r5,#0]            ;574
000020  6020              STR      r0,[r4,#0]            ;574
000022  6868              LDR      r0,[r5,#4]            ;574
000024  6060              STR      r0,[r4,#4]            ;574
000026  6820              LDR      r0,[r4,#0]            ;574
000028  b108              CBZ      r0,|L34.46|
00002a  6820              LDR      r0,[r4,#0]            ;574
00002c  6044              STR      r4,[r0,#4]            ;574
                  |L34.46|
00002e  68b0              LDR      r0,[r6,#8]
000030  42a8              CMP      r0,r5
000032  d101              BNE      |L34.56|
000034  60b4              STR      r4,[r6,#8]
000036  e001              B        |L34.60|
                  |L34.56|
000038  6860              LDR      r0,[r4,#4]
00003a  6004              STR      r4,[r0,#0]
                  |L34.60|
00003c  2000              MOVS     r0,#0
00003e  6068              STR      r0,[r5,#4]
000040  6028              STR      r0,[r5,#0]
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       cJSON_Delete
000048  bf00              NOP      
00004a  e7e6              B        |L34.26|
;;;576    void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}
                          ENDP


                          AREA ||i.cJSON_ReplaceItemInObject||, CODE, READONLY, ALIGN=1

                  cJSON_ReplaceItemInObject PROC
;;;575    	if (c==array->child) array->child=newitem; else newitem->prev->next=newitem;c->next=c->prev=0;cJSON_Delete(c);}
;;;576    void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  f04f0800          MOV      r8,#0
00000e  68ac              LDR      r4,[r5,#8]
000010  e002              B        |L35.24|
                  |L35.18|
000012  f1080801          ADD      r8,r8,#1
000016  6824              LDR      r4,[r4,#0]
                  |L35.24|
000018  b12c              CBZ      r4,|L35.38|
00001a  4631              MOV      r1,r6
00001c  6a20              LDR      r0,[r4,#0x20]
00001e  f7fffffe          BL       cJSON_strcasecmp
000022  2800              CMP      r0,#0
000024  d1f5              BNE      |L35.18|
                  |L35.38|
000026  b144              CBZ      r4,|L35.58|
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       cJSON_strdup
00002e  6238              STR      r0,[r7,#0x20]
000030  463a              MOV      r2,r7
000032  4641              MOV      r1,r8
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       cJSON_ReplaceItemInArray
                  |L35.58|
00003a  e8bd81f0          POP      {r4-r8,pc}
;;;577    
                          ENDP


                          AREA ||i.cJSON_strcasecmp||, CODE, READONLY, ALIGN=1

                  cJSON_strcasecmp PROC
;;;38     
;;;39     static int cJSON_strcasecmp(const char *s1,const char *s2)
000000  b570              PUSH     {r4-r6,lr}
;;;40     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;41     	if (!s1) return (s1==s2)?0:1;if (!s2) return 1;
000006  b92c              CBNZ     r4,|L36.20|
000008  42ac              CMP      r4,r5
00000a  d001              BEQ      |L36.16|
00000c  2001              MOVS     r0,#1
                  |L36.14|
;;;42     	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)	if(*s1 == 0)	return 0;
;;;43     	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
;;;44     }
00000e  bd70              POP      {r4-r6,pc}
                  |L36.16|
000010  2000              MOVS     r0,#0                 ;41
000012  e7fc              B        |L36.14|
                  |L36.20|
000014  b90d              CBNZ     r5,|L36.26|
000016  2001              MOVS     r0,#1                 ;41
000018  e7f9              B        |L36.14|
                  |L36.26|
00001a  e005              B        |L36.40|
                  |L36.28|
00001c  7820              LDRB     r0,[r4,#0]            ;42
00001e  b908              CBNZ     r0,|L36.36|
000020  2000              MOVS     r0,#0                 ;42
000022  e7f4              B        |L36.14|
                  |L36.36|
000024  1c64              ADDS     r4,r4,#1              ;42
000026  1c6d              ADDS     r5,r5,#1              ;42
                  |L36.40|
000028  7820              LDRB     r0,[r4,#0]            ;42
00002a  f7fffffe          BL       tolower
00002e  4606              MOV      r6,r0                 ;42
000030  7828              LDRB     r0,[r5,#0]            ;42
000032  f7fffffe          BL       tolower
000036  4286              CMP      r6,r0                 ;42
000038  d0f0              BEQ      |L36.28|
00003a  7820              LDRB     r0,[r4,#0]            ;43
00003c  f7fffffe          BL       tolower
000040  4606              MOV      r6,r0                 ;43
000042  7828              LDRB     r0,[r5,#0]            ;43
000044  f7fffffe          BL       tolower
000048  1a30              SUBS     r0,r6,r0              ;43
00004a  e7e0              B        |L36.14|
;;;45     
                          ENDP


                          AREA ||i.cJSON_strdup||, CODE, READONLY, ALIGN=2

                  cJSON_strdup PROC
;;;53     
;;;54     static char* cJSON_strdup(const char* str)
000000  b570              PUSH     {r4-r6,lr}
;;;55     {
000002  4604              MOV      r4,r0
;;;56          #if defined(__LWIP_MEM_MANAGET__)
;;;57           mem_size_t len
;;;58           #else
;;;59           size_t len;
;;;60          #endif 
;;;61           char* copy;
;;;62     
;;;63           len = strlen(str) + 1;
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       strlen
00000a  1c45              ADDS     r5,r0,#1
;;;64           copy = (char*)cJSON_malloc(len);
00000c  4628              MOV      r0,r5
00000e  4907              LDR      r1,|L37.44|
000010  6809              LDR      r1,[r1,#0]  ; cJSON_malloc
000012  4788              BLX      r1
000014  4606              MOV      r6,r0
;;;65           if (!(copy)) return 0;
000016  b90e              CBNZ     r6,|L37.28|
000018  2000              MOVS     r0,#0
                  |L37.26|
;;;66           memcpy(copy,str,len);
;;;67           return copy;
;;;68     }
00001a  bd70              POP      {r4-r6,pc}
                  |L37.28|
00001c  462a              MOV      r2,r5                 ;66
00001e  4621              MOV      r1,r4                 ;66
000020  4630              MOV      r0,r6                 ;66
000022  f7fffffe          BL       __aeabi_memcpy
000026  4630              MOV      r0,r6                 ;67
000028  e7f7              B        |L37.26|
;;;69     
                          ENDP

00002a  0000              DCW      0x0000
                  |L37.44|
                          DCD      cJSON_malloc

                          AREA ||i.create_reference||, CODE, READONLY, ALIGN=1

                  create_reference PROC
;;;557    /* Utility for handling references. */
;;;558    static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  f7fffffe          BL       cJSON_New_Item
000008  4604              MOV      r4,r0
00000a  b90c              CBNZ     r4,|L38.16|
00000c  2000              MOVS     r0,#0
                  |L38.14|
00000e  bd70              POP      {r4-r6,pc}
                  |L38.16|
000010  2228              MOVS     r2,#0x28
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       __aeabi_memcpy4
00001a  2000              MOVS     r0,#0
00001c  6220              STR      r0,[r4,#0x20]
00001e  68e0              LDR      r0,[r4,#0xc]
000020  f4407080          ORR      r0,r0,#0x100
000024  60e0              STR      r0,[r4,#0xc]
000026  2000              MOVS     r0,#0
000028  6060              STR      r0,[r4,#4]
00002a  6020              STR      r0,[r4,#0]
00002c  4620              MOV      r0,r4
00002e  e7ee              B        |L38.14|
;;;559    
                          ENDP


                          AREA ||i.parse_array||, CODE, READONLY, ALIGN=2

                  parse_array PROC
;;;358    /* Build an array from input text. */
;;;359    static const char *parse_array(cJSON *item,const char *value)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;360    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;361    	cJSON *child;
;;;362    	if (*value!='[')	{ep=value;return 0;}	/* not an array! */
000008  7820              LDRB     r0,[r4,#0]
00000a  285b              CMP      r0,#0x5b
00000c  d004              BEQ      |L39.24|
00000e  4826              LDR      r0,|L39.168|
000010  6004              STR      r4,[r0,#0]  ; ep
000012  2000              MOVS     r0,#0
                  |L39.20|
;;;363    
;;;364    	item->type=cJSON_Array;
;;;365    	value=skip(value+1);
;;;366    	if (*value==']') return value+1;	/* empty array. */
;;;367    
;;;368    	item->child=child=cJSON_New_Item();
;;;369    	if (!item->child) return 0;		 /* memory fail */
;;;370    	value=skip(parse_value(child,skip(value)));	/* skip any spacing, get the value. */
;;;371    	if (!value) return 0;
;;;372    
;;;373    	while (*value==',')
;;;374    	{
;;;375    		cJSON *new_item;
;;;376    		new_item=cJSON_New_Item();
;;;377    		if (!(new_item)) return 0; 	/* memory fail */
;;;378    		child->next=new_item;new_item->prev=child;child=new_item;
;;;379    		value=skip(parse_value(child,skip(value+1)));
;;;380    		if (!value) return 0;	/* memory fail */
;;;381    	}
;;;382    
;;;383    	if (*value==']') return value+1;	/* end of array */
;;;384    	ep=value;return 0;	/* malformed. */
;;;385    }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L39.24|
000018  2005              MOVS     r0,#5                 ;364
00001a  60e8              STR      r0,[r5,#0xc]          ;364
00001c  1c60              ADDS     r0,r4,#1              ;365
00001e  f7fffffe          BL       skip
000022  4604              MOV      r4,r0                 ;365
000024  7820              LDRB     r0,[r4,#0]            ;366
000026  285d              CMP      r0,#0x5d              ;366
000028  d101              BNE      |L39.46|
00002a  1c60              ADDS     r0,r4,#1              ;366
00002c  e7f2              B        |L39.20|
                  |L39.46|
00002e  f7fffffe          BL       cJSON_New_Item
000032  4606              MOV      r6,r0                 ;368
000034  60a8              STR      r0,[r5,#8]            ;368
000036  68a8              LDR      r0,[r5,#8]            ;369
000038  b908              CBNZ     r0,|L39.62|
00003a  2000              MOVS     r0,#0                 ;369
00003c  e7ea              B        |L39.20|
                  |L39.62|
00003e  4620              MOV      r0,r4                 ;370
000040  f7fffffe          BL       skip
000044  4680              MOV      r8,r0                 ;370
000046  4641              MOV      r1,r8                 ;370
000048  4630              MOV      r0,r6                 ;370
00004a  f7fffffe          BL       parse_value
00004e  4607              MOV      r7,r0                 ;370
000050  f7fffffe          BL       skip
000054  4604              MOV      r4,r0                 ;370
000056  b90c              CBNZ     r4,|L39.92|
000058  2000              MOVS     r0,#0                 ;371
00005a  e7db              B        |L39.20|
                  |L39.92|
00005c  e018              B        |L39.144|
                  |L39.94|
00005e  f7fffffe          BL       cJSON_New_Item
000062  4607              MOV      r7,r0                 ;376
000064  b90f              CBNZ     r7,|L39.106|
000066  2000              MOVS     r0,#0                 ;377
000068  e7d4              B        |L39.20|
                  |L39.106|
00006a  6037              STR      r7,[r6,#0]            ;378
00006c  607e              STR      r6,[r7,#4]            ;378
00006e  463e              MOV      r6,r7                 ;378
000070  1c60              ADDS     r0,r4,#1              ;379
000072  f7fffffe          BL       skip
000076  4681              MOV      r9,r0                 ;379
000078  4649              MOV      r1,r9                 ;379
00007a  4630              MOV      r0,r6                 ;379
00007c  f7fffffe          BL       parse_value
000080  4680              MOV      r8,r0                 ;379
000082  f7fffffe          BL       skip
000086  4604              MOV      r4,r0                 ;379
000088  b90c              CBNZ     r4,|L39.142|
00008a  2000              MOVS     r0,#0                 ;380
00008c  e7c2              B        |L39.20|
                  |L39.142|
00008e  bf00              NOP                            ;381
                  |L39.144|
000090  7820              LDRB     r0,[r4,#0]            ;373
000092  282c              CMP      r0,#0x2c              ;373
000094  d0e3              BEQ      |L39.94|
000096  7820              LDRB     r0,[r4,#0]            ;383
000098  285d              CMP      r0,#0x5d              ;383
00009a  d101              BNE      |L39.160|
00009c  1c60              ADDS     r0,r4,#1              ;383
00009e  e7b9              B        |L39.20|
                  |L39.160|
0000a0  4801              LDR      r0,|L39.168|
0000a2  6004              STR      r4,[r0,#0]            ;384  ; ep
0000a4  2000              MOVS     r0,#0                 ;384
0000a6  e7b5              B        |L39.20|
;;;386    
                          ENDP

                  |L39.168|
                          DCD      ||ep||

                          AREA ||i.parse_hex4||, CODE, READONLY, ALIGN=1

                  parse_hex4 PROC
;;;159    
;;;160    static unsigned parse_hex4(const char *str)
000000  4601              MOV      r1,r0
;;;161    {
;;;162    	unsigned h=0;
000002  2200              MOVS     r2,#0
;;;163    	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
000004  7808              LDRB     r0,[r1,#0]
000006  2830              CMP      r0,#0x30
000008  db06              BLT      |L40.24|
00000a  7808              LDRB     r0,[r1,#0]
00000c  2839              CMP      r0,#0x39
00000e  dc03              BGT      |L40.24|
000010  7808              LDRB     r0,[r1,#0]
000012  3830              SUBS     r0,r0,#0x30
000014  4402              ADD      r2,r2,r0
000016  e015              B        |L40.68|
                  |L40.24|
000018  7808              LDRB     r0,[r1,#0]
00001a  2841              CMP      r0,#0x41
00001c  db06              BLT      |L40.44|
00001e  7808              LDRB     r0,[r1,#0]
000020  2846              CMP      r0,#0x46
000022  dc03              BGT      |L40.44|
000024  7808              LDRB     r0,[r1,#0]
000026  3837              SUBS     r0,r0,#0x37
000028  4402              ADD      r2,r2,r0
00002a  e00b              B        |L40.68|
                  |L40.44|
00002c  7808              LDRB     r0,[r1,#0]
00002e  2861              CMP      r0,#0x61
000030  db06              BLT      |L40.64|
000032  7808              LDRB     r0,[r1,#0]
000034  2866              CMP      r0,#0x66
000036  dc03              BGT      |L40.64|
000038  7808              LDRB     r0,[r1,#0]
00003a  3857              SUBS     r0,r0,#0x57
00003c  4402              ADD      r2,r2,r0
00003e  e001              B        |L40.68|
                  |L40.64|
000040  2000              MOVS     r0,#0
                  |L40.66|
;;;164    	h=h<<4;str++;
;;;165    	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
;;;166    	h=h<<4;str++;
;;;167    	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
;;;168    	h=h<<4;str++;
;;;169    	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
;;;170    	return h;
;;;171    }
000042  4770              BX       lr
                  |L40.68|
000044  0112              LSLS     r2,r2,#4              ;164
000046  1c49              ADDS     r1,r1,#1              ;164
000048  7808              LDRB     r0,[r1,#0]            ;165
00004a  2830              CMP      r0,#0x30              ;165
00004c  db06              BLT      |L40.92|
00004e  7808              LDRB     r0,[r1,#0]            ;165
000050  2839              CMP      r0,#0x39              ;165
000052  dc03              BGT      |L40.92|
000054  7808              LDRB     r0,[r1,#0]            ;165
000056  3830              SUBS     r0,r0,#0x30           ;165
000058  4402              ADD      r2,r2,r0              ;165
00005a  e015              B        |L40.136|
                  |L40.92|
00005c  7808              LDRB     r0,[r1,#0]            ;165
00005e  2841              CMP      r0,#0x41              ;165
000060  db06              BLT      |L40.112|
000062  7808              LDRB     r0,[r1,#0]            ;165
000064  2846              CMP      r0,#0x46              ;165
000066  dc03              BGT      |L40.112|
000068  7808              LDRB     r0,[r1,#0]            ;165
00006a  3837              SUBS     r0,r0,#0x37           ;165
00006c  4402              ADD      r2,r2,r0              ;165
00006e  e00b              B        |L40.136|
                  |L40.112|
000070  7808              LDRB     r0,[r1,#0]            ;165
000072  2861              CMP      r0,#0x61              ;165
000074  db06              BLT      |L40.132|
000076  7808              LDRB     r0,[r1,#0]            ;165
000078  2866              CMP      r0,#0x66              ;165
00007a  dc03              BGT      |L40.132|
00007c  7808              LDRB     r0,[r1,#0]            ;165
00007e  3857              SUBS     r0,r0,#0x57           ;165
000080  4402              ADD      r2,r2,r0              ;165
000082  e001              B        |L40.136|
                  |L40.132|
000084  2000              MOVS     r0,#0                 ;165
000086  e7dc              B        |L40.66|
                  |L40.136|
000088  0112              LSLS     r2,r2,#4              ;166
00008a  1c49              ADDS     r1,r1,#1              ;166
00008c  7808              LDRB     r0,[r1,#0]            ;167
00008e  2830              CMP      r0,#0x30              ;167
000090  db06              BLT      |L40.160|
000092  7808              LDRB     r0,[r1,#0]            ;167
000094  2839              CMP      r0,#0x39              ;167
000096  dc03              BGT      |L40.160|
000098  7808              LDRB     r0,[r1,#0]            ;167
00009a  3830              SUBS     r0,r0,#0x30           ;167
00009c  4402              ADD      r2,r2,r0              ;167
00009e  e015              B        |L40.204|
                  |L40.160|
0000a0  7808              LDRB     r0,[r1,#0]            ;167
0000a2  2841              CMP      r0,#0x41              ;167
0000a4  db06              BLT      |L40.180|
0000a6  7808              LDRB     r0,[r1,#0]            ;167
0000a8  2846              CMP      r0,#0x46              ;167
0000aa  dc03              BGT      |L40.180|
0000ac  7808              LDRB     r0,[r1,#0]            ;167
0000ae  3837              SUBS     r0,r0,#0x37           ;167
0000b0  4402              ADD      r2,r2,r0              ;167
0000b2  e00b              B        |L40.204|
                  |L40.180|
0000b4  7808              LDRB     r0,[r1,#0]            ;167
0000b6  2861              CMP      r0,#0x61              ;167
0000b8  db06              BLT      |L40.200|
0000ba  7808              LDRB     r0,[r1,#0]            ;167
0000bc  2866              CMP      r0,#0x66              ;167
0000be  dc03              BGT      |L40.200|
0000c0  7808              LDRB     r0,[r1,#0]            ;167
0000c2  3857              SUBS     r0,r0,#0x57           ;167
0000c4  4402              ADD      r2,r2,r0              ;167
0000c6  e001              B        |L40.204|
                  |L40.200|
0000c8  2000              MOVS     r0,#0                 ;167
0000ca  e7ba              B        |L40.66|
                  |L40.204|
0000cc  0112              LSLS     r2,r2,#4              ;168
0000ce  1c49              ADDS     r1,r1,#1              ;168
0000d0  7808              LDRB     r0,[r1,#0]            ;169
0000d2  2830              CMP      r0,#0x30              ;169
0000d4  db06              BLT      |L40.228|
0000d6  7808              LDRB     r0,[r1,#0]            ;169
0000d8  2839              CMP      r0,#0x39              ;169
0000da  dc03              BGT      |L40.228|
0000dc  7808              LDRB     r0,[r1,#0]            ;169
0000de  3830              SUBS     r0,r0,#0x30           ;169
0000e0  4402              ADD      r2,r2,r0              ;169
0000e2  e015              B        |L40.272|
                  |L40.228|
0000e4  7808              LDRB     r0,[r1,#0]            ;169
0000e6  2841              CMP      r0,#0x41              ;169
0000e8  db06              BLT      |L40.248|
0000ea  7808              LDRB     r0,[r1,#0]            ;169
0000ec  2846              CMP      r0,#0x46              ;169
0000ee  dc03              BGT      |L40.248|
0000f0  7808              LDRB     r0,[r1,#0]            ;169
0000f2  3837              SUBS     r0,r0,#0x37           ;169
0000f4  4402              ADD      r2,r2,r0              ;169
0000f6  e00b              B        |L40.272|
                  |L40.248|
0000f8  7808              LDRB     r0,[r1,#0]            ;169
0000fa  2861              CMP      r0,#0x61              ;169
0000fc  db06              BLT      |L40.268|
0000fe  7808              LDRB     r0,[r1,#0]            ;169
000100  2866              CMP      r0,#0x66              ;169
000102  dc03              BGT      |L40.268|
000104  7808              LDRB     r0,[r1,#0]            ;169
000106  3857              SUBS     r0,r0,#0x57           ;169
000108  4402              ADD      r2,r2,r0              ;169
00010a  e001              B        |L40.272|
                  |L40.268|
00010c  2000              MOVS     r0,#0                 ;169
00010e  e798              B        |L40.66|
                  |L40.272|
000110  4610              MOV      r0,r2                 ;170
000112  e796              B        |L40.66|
;;;172    
                          ENDP


                          AREA ||i.parse_number||, CODE, READONLY, ALIGN=2

                  parse_number PROC
;;;115    /* Parse the input text to generate a number, and populate the result into item. */
;;;116    static const char *parse_number(cJSON *item,const char *num)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;117    {
000004  b08b              SUB      sp,sp,#0x2c
000006  4683              MOV      r11,r0
000008  468a              MOV      r10,r1
;;;118    	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;
00000a  2000              MOVS     r0,#0
00000c  4604              MOV      r4,r0
00000e  4605              MOV      r5,r0
000010  2600              MOVS     r6,#0
000012  4f67              LDR      r7,|L41.432|
000014  2100              MOVS     r1,#0
000016  4688              MOV      r8,r1
000018  4689              MOV      r9,r1
00001a  9009              STR      r0,[sp,#0x24]
00001c  2001              MOVS     r0,#1
00001e  9008              STR      r0,[sp,#0x20]
;;;119    
;;;120    	if (*num=='-') sign=-1,num++;	/* Has sign? */
000020  f89a0000          LDRB     r0,[r10,#0]
000024  282d              CMP      r0,#0x2d
000026  d102              BNE      |L41.46|
000028  4f62              LDR      r7,|L41.436|
00002a  f10a0a01          ADD      r10,r10,#1
                  |L41.46|
;;;121    	if (*num=='0') num++;			/* is zero */
00002e  f89a0000          LDRB     r0,[r10,#0]
000032  2830              CMP      r0,#0x30
000034  d101              BNE      |L41.58|
000036  f10a0a01          ADD      r10,r10,#1
                  |L41.58|
;;;122    	if (*num>='1' && *num<='9')	do	n=(n*10.0)+(*num++ -'0');	while (*num>='0' && *num<='9');	/* Number? */
00003a  f89a0000          LDRB     r0,[r10,#0]
00003e  2831              CMP      r0,#0x31
000040  db22              BLT      |L41.136|
000042  f89a0000          LDRB     r0,[r10,#0]
000046  2839              CMP      r0,#0x39
000048  dc1e              BGT      |L41.136|
00004a  bf00              NOP      
                  |L41.76|
00004c  f81a1b01          LDRB     r1,[r10],#1
000050  f1a10030          SUB      r0,r1,#0x30
000054  f7fffffe          BL       __aeabi_i2d
000058  2200              MOVS     r2,#0
00005a  4b57              LDR      r3,|L41.440|
00005c  e9cd0106          STRD     r0,r1,[sp,#0x18]
000060  4620              MOV      r0,r4
000062  4629              MOV      r1,r5
000064  f7fffffe          BL       __aeabi_dmul
000068  e9cd0104          STRD     r0,r1,[sp,#0x10]
00006c  e9dd2306          LDRD     r2,r3,[sp,#0x18]
000070  f7fffffe          BL       __aeabi_dadd
000074  4604              MOV      r4,r0
000076  460d              MOV      r5,r1
000078  f89a0000          LDRB     r0,[r10,#0]
00007c  2830              CMP      r0,#0x30
00007e  db03              BLT      |L41.136|
000080  f89a0000          LDRB     r0,[r10,#0]
000084  2839              CMP      r0,#0x39
000086  dde1              BLE      |L41.76|
                  |L41.136|
;;;123    	if (*num=='.' && num[1]>='0' && num[1]<='9') {num++;		do	n=(n*10.0)+(*num++ -'0'),scale--; while (*num>='0' && *num<='9');}	/* Fractional part? */
000088  f89a0000          LDRB     r0,[r10,#0]
00008c  282e              CMP      r0,#0x2e
00008e  d130              BNE      |L41.242|
000090  f89a0001          LDRB     r0,[r10,#1]
000094  2830              CMP      r0,#0x30
000096  db2c              BLT      |L41.242|
000098  f89a0001          LDRB     r0,[r10,#1]
00009c  2839              CMP      r0,#0x39
00009e  dc28              BGT      |L41.242|
0000a0  f10a0a01          ADD      r10,r10,#1
0000a4  bf00              NOP      
                  |L41.166|
0000a6  f81a1b01          LDRB     r1,[r10],#1
0000aa  f1a10030          SUB      r0,r1,#0x30
0000ae  f7fffffe          BL       __aeabi_i2d
0000b2  2200              MOVS     r2,#0
0000b4  4b40              LDR      r3,|L41.440|
0000b6  e9cd0106          STRD     r0,r1,[sp,#0x18]
0000ba  4620              MOV      r0,r4
0000bc  4629              MOV      r1,r5
0000be  f7fffffe          BL       __aeabi_dmul
0000c2  e9cd0104          STRD     r0,r1,[sp,#0x10]
0000c6  e9dd2306          LDRD     r2,r3,[sp,#0x18]
0000ca  f7fffffe          BL       __aeabi_dadd
0000ce  4604              MOV      r4,r0
0000d0  460d              MOV      r5,r1
0000d2  2200              MOVS     r2,#0
0000d4  4b36              LDR      r3,|L41.432|
0000d6  4640              MOV      r0,r8
0000d8  4649              MOV      r1,r9
0000da  f7fffffe          BL       __aeabi_dsub
0000de  4680              MOV      r8,r0
0000e0  4689              MOV      r9,r1
0000e2  f89a0000          LDRB     r0,[r10,#0]
0000e6  2830              CMP      r0,#0x30
0000e8  db03              BLT      |L41.242|
0000ea  f89a0000          LDRB     r0,[r10,#0]
0000ee  2839              CMP      r0,#0x39
0000f0  ddd9              BLE      |L41.166|
                  |L41.242|
;;;124    	if (*num=='e' || *num=='E')		/* Exponent? */
0000f2  f89a0000          LDRB     r0,[r10,#0]
0000f6  2865              CMP      r0,#0x65
0000f8  d003              BEQ      |L41.258|
0000fa  f89a0000          LDRB     r0,[r10,#0]
0000fe  2845              CMP      r0,#0x45
000100  d123              BNE      |L41.330|
                  |L41.258|
;;;125    	{	num++;if (*num=='+') num++;	else if (*num=='-') signsubscale=-1,num++;		/* With sign? */
000102  f10a0a01          ADD      r10,r10,#1
000106  f89a0000          LDRB     r0,[r10,#0]
00010a  282b              CMP      r0,#0x2b
00010c  d102              BNE      |L41.276|
00010e  f10a0a01          ADD      r10,r10,#1
000112  e008              B        |L41.294|
                  |L41.276|
000114  f89a0000          LDRB     r0,[r10,#0]
000118  282d              CMP      r0,#0x2d
00011a  d104              BNE      |L41.294|
00011c  f04f30ff          MOV      r0,#0xffffffff
000120  9008              STR      r0,[sp,#0x20]
000122  f10a0a01          ADD      r10,r10,#1
                  |L41.294|
;;;126    		while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
000126  e008              B        |L41.314|
                  |L41.296|
000128  f81a0b01          LDRB     r0,[r10],#1
00012c  3830              SUBS     r0,r0,#0x30
00012e  9909              LDR      r1,[sp,#0x24]
000130  eb010181          ADD      r1,r1,r1,LSL #2
000134  eb000041          ADD      r0,r0,r1,LSL #1
000138  9009              STR      r0,[sp,#0x24]
                  |L41.314|
00013a  f89a0000          LDRB     r0,[r10,#0]
00013e  2830              CMP      r0,#0x30
000140  db03              BLT      |L41.330|
000142  f89a0000          LDRB     r0,[r10,#0]
000146  2839              CMP      r0,#0x39
000148  ddee              BLE      |L41.296|
                  |L41.330|
;;;127    	}
;;;128    
;;;129    	n=sign*n*pow(10.0,(scale+subscale*signsubscale));	/* number = +/- number.fraction * 10^+/- exponent */
00014a  e9dd2108          LDRD     r2,r1,[sp,#0x20]
00014e  fb01f002          MUL      r0,r1,r2
000152  f7fffffe          BL       __aeabi_i2d
000156  4642              MOV      r2,r8
000158  464b              MOV      r3,r9
00015a  e9cd0100          STRD     r0,r1,[sp,#0]
00015e  f7fffffe          BL       __aeabi_dadd
000162  4602              MOV      r2,r0
000164  460b              MOV      r3,r1
000166  e9cd0102          STRD     r0,r1,[sp,#8]
00016a  2000              MOVS     r0,#0
00016c  4912              LDR      r1,|L41.440|
00016e  f7fffffe          BL       pow
000172  4622              MOV      r2,r4
000174  462b              MOV      r3,r5
000176  e9cd0106          STRD     r0,r1,[sp,#0x18]
00017a  4630              MOV      r0,r6
00017c  4639              MOV      r1,r7
00017e  f7fffffe          BL       __aeabi_dmul
000182  e9cd0104          STRD     r0,r1,[sp,#0x10]
000186  e9dd2306          LDRD     r2,r3,[sp,#0x18]
00018a  f7fffffe          BL       __aeabi_dmul
00018e  4604              MOV      r4,r0
000190  460d              MOV      r5,r1
;;;130    	
;;;131    	item->valuedouble=n;
000192  e9cb4506          STRD     r4,r5,[r11,#0x18]
;;;132    	item->valueint=(int)n;
000196  4620              MOV      r0,r4
000198  4629              MOV      r1,r5
00019a  f7fffffe          BL       __aeabi_d2iz
00019e  f8cb0014          STR      r0,[r11,#0x14]
;;;133    	item->type=cJSON_Number;
0001a2  2003              MOVS     r0,#3
0001a4  f8cb000c          STR      r0,[r11,#0xc]
;;;134    	return num;
0001a8  4650              MOV      r0,r10
;;;135    }
0001aa  b00b              ADD      sp,sp,#0x2c
0001ac  e8bd8ff0          POP      {r4-r11,pc}
;;;136    
                          ENDP

                  |L41.432|
                          DCD      0x3ff00000
                  |L41.436|
                          DCD      0xbff00000
                  |L41.440|
                          DCD      0x40240000

                          AREA ||i.parse_object||, CODE, READONLY, ALIGN=2

                  parse_object PROC
;;;445    /* Build an object from the text. */
;;;446    static const char *parse_object(cJSON *item,const char *value)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;447    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
;;;448    	cJSON *child;
;;;449    	if (*value!='{')	{ep=value;return 0;}	/* not an object! */
000008  7820              LDRB     r0,[r4,#0]
00000a  287b              CMP      r0,#0x7b
00000c  d004              BEQ      |L42.24|
00000e  4840              LDR      r0,|L42.272|
000010  6004              STR      r4,[r0,#0]  ; ep
000012  2000              MOVS     r0,#0
                  |L42.20|
;;;450    	
;;;451    	item->type=cJSON_Object;
;;;452    	value=skip(value+1);
;;;453    	if (*value=='}') return value+1;	/* empty array. */
;;;454    	
;;;455    	item->child=child=cJSON_New_Item();
;;;456    	if (!item->child) return 0;
;;;457    	value=skip(parse_string(child,skip(value)));
;;;458    	if (!value) return 0;
;;;459    	child->string=child->valuestring;child->valuestring=0;
;;;460    	if (*value!=':') {ep=value;return 0;}	/* fail! */
;;;461    	value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
;;;462    	if (!value) return 0;
;;;463    	
;;;464    	while (*value==',')
;;;465    	{
;;;466    		cJSON *new_item;
;;;467    		new_item = cJSON_New_Item();
;;;468    		if (!(new_item))	return 0; /* memory fail */
;;;469    		child->next=new_item;new_item->prev=child;child=new_item;
;;;470    		value=skip(parse_string(child,skip(value+1)));
;;;471    		if (!value) return 0;
;;;472    		child->string=child->valuestring;child->valuestring=0;
;;;473    		if (*value!=':') {ep=value;return 0;}	/* fail! */
;;;474    		value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
;;;475    		if (!value) return 0;
;;;476    	}
;;;477    	
;;;478    	if (*value=='}') return value+1;	/* end of array */
;;;479    	ep=value;return 0;	/* malformed. */
;;;480    }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L42.24|
000018  2006              MOVS     r0,#6                 ;451
00001a  60f0              STR      r0,[r6,#0xc]          ;451
00001c  1c60              ADDS     r0,r4,#1              ;452
00001e  f7fffffe          BL       skip
000022  4604              MOV      r4,r0                 ;452
000024  7820              LDRB     r0,[r4,#0]            ;453
000026  287d              CMP      r0,#0x7d              ;453
000028  d101              BNE      |L42.46|
00002a  1c60              ADDS     r0,r4,#1              ;453
00002c  e7f2              B        |L42.20|
                  |L42.46|
00002e  f7fffffe          BL       cJSON_New_Item
000032  4605              MOV      r5,r0                 ;455
000034  60b0              STR      r0,[r6,#8]            ;455
000036  68b0              LDR      r0,[r6,#8]            ;456
000038  b908              CBNZ     r0,|L42.62|
00003a  2000              MOVS     r0,#0                 ;456
00003c  e7ea              B        |L42.20|
                  |L42.62|
00003e  4620              MOV      r0,r4                 ;457
000040  f7fffffe          BL       skip
000044  4680              MOV      r8,r0                 ;457
000046  4641              MOV      r1,r8                 ;457
000048  4628              MOV      r0,r5                 ;457
00004a  f7fffffe          BL       parse_string
00004e  4607              MOV      r7,r0                 ;457
000050  f7fffffe          BL       skip
000054  4604              MOV      r4,r0                 ;457
000056  b90c              CBNZ     r4,|L42.92|
000058  2000              MOVS     r0,#0                 ;458
00005a  e7db              B        |L42.20|
                  |L42.92|
00005c  6928              LDR      r0,[r5,#0x10]         ;459
00005e  6228              STR      r0,[r5,#0x20]         ;459
000060  2000              MOVS     r0,#0                 ;459
000062  6128              STR      r0,[r5,#0x10]         ;459
000064  7820              LDRB     r0,[r4,#0]            ;460
000066  283a              CMP      r0,#0x3a              ;460
000068  d003              BEQ      |L42.114|
00006a  4829              LDR      r0,|L42.272|
00006c  6004              STR      r4,[r0,#0]            ;460  ; ep
00006e  2000              MOVS     r0,#0                 ;460
000070  e7d0              B        |L42.20|
                  |L42.114|
000072  1c60              ADDS     r0,r4,#1              ;461
000074  f7fffffe          BL       skip
000078  4680              MOV      r8,r0                 ;461
00007a  4641              MOV      r1,r8                 ;461
00007c  4628              MOV      r0,r5                 ;461
00007e  f7fffffe          BL       parse_value
000082  4607              MOV      r7,r0                 ;461
000084  f7fffffe          BL       skip
000088  4604              MOV      r4,r0                 ;461
00008a  b90c              CBNZ     r4,|L42.144|
00008c  2000              MOVS     r0,#0                 ;462
00008e  e7c1              B        |L42.20|
                  |L42.144|
000090  e032              B        |L42.248|
                  |L42.146|
000092  f7fffffe          BL       cJSON_New_Item
000096  4607              MOV      r7,r0                 ;467
000098  b90f              CBNZ     r7,|L42.158|
00009a  2000              MOVS     r0,#0                 ;468
00009c  e7ba              B        |L42.20|
                  |L42.158|
00009e  602f              STR      r7,[r5,#0]            ;469
0000a0  607d              STR      r5,[r7,#4]            ;469
0000a2  463d              MOV      r5,r7                 ;469
0000a4  1c60              ADDS     r0,r4,#1              ;470
0000a6  f7fffffe          BL       skip
0000aa  4681              MOV      r9,r0                 ;470
0000ac  4649              MOV      r1,r9                 ;470
0000ae  4628              MOV      r0,r5                 ;470
0000b0  f7fffffe          BL       parse_string
0000b4  4680              MOV      r8,r0                 ;470
0000b6  f7fffffe          BL       skip
0000ba  4604              MOV      r4,r0                 ;470
0000bc  b90c              CBNZ     r4,|L42.194|
0000be  2000              MOVS     r0,#0                 ;471
0000c0  e7a8              B        |L42.20|
                  |L42.194|
0000c2  6928              LDR      r0,[r5,#0x10]         ;472
0000c4  6228              STR      r0,[r5,#0x20]         ;472
0000c6  2000              MOVS     r0,#0                 ;472
0000c8  6128              STR      r0,[r5,#0x10]         ;472
0000ca  7820              LDRB     r0,[r4,#0]            ;473
0000cc  283a              CMP      r0,#0x3a              ;473
0000ce  d003              BEQ      |L42.216|
0000d0  480f              LDR      r0,|L42.272|
0000d2  6004              STR      r4,[r0,#0]            ;473  ; ep
0000d4  2000              MOVS     r0,#0                 ;473
0000d6  e79d              B        |L42.20|
                  |L42.216|
0000d8  1c60              ADDS     r0,r4,#1              ;474
0000da  f7fffffe          BL       skip
0000de  4681              MOV      r9,r0                 ;474
0000e0  4649              MOV      r1,r9                 ;474
0000e2  4628              MOV      r0,r5                 ;474
0000e4  f7fffffe          BL       parse_value
0000e8  4680              MOV      r8,r0                 ;474
0000ea  f7fffffe          BL       skip
0000ee  4604              MOV      r4,r0                 ;474
0000f0  b90c              CBNZ     r4,|L42.246|
0000f2  2000              MOVS     r0,#0                 ;475
0000f4  e78e              B        |L42.20|
                  |L42.246|
0000f6  bf00              NOP                            ;476
                  |L42.248|
0000f8  7820              LDRB     r0,[r4,#0]            ;464
0000fa  282c              CMP      r0,#0x2c              ;464
0000fc  d0c9              BEQ      |L42.146|
0000fe  7820              LDRB     r0,[r4,#0]            ;478
000100  287d              CMP      r0,#0x7d              ;478
000102  d101              BNE      |L42.264|
000104  1c60              ADDS     r0,r4,#1              ;478
000106  e785              B        |L42.20|
                  |L42.264|
000108  4801              LDR      r0,|L42.272|
00010a  6004              STR      r4,[r0,#0]            ;479  ; ep
00010c  2000              MOVS     r0,#0                 ;479
00010e  e781              B        |L42.20|
;;;481    
                          ENDP

                  |L42.272|
                          DCD      ||ep||

                          AREA ||i.parse_string||, CODE, READONLY, ALIGN=2

                  parse_string PROC
;;;174    static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
;;;175    static const char *parse_string(cJSON *item,const char *str)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;176    {
000004  4683              MOV      r11,r0
000006  4688              MOV      r8,r1
;;;177    	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;
000008  f1080401          ADD      r4,r8,#1
00000c  2700              MOVS     r7,#0
;;;178    	if (*str!='\"') {ep=str;return 0;}	/* not a string! */
00000e  f8980000          LDRB     r0,[r8,#0]
000012  2822              CMP      r0,#0x22
000014  d005              BEQ      |L43.34|
000016  486a              LDR      r0,|L43.448|
000018  f8c08000          STR      r8,[r0,#0]  ; ep
00001c  2000              MOVS     r0,#0
                  |L43.30|
;;;179    	
;;;180    	while (*ptr!='\"' && *ptr && ++len) if (*ptr++ == '\\') ptr++;	/* Skip escaped quotes. */
;;;181    	
;;;182    	out=(char*)cJSON_malloc(len+1);	/* This is how long we need for the string, roughly. */
;;;183    	if (!out) return 0;
;;;184    	
;;;185    	ptr=str+1;ptr2=out;
;;;186    	while (*ptr!='\"' && *ptr)
;;;187    	{
;;;188    		if (*ptr!='\\') *ptr2++=*ptr++;
;;;189    		else
;;;190    		{
;;;191    			ptr++;
;;;192    			switch (*ptr)
;;;193    			{
;;;194    				case 'b': *ptr2++='\b';	break;
;;;195    				case 'f': *ptr2++='\f';	break;
;;;196    				case 'n': *ptr2++='\n';	break;
;;;197    				case 'r': *ptr2++='\r';	break;
;;;198    				case 't': *ptr2++='\t';	break;
;;;199    				case 'u':	 /* transcode utf16 to utf8. */
;;;200    					uc=parse_hex4(ptr+1);ptr+=4;	/* get the unicode char. */
;;;201    
;;;202    					if ((uc>=0xDC00 && uc<=0xDFFF) || uc==0)	break;	/* check for invalid.	*/
;;;203    
;;;204    					if (uc>=0xD800 && uc<=0xDBFF)	/* UTF16 surrogate pairs.	*/
;;;205    					{
;;;206    						if (ptr[1]!='\\' || ptr[2]!='u')	break;	/* missing second-half of surrogate.	*/
;;;207    						uc2=parse_hex4(ptr+3);ptr+=6;
;;;208    						if (uc2<0xDC00 || uc2>0xDFFF)		break;	/* invalid second-half of surrogate.	*/
;;;209    						uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
;;;210    					}
;;;211    
;;;212    					len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;
;;;213    					
;;;214    					switch (len) {
;;;215    						case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
;;;216    						case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
;;;217    						case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
;;;218    						case 1: *--ptr2 =(uc | firstByteMark[len]);
;;;219    					}
;;;220    					ptr2+=len;
;;;221    					break;
;;;222    				default:  *ptr2++=*ptr; break;
;;;223    			}
;;;224    			ptr++;
;;;225    		}
;;;226    	}
;;;227    	*ptr2=0;
;;;228    	if (*ptr=='\"') ptr++;
;;;229    	item->valuestring=out;
;;;230    	item->type=cJSON_String;
;;;231    	return ptr;
;;;232    }
00001e  e8bd9ff0          POP      {r4-r12,pc}
                  |L43.34|
000022  e004              B        |L43.46|
                  |L43.36|
000024  f8141b01          LDRB     r1,[r4],#1            ;180
000028  295c              CMP      r1,#0x5c              ;180
00002a  d100              BNE      |L43.46|
00002c  1c64              ADDS     r4,r4,#1              ;180
                  |L43.46|
00002e  7820              LDRB     r0,[r4,#0]            ;180
000030  2822              CMP      r0,#0x22              ;180
000032  d004              BEQ      |L43.62|
000034  7820              LDRB     r0,[r4,#0]            ;180
000036  b110              CBZ      r0,|L43.62|
000038  1c78              ADDS     r0,r7,#1              ;180
00003a  0007              MOVS     r7,r0                 ;180
00003c  d1f2              BNE      |L43.36|
                  |L43.62|
00003e  1c78              ADDS     r0,r7,#1              ;182
000040  4960              LDR      r1,|L43.452|
000042  6809              LDR      r1,[r1,#0]            ;182  ; cJSON_malloc
000044  4788              BLX      r1                    ;182
000046  4681              MOV      r9,r0                 ;182
000048  f1b90f00          CMP      r9,#0                 ;183
00004c  d101              BNE      |L43.82|
00004e  2000              MOVS     r0,#0                 ;183
000050  e7e5              B        |L43.30|
                  |L43.82|
000052  f1080401          ADD      r4,r8,#1              ;185
000056  464d              MOV      r5,r9                 ;185
000058  e09e              B        |L43.408|
                  |L43.90|
00005a  7820              LDRB     r0,[r4,#0]            ;188
00005c  285c              CMP      r0,#0x5c              ;188
00005e  d004              BEQ      |L43.106|
000060  f8140b01          LDRB     r0,[r4],#1            ;188
000064  f8050b01          STRB     r0,[r5],#1            ;188
000068  e096              B        |L43.408|
                  |L43.106|
00006a  1c64              ADDS     r4,r4,#1              ;191
00006c  7820              LDRB     r0,[r4,#0]            ;192
00006e  2872              CMP      r0,#0x72              ;192
000070  d018              BEQ      |L43.164|
000072  dc06              BGT      |L43.130|
000074  2862              CMP      r0,#0x62              ;192
000076  d009              BEQ      |L43.140|
000078  2866              CMP      r0,#0x66              ;192
00007a  d00b              BEQ      |L43.148|
00007c  286e              CMP      r0,#0x6e              ;192
                  |L43.126|
00007e  d17d              BNE      |L43.380|
000080  e00c              B        |L43.156|
                  |L43.130|
000082  2874              CMP      r0,#0x74              ;192
000084  d012              BEQ      |L43.172|
000086  2875              CMP      r0,#0x75              ;192
000088  d1f9              BNE      |L43.126|
00008a  e013              B        |L43.180|
                  |L43.140|
00008c  2008              MOVS     r0,#8                 ;194
00008e  f8050b01          STRB     r0,[r5],#1            ;194
000092  e07f              B        |L43.404|
                  |L43.148|
000094  200c              MOVS     r0,#0xc               ;195
000096  f8050b01          STRB     r0,[r5],#1            ;195
00009a  e07b              B        |L43.404|
                  |L43.156|
00009c  200a              MOVS     r0,#0xa               ;196
00009e  f8050b01          STRB     r0,[r5],#1            ;196
0000a2  e077              B        |L43.404|
                  |L43.164|
0000a4  200d              MOVS     r0,#0xd               ;197
0000a6  f8050b01          STRB     r0,[r5],#1            ;197
0000aa  e073              B        |L43.404|
                  |L43.172|
0000ac  2009              MOVS     r0,#9                 ;198
0000ae  f8050b01          STRB     r0,[r5],#1            ;198
0000b2  e06f              B        |L43.404|
                  |L43.180|
0000b4  1c60              ADDS     r0,r4,#1              ;200
0000b6  f7fffffe          BL       parse_hex4
0000ba  4606              MOV      r6,r0                 ;200
0000bc  1d24              ADDS     r4,r4,#4              ;200
0000be  f5b64f5c          CMP      r6,#0xdc00            ;202
0000c2  d302              BCC      |L43.202|
0000c4  f5b64f60          CMP      r6,#0xe000            ;202
0000c8  d300              BCC      |L43.204|
                  |L43.202|
0000ca  b906              CBNZ     r6,|L43.206|
                  |L43.204|
0000cc  e062              B        |L43.404|
                  |L43.206|
0000ce  f5b64f58          CMP      r6,#0xd800            ;204
0000d2  d31c              BCC      |L43.270|
0000d4  f5b64f5c          CMP      r6,#0xdc00            ;204
0000d8  d219              BCS      |L43.270|
0000da  7860              LDRB     r0,[r4,#1]            ;206
0000dc  285c              CMP      r0,#0x5c              ;206
0000de  d102              BNE      |L43.230|
0000e0  78a0              LDRB     r0,[r4,#2]            ;206
0000e2  2875              CMP      r0,#0x75              ;206
0000e4  d000              BEQ      |L43.232|
                  |L43.230|
0000e6  e055              B        |L43.404|
                  |L43.232|
0000e8  1ce0              ADDS     r0,r4,#3              ;207
0000ea  f7fffffe          BL       parse_hex4
0000ee  4682              MOV      r10,r0                ;207
0000f0  1da4              ADDS     r4,r4,#6              ;207
0000f2  f5ba4f5c          CMP      r10,#0xdc00           ;208
0000f6  d302              BCC      |L43.254|
0000f8  f5ba4f60          CMP      r10,#0xe000           ;208
0000fc  d300              BCC      |L43.256|
                  |L43.254|
0000fe  e049              B        |L43.404|
                  |L43.256|
000100  f3c60109          UBFX     r1,r6,#0,#10          ;209
000104  4650              MOV      r0,r10                ;209
000106  f361209f          BFI      r0,r1,#10,#22         ;209
00010a  f5003680          ADD      r6,r0,#0x10000        ;209
                  |L43.270|
00010e  2704              MOVS     r7,#4                 ;212
000110  2e80              CMP      r6,#0x80              ;212
000112  d201              BCS      |L43.280|
000114  2701              MOVS     r7,#1                 ;212
000116  e008              B        |L43.298|
                  |L43.280|
000118  f5b66f00          CMP      r6,#0x800             ;212
00011c  d201              BCS      |L43.290|
00011e  2702              MOVS     r7,#2                 ;212
000120  e003              B        |L43.298|
                  |L43.290|
000122  f5b63f80          CMP      r6,#0x10000           ;212
000126  d200              BCS      |L43.298|
000128  2703              MOVS     r7,#3                 ;212
                  |L43.298|
00012a  443d              ADD      r5,r5,r7              ;212
00012c  2f01              CMP      r7,#1                 ;214
00012e  d020              BEQ      |L43.370|
000130  2f02              CMP      r7,#2                 ;214
000132  d015              BEQ      |L43.352|
000134  2f03              CMP      r7,#3                 ;214
000136  d00a              BEQ      |L43.334|
000138  2f04              CMP      r7,#4                 ;214
00013a  d124              BNE      |L43.390|
00013c  f00600bf          AND      r0,r6,#0xbf           ;215
000140  f0400180          ORR      r1,r0,#0x80           ;215
000144  1e68              SUBS     r0,r5,#1              ;215
000146  4605              MOV      r5,r0                 ;215
000148  7001              STRB     r1,[r0,#0]            ;215
00014a  09b6              LSRS     r6,r6,#6              ;215
00014c  bf00              NOP                            ;216
                  |L43.334|
00014e  f00600bf          AND      r0,r6,#0xbf           ;216
000152  f0400180          ORR      r1,r0,#0x80           ;216
000156  1e68              SUBS     r0,r5,#1              ;216
000158  4605              MOV      r5,r0                 ;216
00015a  7001              STRB     r1,[r0,#0]            ;216
00015c  09b6              LSRS     r6,r6,#6              ;216
00015e  bf00              NOP                            ;217
                  |L43.352|
000160  f00600bf          AND      r0,r6,#0xbf           ;217
000164  f0400180          ORR      r1,r0,#0x80           ;217
000168  1e68              SUBS     r0,r5,#1              ;217
00016a  4605              MOV      r5,r0                 ;217
00016c  7001              STRB     r1,[r0,#0]            ;217
00016e  09b6              LSRS     r6,r6,#6              ;217
000170  bf00              NOP                            ;218
                  |L43.370|
000172  4815              LDR      r0,|L43.456|
000174  5dc0              LDRB     r0,[r0,r7]            ;218
000176  4330              ORRS     r0,r0,r6              ;218
000178  b2c1              UXTB     r1,r0                 ;218
00017a  e000              B        |L43.382|
                  |L43.380|
00017c  e006              B        |L43.396|
                  |L43.382|
00017e  1e68              SUBS     r0,r5,#1              ;218
000180  4605              MOV      r5,r0                 ;218
000182  7001              STRB     r1,[r0,#0]            ;218
000184  bf00              NOP                            ;214
                  |L43.390|
000186  bf00              NOP                            ;214
000188  443d              ADD      r5,r5,r7              ;220
00018a  e003              B        |L43.404|
                  |L43.396|
00018c  7820              LDRB     r0,[r4,#0]            ;222
00018e  f8050b01          STRB     r0,[r5],#1            ;222
000192  bf00              NOP                            ;222
                  |L43.404|
000194  bf00              NOP                            ;194
000196  1c64              ADDS     r4,r4,#1              ;224
                  |L43.408|
000198  7820              LDRB     r0,[r4,#0]            ;186
00019a  2822              CMP      r0,#0x22              ;186
00019c  d003              BEQ      |L43.422|
00019e  7820              LDRB     r0,[r4,#0]            ;186
0001a0  2800              CMP      r0,#0                 ;186
0001a2  f47faf5a          BNE      |L43.90|
                  |L43.422|
0001a6  2000              MOVS     r0,#0                 ;227
0001a8  7028              STRB     r0,[r5,#0]            ;227
0001aa  7820              LDRB     r0,[r4,#0]            ;228
0001ac  2822              CMP      r0,#0x22              ;228
0001ae  d100              BNE      |L43.434|
0001b0  1c64              ADDS     r4,r4,#1              ;228
                  |L43.434|
0001b2  f8cb9010          STR      r9,[r11,#0x10]        ;229
0001b6  2004              MOVS     r0,#4                 ;230
0001b8  f8cb000c          STR      r0,[r11,#0xc]         ;230
0001bc  4620              MOV      r0,r4                 ;231
0001be  e72e              B        |L43.30|
;;;233    
                          ENDP

                  |L43.448|
                          DCD      ||ep||
                  |L43.452|
                          DCD      cJSON_malloc
                  |L43.456|
                          DCD      firstByteMark

                          AREA ||i.parse_value||, CODE, READONLY, ALIGN=2

                  parse_value PROC
;;;325    /* Parser core - when encountering text, process appropriately. */
;;;326    static const char *parse_value(cJSON *item,const char *value)
000000  b570              PUSH     {r4-r6,lr}
;;;327    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;328    	if (!value)						return 0;	/* Fail on null. */
000006  b90c              CBNZ     r4,|L44.12|
000008  2000              MOVS     r0,#0
                  |L44.10|
;;;329    	if (!strncmp(value,"null",4))	{ item->type=cJSON_NULL;  return value+4; }
;;;330    	if (!strncmp(value,"false",5))	{ item->type=cJSON_False; return value+5; }
;;;331    	if (!strncmp(value,"true",4))	{ item->type=cJSON_True; item->valueint=1;	return value+4; }
;;;332    	if (*value=='\"')				{ return parse_string(item,value); }
;;;333    	if (*value=='-' || (*value>='0' && *value<='9'))	{ return parse_number(item,value); }
;;;334    	if (*value=='[')				{ return parse_array(item,value); }
;;;335    	if (*value=='{')				{ return parse_object(item,value); }
;;;336    
;;;337    	ep=value;return 0;	/* failure. */
;;;338    }
00000a  bd70              POP      {r4-r6,pc}
                  |L44.12|
00000c  2204              MOVS     r2,#4                 ;329
00000e  a124              ADR      r1,|L44.160|
000010  4620              MOV      r0,r4                 ;329
000012  f7fffffe          BL       strncmp
000016  b918              CBNZ     r0,|L44.32|
000018  2002              MOVS     r0,#2                 ;329
00001a  60e8              STR      r0,[r5,#0xc]          ;329
00001c  1d20              ADDS     r0,r4,#4              ;329
00001e  e7f4              B        |L44.10|
                  |L44.32|
000020  2205              MOVS     r2,#5                 ;330
000022  a121              ADR      r1,|L44.168|
000024  4620              MOV      r0,r4                 ;330
000026  f7fffffe          BL       strncmp
00002a  b918              CBNZ     r0,|L44.52|
00002c  2000              MOVS     r0,#0                 ;330
00002e  60e8              STR      r0,[r5,#0xc]          ;330
000030  1d60              ADDS     r0,r4,#5              ;330
000032  e7ea              B        |L44.10|
                  |L44.52|
000034  2204              MOVS     r2,#4                 ;331
000036  a11e              ADR      r1,|L44.176|
000038  4620              MOV      r0,r4                 ;331
00003a  f7fffffe          BL       strncmp
00003e  b920              CBNZ     r0,|L44.74|
000040  2001              MOVS     r0,#1                 ;331
000042  60e8              STR      r0,[r5,#0xc]          ;331
000044  6168              STR      r0,[r5,#0x14]         ;331
000046  1d20              ADDS     r0,r4,#4              ;331
000048  e7df              B        |L44.10|
                  |L44.74|
00004a  7820              LDRB     r0,[r4,#0]            ;332
00004c  2822              CMP      r0,#0x22              ;332
00004e  d104              BNE      |L44.90|
000050  4621              MOV      r1,r4                 ;332
000052  4628              MOV      r0,r5                 ;332
000054  f7fffffe          BL       parse_string
000058  e7d7              B        |L44.10|
                  |L44.90|
00005a  7820              LDRB     r0,[r4,#0]            ;333
00005c  282d              CMP      r0,#0x2d              ;333
00005e  d005              BEQ      |L44.108|
000060  7820              LDRB     r0,[r4,#0]            ;333
000062  2830              CMP      r0,#0x30              ;333
000064  db07              BLT      |L44.118|
000066  7820              LDRB     r0,[r4,#0]            ;333
000068  2839              CMP      r0,#0x39              ;333
00006a  dc04              BGT      |L44.118|
                  |L44.108|
00006c  4621              MOV      r1,r4                 ;333
00006e  4628              MOV      r0,r5                 ;333
000070  f7fffffe          BL       parse_number
000074  e7c9              B        |L44.10|
                  |L44.118|
000076  7820              LDRB     r0,[r4,#0]            ;334
000078  285b              CMP      r0,#0x5b              ;334
00007a  d104              BNE      |L44.134|
00007c  4621              MOV      r1,r4                 ;334
00007e  4628              MOV      r0,r5                 ;334
000080  f7fffffe          BL       parse_array
000084  e7c1              B        |L44.10|
                  |L44.134|
000086  7820              LDRB     r0,[r4,#0]            ;335
000088  287b              CMP      r0,#0x7b              ;335
00008a  d104              BNE      |L44.150|
00008c  4621              MOV      r1,r4                 ;335
00008e  4628              MOV      r0,r5                 ;335
000090  f7fffffe          BL       parse_object
000094  e7b9              B        |L44.10|
                  |L44.150|
000096  4808              LDR      r0,|L44.184|
000098  6004              STR      r4,[r0,#0]            ;337  ; ep
00009a  2000              MOVS     r0,#0                 ;337
00009c  e7b5              B        |L44.10|
;;;339    
                          ENDP

00009e  0000              DCW      0x0000
                  |L44.160|
0000a0  6e756c6c          DCB      "null",0
0000a4  00      
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L44.168|
0000a8  66616c73          DCB      "false",0
0000ac  6500    
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L44.176|
0000b0  74727565          DCB      "true",0
0000b4  00      
0000b5  00                DCB      0
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L44.184|
                          DCD      ||ep||

                          AREA ||i.print_array||, CODE, READONLY, ALIGN=2

                  print_array PROC
;;;387    /* Render an array to text */
;;;388    static char *print_array(cJSON *item,int depth,int fmt)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;389    {
000004  b082              SUB      sp,sp,#8
000006  4683              MOV      r11,r0
;;;390    	char **entries;
;;;391    	char *out=0,*ptr,*ret;int len=5;
000008  f04f0800          MOV      r8,#0
00000c  2005              MOVS     r0,#5
00000e  9001              STR      r0,[sp,#4]
;;;392    	cJSON *child=item->child;
000010  f8db9008          LDR      r9,[r11,#8]
;;;393    	int numentries=0,i=0,fail=0;
000014  2700              MOVS     r7,#0
000016  2500              MOVS     r5,#0
000018  2000              MOVS     r0,#0
00001a  9000              STR      r0,[sp,#0]
;;;394    	
;;;395    	/* How many entries in the array? */
;;;396    	while (child) numentries++,child=child->next;
00001c  e002              B        |L45.36|
                  |L45.30|
00001e  1c7f              ADDS     r7,r7,#1
000020  f8d99000          LDR      r9,[r9,#0]
                  |L45.36|
000024  f1b90f00          CMP      r9,#0
000028  d1f9              BNE      |L45.30|
;;;397    	/* Explicitly handle numentries==0 */
;;;398    	if (!numentries)
00002a  b97f              CBNZ     r7,|L45.76|
;;;399    	{
;;;400    		out=(char*)cJSON_malloc(3);
00002c  2003              MOVS     r0,#3
00002e  494c              LDR      r1,|L45.352|
000030  6809              LDR      r1,[r1,#0]  ; cJSON_malloc
000032  4788              BLX      r1
000034  4680              MOV      r8,r0
;;;401    		if (out) strcpy(out,"[]");
000036  f1b80f00          CMP      r8,#0
00003a  d003              BEQ      |L45.68|
00003c  a149              ADR      r1,|L45.356|
00003e  4640              MOV      r0,r8
000040  f7fffffe          BL       strcpy
                  |L45.68|
;;;402    		return out;
000044  4640              MOV      r0,r8
                  |L45.70|
;;;403    	}
;;;404    	/* Allocate an array to hold the values for each */
;;;405    	entries=(char**)cJSON_malloc(numentries*sizeof(char*));
;;;406    	if (!entries) return 0;
;;;407    	memset(entries,0,numentries*sizeof(char*));
;;;408    	/* Retrieve all the results: */
;;;409    	child=item->child;
;;;410    	while (child && !fail)
;;;411    	{
;;;412    		ret=print_value(child,depth+1,fmt);
;;;413    		entries[i++]=ret;
;;;414    		if (ret) len+=strlen(ret)+2+(fmt?1:0); else fail=1;
;;;415    		child=child->next;
;;;416    	}
;;;417    	
;;;418    	/* If we didn't fail, try to malloc the output string */
;;;419    	if (!fail) out=(char*)cJSON_malloc(len);
;;;420    	/* If that fails, we fail. */
;;;421    	if (!out) fail=1;
;;;422    
;;;423    	/* Handle failure. */
;;;424    	if (fail)
;;;425    	{
;;;426    		for (i=0;i<numentries;i++) if (entries[i]) cJSON_free(entries[i]);
;;;427    		cJSON_free(entries);
;;;428    		return 0;
;;;429    	}
;;;430    	
;;;431    	/* Compose the output array. */
;;;432    	*out='[';
;;;433    	ptr=out+1;*ptr=0;
;;;434    	for (i=0;i<numentries;i++)
;;;435    	{
;;;436    		strcpy(ptr,entries[i]);ptr+=strlen(entries[i]);
;;;437    		if (i!=numentries-1) {*ptr++=',';if(fmt)*ptr++=' ';*ptr=0;}
;;;438    		cJSON_free(entries[i]);
;;;439    	}
;;;440    	cJSON_free(entries);
;;;441    	*ptr++=']';*ptr++=0;
;;;442    	return out;	
;;;443    }
000046  b005              ADD      sp,sp,#0x14
000048  e8bd8ff0          POP      {r4-r11,pc}
                  |L45.76|
00004c  00b8              LSLS     r0,r7,#2              ;405
00004e  4944              LDR      r1,|L45.352|
000050  6809              LDR      r1,[r1,#0]            ;405  ; cJSON_malloc
000052  4788              BLX      r1                    ;405
000054  4606              MOV      r6,r0                 ;405
000056  b90e              CBNZ     r6,|L45.92|
000058  2000              MOVS     r0,#0                 ;406
00005a  e7f4              B        |L45.70|
                  |L45.92|
00005c  00b9              LSLS     r1,r7,#2              ;407
00005e  4630              MOV      r0,r6                 ;407
000060  f7fffffe          BL       __aeabi_memclr4
000064  f8db9008          LDR      r9,[r11,#8]           ;409
000068  e01f              B        |L45.170|
                  |L45.106|
00006a  e9dd1203          LDRD     r1,r2,[sp,#0xc]       ;412
00006e  1c49              ADDS     r1,r1,#1              ;412
000070  4648              MOV      r0,r9                 ;412
000072  f7fffffe          BL       print_value
000076  4682              MOV      r10,r0                ;412
000078  4629              MOV      r1,r5                 ;413
00007a  1c6d              ADDS     r5,r5,#1              ;413
00007c  f846a021          STR      r10,[r6,r1,LSL #2]    ;413
000080  f1ba0f00          CMP      r10,#0                ;414
000084  d00d              BEQ      |L45.162|
000086  4650              MOV      r0,r10                ;414
000088  f7fffffe          BL       strlen
00008c  1c80              ADDS     r0,r0,#2              ;414
00008e  9904              LDR      r1,[sp,#0x10]         ;414
000090  b109              CBZ      r1,|L45.150|
000092  2101              MOVS     r1,#1                 ;414
000094  e000              B        |L45.152|
                  |L45.150|
000096  2100              MOVS     r1,#0                 ;414
                  |L45.152|
000098  4401              ADD      r1,r1,r0              ;414
00009a  9801              LDR      r0,[sp,#4]            ;414
00009c  4408              ADD      r0,r0,r1              ;414
00009e  9001              STR      r0,[sp,#4]            ;414
0000a0  e001              B        |L45.166|
                  |L45.162|
0000a2  2001              MOVS     r0,#1                 ;414
0000a4  9000              STR      r0,[sp,#0]            ;414
                  |L45.166|
0000a6  f8d99000          LDR      r9,[r9,#0]            ;415
                  |L45.170|
0000aa  f1b90f00          CMP      r9,#0                 ;410
0000ae  d002              BEQ      |L45.182|
0000b0  9800              LDR      r0,[sp,#0]            ;410
0000b2  2800              CMP      r0,#0                 ;410
0000b4  d0d9              BEQ      |L45.106|
                  |L45.182|
0000b6  9800              LDR      r0,[sp,#0]            ;419
0000b8  b920              CBNZ     r0,|L45.196|
0000ba  4929              LDR      r1,|L45.352|
0000bc  9801              LDR      r0,[sp,#4]            ;419
0000be  6809              LDR      r1,[r1,#0]            ;419  ; cJSON_malloc
0000c0  4788              BLX      r1                    ;419
0000c2  4680              MOV      r8,r0                 ;419
                  |L45.196|
0000c4  f1b80f00          CMP      r8,#0                 ;421
0000c8  d101              BNE      |L45.206|
0000ca  2001              MOVS     r0,#1                 ;421
0000cc  9000              STR      r0,[sp,#0]            ;421
                  |L45.206|
0000ce  9800              LDR      r0,[sp,#0]            ;424
0000d0  b190              CBZ      r0,|L45.248|
0000d2  2500              MOVS     r5,#0                 ;426
0000d4  e008              B        |L45.232|
                  |L45.214|
0000d6  f8560025          LDR      r0,[r6,r5,LSL #2]     ;426
0000da  b120              CBZ      r0,|L45.230|
0000dc  f8560025          LDR      r0,[r6,r5,LSL #2]     ;426
0000e0  4921              LDR      r1,|L45.360|
0000e2  6809              LDR      r1,[r1,#0]            ;426  ; cJSON_free
0000e4  4788              BLX      r1                    ;426
                  |L45.230|
0000e6  1c6d              ADDS     r5,r5,#1              ;426
                  |L45.232|
0000e8  42bd              CMP      r5,r7                 ;426
0000ea  dbf4              BLT      |L45.214|
0000ec  4630              MOV      r0,r6                 ;427
0000ee  491e              LDR      r1,|L45.360|
0000f0  6809              LDR      r1,[r1,#0]            ;427  ; cJSON_free
0000f2  4788              BLX      r1                    ;427
0000f4  2000              MOVS     r0,#0                 ;428
0000f6  e7a6              B        |L45.70|
                  |L45.248|
0000f8  205b              MOVS     r0,#0x5b              ;432
0000fa  f8880000          STRB     r0,[r8,#0]            ;432
0000fe  f1080401          ADD      r4,r8,#1              ;433
000102  2000              MOVS     r0,#0                 ;433
000104  7020              STRB     r0,[r4,#0]            ;433
000106  2500              MOVS     r5,#0                 ;434
000108  e01c              B        |L45.324|
                  |L45.266|
00010a  f8561025          LDR      r1,[r6,r5,LSL #2]     ;436
00010e  4620              MOV      r0,r4                 ;436
000110  f7fffffe          BL       strcpy
000114  f8560025          LDR      r0,[r6,r5,LSL #2]     ;436
000118  f7fffffe          BL       strlen
00011c  4404              ADD      r4,r4,r0              ;436
00011e  1e78              SUBS     r0,r7,#1              ;437
000120  42a8              CMP      r0,r5                 ;437
000122  d009              BEQ      |L45.312|
000124  202c              MOVS     r0,#0x2c              ;437
000126  f8040b01          STRB     r0,[r4],#1            ;437
00012a  9804              LDR      r0,[sp,#0x10]         ;437
00012c  b110              CBZ      r0,|L45.308|
00012e  2020              MOVS     r0,#0x20              ;437
000130  f8040b01          STRB     r0,[r4],#1            ;437
                  |L45.308|
000134  2000              MOVS     r0,#0                 ;437
000136  7020              STRB     r0,[r4,#0]            ;437
                  |L45.312|
000138  f8560025          LDR      r0,[r6,r5,LSL #2]     ;438
00013c  490a              LDR      r1,|L45.360|
00013e  6809              LDR      r1,[r1,#0]            ;438  ; cJSON_free
000140  4788              BLX      r1                    ;438
000142  1c6d              ADDS     r5,r5,#1              ;434
                  |L45.324|
000144  42bd              CMP      r5,r7                 ;434
000146  dbe0              BLT      |L45.266|
000148  4630              MOV      r0,r6                 ;440
00014a  4907              LDR      r1,|L45.360|
00014c  6809              LDR      r1,[r1,#0]            ;440  ; cJSON_free
00014e  4788              BLX      r1                    ;440
000150  205d              MOVS     r0,#0x5d              ;441
000152  f8040b01          STRB     r0,[r4],#1            ;441
000156  2000              MOVS     r0,#0                 ;441
000158  f8040b01          STRB     r0,[r4],#1            ;441
00015c  4640              MOV      r0,r8                 ;442
00015e  e772              B        |L45.70|
;;;444    
                          ENDP

                  |L45.352|
                          DCD      cJSON_malloc
                  |L45.356|
000164  5b5d00            DCB      "[]",0
000167  00                DCB      0
                  |L45.360|
                          DCD      cJSON_free

                          AREA ||i.print_number||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_e
                  print_number PROC
;;;137    /* Render the number nicely from the given item into a string. */
;;;138    static char *print_number(cJSON *item)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;139    {
000004  4681              MOV      r9,r0
;;;140    	char *str;
;;;141    	double d=item->valuedouble;
000006  e9d94506          LDRD     r4,r5,[r9,#0x18]
;;;142    	if (fabs(((double)item->valueint)-d)<=DBL_EPSILON && d<=INT_MAX && d>=INT_MIN)
00000a  f8d90014          LDR      r0,[r9,#0x14]
00000e  f7fffffe          BL       __aeabi_i2d
000012  4607              MOV      r7,r0
000014  4622              MOV      r2,r4
000016  462b              MOV      r3,r5
000018  f7fffffe          BL       __aeabi_dsub
00001c  f0214100          BIC      r1,r1,#0x80000000
000020  4682              MOV      r10,r0
000022  2200              MOVS     r2,#0
000024  4b34              LDR      r3,|L46.248|
000026  f7fffffe          BL       __aeabi_cdcmple
00002a  d81b              BHI      |L46.100|
00002c  4a33              LDR      r2,|L46.252|
00002e  4b34              LDR      r3,|L46.256|
000030  4620              MOV      r0,r4
000032  4629              MOV      r1,r5
000034  f7fffffe          BL       __aeabi_cdcmple
000038  d814              BHI      |L46.100|
00003a  2200              MOVS     r2,#0
00003c  4b31              LDR      r3,|L46.260|
00003e  4620              MOV      r0,r4
000040  4629              MOV      r1,r5
000042  f7fffffe          BL       __aeabi_cdrcmple
000046  d80d              BHI      |L46.100|
;;;143    	{
;;;144    		str=(char*)cJSON_malloc(21);	/* 2^64+1 can be represented in 21 chars. */
000048  2015              MOVS     r0,#0x15
00004a  492f              LDR      r1,|L46.264|
00004c  6809              LDR      r1,[r1,#0]  ; cJSON_malloc
00004e  4788              BLX      r1
000050  4606              MOV      r6,r0
;;;145    		if (str) sprintf(str,"%d",item->valueint);
000052  2e00              CMP      r6,#0
000054  d04c              BEQ      |L46.240|
000056  a12d              ADR      r1,|L46.268|
000058  4630              MOV      r0,r6
00005a  f8d92014          LDR      r2,[r9,#0x14]
00005e  f7fffffe          BL       __2sprintf
000062  e045              B        |L46.240|
                  |L46.100|
;;;146    	}
;;;147    	else
;;;148    	{
;;;149    		str=(char*)cJSON_malloc(64);	/* This is a nice tradeoff. */
000064  2040              MOVS     r0,#0x40
000066  4928              LDR      r1,|L46.264|
000068  6809              LDR      r1,[r1,#0]  ; cJSON_malloc
00006a  4788              BLX      r1
00006c  4606              MOV      r6,r0
;;;150    		if (str)
00006e  2e00              CMP      r6,#0
000070  d03e              BEQ      |L46.240|
;;;151    		{
;;;152    			if (fabs(floor(d)-d)<=DBL_EPSILON && fabs(d)<1.0e60)sprintf(str,"%.0f",d);
000072  4620              MOV      r0,r4
000074  4629              MOV      r1,r5
000076  f7fffffe          BL       floor
00007a  4607              MOV      r7,r0
00007c  4622              MOV      r2,r4
00007e  462b              MOV      r3,r5
000080  f7fffffe          BL       __aeabi_dsub
000084  f0214100          BIC      r1,r1,#0x80000000
000088  4682              MOV      r10,r0
00008a  2200              MOVS     r2,#0
00008c  4b1a              LDR      r3,|L46.248|
00008e  f7fffffe          BL       __aeabi_cdcmple
000092  d80f              BHI      |L46.180|
000094  f0254100          BIC      r1,r5,#0x80000000
000098  4627              MOV      r7,r4
00009a  4a1d              LDR      r2,|L46.272|
00009c  4b1d              LDR      r3,|L46.276|
00009e  4638              MOV      r0,r7
0000a0  f7fffffe          BL       __aeabi_cdcmple
0000a4  d206              BCS      |L46.180|
0000a6  4622              MOV      r2,r4
0000a8  462b              MOV      r3,r5
0000aa  a11b              ADR      r1,|L46.280|
0000ac  4630              MOV      r0,r6
0000ae  f7fffffe          BL       __2sprintf
0000b2  e01d              B        |L46.240|
                  |L46.180|
;;;153    			else if (fabs(d)<1.0e-6 || fabs(d)>1.0e9)			sprintf(str,"%e",d);
0000b4  f0254100          BIC      r1,r5,#0x80000000
0000b8  4627              MOV      r7,r4
0000ba  4a19              LDR      r2,|L46.288|
0000bc  4b19              LDR      r3,|L46.292|
0000be  4638              MOV      r0,r7
0000c0  f7fffffe          BL       __aeabi_cdcmple
0000c4  d307              BCC      |L46.214|
0000c6  f0254100          BIC      r1,r5,#0x80000000
0000ca  2200              MOVS     r2,#0
0000cc  4b16              LDR      r3,|L46.296|
0000ce  4638              MOV      r0,r7
0000d0  f7fffffe          BL       __aeabi_cdrcmple
0000d4  d206              BCS      |L46.228|
                  |L46.214|
0000d6  4622              MOV      r2,r4
0000d8  462b              MOV      r3,r5
0000da  a114              ADR      r1,|L46.300|
0000dc  4630              MOV      r0,r6
0000de  f7fffffe          BL       __2sprintf
0000e2  e005              B        |L46.240|
                  |L46.228|
;;;154    			else												sprintf(str,"%f",d);
0000e4  4622              MOV      r2,r4
0000e6  462b              MOV      r3,r5
0000e8  a111              ADR      r1,|L46.304|
0000ea  4630              MOV      r0,r6
0000ec  f7fffffe          BL       __2sprintf
                  |L46.240|
;;;155    		}
;;;156    	}
;;;157    	return str;
0000f0  4630              MOV      r0,r6
;;;158    }
0000f2  e8bd9ff0          POP      {r4-r12,pc}
;;;159    
                          ENDP

0000f6  0000              DCW      0x0000
                  |L46.248|
                          DCD      0x3cb00000
                  |L46.252|
                          DCD      0xffc00000
                  |L46.256|
                          DCD      0x41dfffff
                  |L46.260|
                          DCD      0xc1e00000
                  |L46.264|
                          DCD      cJSON_malloc
                  |L46.268|
00010c  256400            DCB      "%d",0
00010f  00                DCB      0
                  |L46.272|
                          DCD      0xe4c2f344
                  |L46.276|
                          DCD      0x4c63e9e4
                  |L46.280|
000118  252e3066          DCB      "%.0f",0
00011c  00      
00011d  00                DCB      0
00011e  00                DCB      0
00011f  00                DCB      0
                  |L46.288|
                          DCD      0xa0b5ed8d
                  |L46.292|
                          DCD      0x3eb0c6f7
                  |L46.296|
                          DCD      0x41cdcd65
                  |L46.300|
00012c  256500            DCB      "%e",0
00012f  00                DCB      0
                  |L46.304|
000130  256600            DCB      "%f",0
000133  00                DCB      0

                          AREA ||i.print_object||, CODE, READONLY, ALIGN=2

                  print_object PROC
;;;482    /* Render an object to text. */
;;;483    static char *print_object(cJSON *item,int depth,int fmt)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;484    {
000004  b088              SUB      sp,sp,#0x20
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
;;;485    	char **entries=0,**names=0;
00000a  f04f0900          MOV      r9,#0
00000e  46ca              MOV      r10,r9
;;;486    	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;
000010  2000              MOVS     r0,#0
000012  9007              STR      r0,[sp,#0x1c]
000014  2007              MOVS     r0,#7
000016  9004              STR      r0,[sp,#0x10]
000018  2500              MOVS     r5,#0
;;;487    	cJSON *child=item->child;
00001a  9808              LDR      r0,[sp,#0x20]
00001c  6880              LDR      r0,[r0,#8]
00001e  9002              STR      r0,[sp,#8]
;;;488    	int numentries=0,fail=0;
000020  2700              MOVS     r7,#0
000022  2000              MOVS     r0,#0
000024  9001              STR      r0,[sp,#4]
;;;489    	/* Count the number of entries. */
;;;490    	while (child) numentries++,child=child->next;
000026  e003              B        |L47.48|
                  |L47.40|
000028  1c7f              ADDS     r7,r7,#1
00002a  9802              LDR      r0,[sp,#8]
00002c  6800              LDR      r0,[r0,#0]
00002e  9002              STR      r0,[sp,#8]
                  |L47.48|
000030  9802              LDR      r0,[sp,#8]
000032  2800              CMP      r0,#0
000034  d1f8              BNE      |L47.40|
;;;491    	/* Explicitly handle empty object case */
;;;492    	if (!numentries)
000036  bb4f              CBNZ     r7,|L47.140|
;;;493    	{
;;;494    		out=(char*)cJSON_malloc(fmt?depth+4:3);
000038  b116              CBZ      r6,|L47.64|
00003a  f1080104          ADD      r1,r8,#4
00003e  e000              B        |L47.66|
                  |L47.64|
000040  2103              MOVS     r1,#3
                  |L47.66|
000042  4608              MOV      r0,r1
000044  4989              LDR      r1,|L47.620|
000046  6809              LDR      r1,[r1,#0]  ; cJSON_malloc
000048  4788              BLX      r1
00004a  9007              STR      r0,[sp,#0x1c]
;;;495    		if (!out)	return 0;
00004c  9807              LDR      r0,[sp,#0x1c]
00004e  b918              CBNZ     r0,|L47.88|
000050  2000              MOVS     r0,#0
                  |L47.82|
;;;496    		ptr=out;*ptr++='{';
;;;497    		if (fmt) {*ptr++='\n';for (i=0;i<depth-1;i++) *ptr++='\t';}
;;;498    		*ptr++='}';*ptr++=0;
;;;499    		return out;
;;;500    	}
;;;501    	/* Allocate space for the names and the objects */
;;;502    	entries=(char**)cJSON_malloc(numentries*sizeof(char*));
;;;503    	if (!entries) return 0;
;;;504    	names=(char**)cJSON_malloc(numentries*sizeof(char*));
;;;505    	if (!names) {cJSON_free(entries);return 0;}
;;;506    	memset(entries,0,sizeof(char*)*numentries);
;;;507    	memset(names,0,sizeof(char*)*numentries);
;;;508    
;;;509    	/* Collect all the results into our arrays: */
;;;510    	child=item->child;depth++;if (fmt) len+=depth;
;;;511    	while (child)
;;;512    	{
;;;513    		names[i]=str=print_string_ptr(child->string);
;;;514    		entries[i++]=ret=print_value(child,depth,fmt);
;;;515    		if (str && ret) len+=strlen(ret)+strlen(str)+2+(fmt?2+depth:0); else fail=1;
;;;516    		child=child->next;
;;;517    	}
;;;518    	
;;;519    	/* Try to allocate the output string */
;;;520    	if (!fail) out=(char*)cJSON_malloc(len);
;;;521    	if (!out) fail=1;
;;;522    
;;;523    	/* Handle failure */
;;;524    	if (fail)
;;;525    	{
;;;526    		for (i=0;i<numentries;i++) {if (names[i]) cJSON_free(names[i]);if (entries[i]) cJSON_free(entries[i]);}
;;;527    		cJSON_free(names);cJSON_free(entries);
;;;528    		return 0;
;;;529    	}
;;;530    	
;;;531    	/* Compose the output: */
;;;532    	*out='{';ptr=out+1;if (fmt)*ptr++='\n';*ptr=0;
;;;533    	for (i=0;i<numentries;i++)
;;;534    	{
;;;535    		if (fmt) for (j=0;j<depth;j++) *ptr++='\t';
;;;536    		strcpy(ptr,names[i]);ptr+=strlen(names[i]);
;;;537    		*ptr++=':';if (fmt) *ptr++='\t';
;;;538    		strcpy(ptr,entries[i]);ptr+=strlen(entries[i]);
;;;539    		if (i!=numentries-1) *ptr++=',';
;;;540    		if (fmt) *ptr++='\n';*ptr=0;
;;;541    		cJSON_free(names[i]);cJSON_free(entries[i]);
;;;542    	}
;;;543    	
;;;544    	cJSON_free(names);cJSON_free(entries);
;;;545    	if (fmt) for (i=0;i<depth-1;i++) *ptr++='\t';
;;;546    	*ptr++='}';*ptr++=0;
;;;547    	return out;	
;;;548    }
000052  b00b              ADD      sp,sp,#0x2c
000054  e8bd8ff0          POP      {r4-r11,pc}
                  |L47.88|
000058  9c07              LDR      r4,[sp,#0x1c]         ;496
00005a  207b              MOVS     r0,#0x7b              ;496
00005c  f8040b01          STRB     r0,[r4],#1            ;496
000060  b166              CBZ      r6,|L47.124|
000062  200a              MOVS     r0,#0xa               ;497
000064  f8040b01          STRB     r0,[r4],#1            ;497
000068  2500              MOVS     r5,#0                 ;497
00006a  e003              B        |L47.116|
                  |L47.108|
00006c  2009              MOVS     r0,#9                 ;497
00006e  f8040b01          STRB     r0,[r4],#1            ;497
000072  1c6d              ADDS     r5,r5,#1              ;497
                  |L47.116|
000074  f1a80001          SUB      r0,r8,#1              ;497
000078  42a8              CMP      r0,r5                 ;497
00007a  dcf7              BGT      |L47.108|
                  |L47.124|
00007c  207d              MOVS     r0,#0x7d              ;498
00007e  f8040b01          STRB     r0,[r4],#1            ;498
000082  2000              MOVS     r0,#0                 ;498
000084  f8040b01          STRB     r0,[r4],#1            ;498
000088  9807              LDR      r0,[sp,#0x1c]         ;499
00008a  e7e2              B        |L47.82|
                  |L47.140|
00008c  00b8              LSLS     r0,r7,#2              ;502
00008e  4977              LDR      r1,|L47.620|
000090  6809              LDR      r1,[r1,#0]            ;502  ; cJSON_malloc
000092  4788              BLX      r1                    ;502
000094  4681              MOV      r9,r0                 ;502
000096  f1b90f00          CMP      r9,#0                 ;503
00009a  d101              BNE      |L47.160|
00009c  2000              MOVS     r0,#0                 ;503
00009e  e7d8              B        |L47.82|
                  |L47.160|
0000a0  00b8              LSLS     r0,r7,#2              ;504
0000a2  4972              LDR      r1,|L47.620|
0000a4  6809              LDR      r1,[r1,#0]            ;504  ; cJSON_malloc
0000a6  4788              BLX      r1                    ;504
0000a8  4682              MOV      r10,r0                ;504
0000aa  f1ba0f00          CMP      r10,#0                ;505
0000ae  d105              BNE      |L47.188|
0000b0  4648              MOV      r0,r9                 ;505
0000b2  496f              LDR      r1,|L47.624|
0000b4  6809              LDR      r1,[r1,#0]            ;505  ; cJSON_free
0000b6  4788              BLX      r1                    ;505
0000b8  2000              MOVS     r0,#0                 ;505
0000ba  e7ca              B        |L47.82|
                  |L47.188|
0000bc  00b9              LSLS     r1,r7,#2              ;506
0000be  4648              MOV      r0,r9                 ;506
0000c0  f7fffffe          BL       __aeabi_memclr4
0000c4  00b9              LSLS     r1,r7,#2              ;507
0000c6  4650              MOV      r0,r10                ;507
0000c8  f7fffffe          BL       __aeabi_memclr4
0000cc  9808              LDR      r0,[sp,#0x20]         ;510
0000ce  6880              LDR      r0,[r0,#8]            ;510
0000d0  9002              STR      r0,[sp,#8]            ;510
0000d2  f1080801          ADD      r8,r8,#1              ;510
0000d6  b116              CBZ      r6,|L47.222|
0000d8  9804              LDR      r0,[sp,#0x10]         ;510
0000da  4440              ADD      r0,r0,r8              ;510
0000dc  9004              STR      r0,[sp,#0x10]         ;510
                  |L47.222|
0000de  e02d              B        |L47.316|
                  |L47.224|
0000e0  9902              LDR      r1,[sp,#8]            ;513
0000e2  6a08              LDR      r0,[r1,#0x20]         ;513
0000e4  f7fffffe          BL       print_string_ptr
0000e8  9005              STR      r0,[sp,#0x14]         ;513
0000ea  f84a0025          STR      r0,[r10,r5,LSL #2]    ;513
0000ee  4632              MOV      r2,r6                 ;514
0000f0  4641              MOV      r1,r8                 ;514
0000f2  9802              LDR      r0,[sp,#8]            ;514
0000f4  f7fffffe          BL       print_value
0000f8  4629              MOV      r1,r5                 ;514
0000fa  1c6d              ADDS     r5,r5,#1              ;514
0000fc  9006              STR      r0,[sp,#0x18]         ;514
0000fe  f8490021          STR      r0,[r9,r1,LSL #2]     ;514
000102  9805              LDR      r0,[sp,#0x14]         ;515
000104  b1a8              CBZ      r0,|L47.306|
000106  9806              LDR      r0,[sp,#0x18]         ;515
000108  b198              CBZ      r0,|L47.306|
00010a  9806              LDR      r0,[sp,#0x18]         ;515
00010c  f7fffffe          BL       strlen
000110  4683              MOV      r11,r0                ;515
000112  9805              LDR      r0,[sp,#0x14]         ;515
000114  f7fffffe          BL       strlen
000118  eb0b0100          ADD      r1,r11,r0             ;515
00011c  1c89              ADDS     r1,r1,#2              ;515
00011e  b116              CBZ      r6,|L47.294|
000120  f1080002          ADD      r0,r8,#2              ;515
000124  e000              B        |L47.296|
                  |L47.294|
000126  2000              MOVS     r0,#0                 ;515
                  |L47.296|
000128  4401              ADD      r1,r1,r0              ;515
00012a  9804              LDR      r0,[sp,#0x10]         ;515
00012c  4408              ADD      r0,r0,r1              ;515
00012e  9004              STR      r0,[sp,#0x10]         ;515
000130  e001              B        |L47.310|
                  |L47.306|
000132  2001              MOVS     r0,#1                 ;515
000134  9001              STR      r0,[sp,#4]            ;515
                  |L47.310|
000136  9802              LDR      r0,[sp,#8]            ;516
000138  6800              LDR      r0,[r0,#0]            ;516
00013a  9002              STR      r0,[sp,#8]            ;516
                  |L47.316|
00013c  9802              LDR      r0,[sp,#8]            ;511
00013e  2800              CMP      r0,#0                 ;511
000140  d1ce              BNE      |L47.224|
000142  9801              LDR      r0,[sp,#4]            ;520
000144  b920              CBNZ     r0,|L47.336|
000146  4949              LDR      r1,|L47.620|
000148  9804              LDR      r0,[sp,#0x10]         ;520
00014a  6809              LDR      r1,[r1,#0]            ;520  ; cJSON_malloc
00014c  4788              BLX      r1                    ;520
00014e  9007              STR      r0,[sp,#0x1c]         ;520
                  |L47.336|
000150  9807              LDR      r0,[sp,#0x1c]         ;521
000152  b908              CBNZ     r0,|L47.344|
000154  2001              MOVS     r0,#1                 ;521
000156  9001              STR      r0,[sp,#4]            ;521
                  |L47.344|
000158  9801              LDR      r0,[sp,#4]            ;524
00015a  b1f0              CBZ      r0,|L47.410|
00015c  2500              MOVS     r5,#0                 ;526
00015e  e010              B        |L47.386|
                  |L47.352|
000160  f85a0025          LDR      r0,[r10,r5,LSL #2]    ;526
000164  b120              CBZ      r0,|L47.368|
000166  f85a0025          LDR      r0,[r10,r5,LSL #2]    ;526
00016a  4941              LDR      r1,|L47.624|
00016c  6809              LDR      r1,[r1,#0]            ;526  ; cJSON_free
00016e  4788              BLX      r1                    ;526
                  |L47.368|
000170  f8590025          LDR      r0,[r9,r5,LSL #2]     ;526
000174  b120              CBZ      r0,|L47.384|
000176  f8590025          LDR      r0,[r9,r5,LSL #2]     ;526
00017a  493d              LDR      r1,|L47.624|
00017c  6809              LDR      r1,[r1,#0]            ;526  ; cJSON_free
00017e  4788              BLX      r1                    ;526
                  |L47.384|
000180  1c6d              ADDS     r5,r5,#1              ;526
                  |L47.386|
000182  42bd              CMP      r5,r7                 ;526
000184  dbec              BLT      |L47.352|
000186  4650              MOV      r0,r10                ;527
000188  4939              LDR      r1,|L47.624|
00018a  6809              LDR      r1,[r1,#0]            ;527  ; cJSON_free
00018c  4788              BLX      r1                    ;527
00018e  4648              MOV      r0,r9                 ;527
000190  4937              LDR      r1,|L47.624|
000192  6809              LDR      r1,[r1,#0]            ;527  ; cJSON_free
000194  4788              BLX      r1                    ;527
000196  2000              MOVS     r0,#0                 ;528
000198  e75b              B        |L47.82|
                  |L47.410|
00019a  217b              MOVS     r1,#0x7b              ;532
00019c  9807              LDR      r0,[sp,#0x1c]         ;532
00019e  7001              STRB     r1,[r0,#0]            ;532
0001a0  9807              LDR      r0,[sp,#0x1c]         ;532
0001a2  1c44              ADDS     r4,r0,#1              ;532
0001a4  b116              CBZ      r6,|L47.428|
0001a6  200a              MOVS     r0,#0xa               ;532
0001a8  f8040b01          STRB     r0,[r4],#1            ;532
                  |L47.428|
0001ac  2000              MOVS     r0,#0                 ;532
0001ae  7020              STRB     r0,[r4,#0]            ;532
0001b0  2500              MOVS     r5,#0                 ;533
0001b2  e03e              B        |L47.562|
                  |L47.436|
0001b4  b15e              CBZ      r6,|L47.462|
0001b6  2000              MOVS     r0,#0                 ;535
0001b8  9003              STR      r0,[sp,#0xc]          ;535
0001ba  e005              B        |L47.456|
                  |L47.444|
0001bc  2009              MOVS     r0,#9                 ;535
0001be  f8040b01          STRB     r0,[r4],#1            ;535
0001c2  9803              LDR      r0,[sp,#0xc]          ;535
0001c4  1c40              ADDS     r0,r0,#1              ;535
0001c6  9003              STR      r0,[sp,#0xc]          ;535
                  |L47.456|
0001c8  9803              LDR      r0,[sp,#0xc]          ;535
0001ca  4540              CMP      r0,r8                 ;535
0001cc  dbf6              BLT      |L47.444|
                  |L47.462|
0001ce  f85a1025          LDR      r1,[r10,r5,LSL #2]    ;536
0001d2  4620              MOV      r0,r4                 ;536
0001d4  f7fffffe          BL       strcpy
0001d8  f85a0025          LDR      r0,[r10,r5,LSL #2]    ;536
0001dc  f7fffffe          BL       strlen
0001e0  4404              ADD      r4,r4,r0              ;536
0001e2  203a              MOVS     r0,#0x3a              ;537
0001e4  f8040b01          STRB     r0,[r4],#1            ;537
0001e8  b116              CBZ      r6,|L47.496|
0001ea  2009              MOVS     r0,#9                 ;537
0001ec  f8040b01          STRB     r0,[r4],#1            ;537
                  |L47.496|
0001f0  f8591025          LDR      r1,[r9,r5,LSL #2]     ;538
0001f4  4620              MOV      r0,r4                 ;538
0001f6  f7fffffe          BL       strcpy
0001fa  f8590025          LDR      r0,[r9,r5,LSL #2]     ;538
0001fe  f7fffffe          BL       strlen
000202  4404              ADD      r4,r4,r0              ;538
000204  1e78              SUBS     r0,r7,#1              ;539
000206  42a8              CMP      r0,r5                 ;539
000208  d002              BEQ      |L47.528|
00020a  202c              MOVS     r0,#0x2c              ;539
00020c  f8040b01          STRB     r0,[r4],#1            ;539
                  |L47.528|
000210  b116              CBZ      r6,|L47.536|
000212  200a              MOVS     r0,#0xa               ;540
000214  f8040b01          STRB     r0,[r4],#1            ;540
                  |L47.536|
000218  2000              MOVS     r0,#0                 ;540
00021a  7020              STRB     r0,[r4,#0]            ;540
00021c  f85a0025          LDR      r0,[r10,r5,LSL #2]    ;541
000220  4913              LDR      r1,|L47.624|
000222  6809              LDR      r1,[r1,#0]            ;541  ; cJSON_free
000224  4788              BLX      r1                    ;541
000226  f8590025          LDR      r0,[r9,r5,LSL #2]     ;541
00022a  4911              LDR      r1,|L47.624|
00022c  6809              LDR      r1,[r1,#0]            ;541  ; cJSON_free
00022e  4788              BLX      r1                    ;541
000230  1c6d              ADDS     r5,r5,#1              ;533
                  |L47.562|
000232  42bd              CMP      r5,r7                 ;533
000234  dbbe              BLT      |L47.436|
000236  4650              MOV      r0,r10                ;544
000238  490d              LDR      r1,|L47.624|
00023a  6809              LDR      r1,[r1,#0]            ;544  ; cJSON_free
00023c  4788              BLX      r1                    ;544
00023e  4648              MOV      r0,r9                 ;544
000240  490b              LDR      r1,|L47.624|
000242  6809              LDR      r1,[r1,#0]            ;544  ; cJSON_free
000244  4788              BLX      r1                    ;544
000246  b14e              CBZ      r6,|L47.604|
000248  2500              MOVS     r5,#0                 ;545
00024a  e003              B        |L47.596|
                  |L47.588|
00024c  2009              MOVS     r0,#9                 ;545
00024e  f8040b01          STRB     r0,[r4],#1            ;545
000252  1c6d              ADDS     r5,r5,#1              ;545
                  |L47.596|
000254  f1a80001          SUB      r0,r8,#1              ;545
000258  42a8              CMP      r0,r5                 ;545
00025a  dcf7              BGT      |L47.588|
                  |L47.604|
00025c  207d              MOVS     r0,#0x7d              ;546
00025e  f8040b01          STRB     r0,[r4],#1            ;546
000262  2000              MOVS     r0,#0                 ;546
000264  f8040b01          STRB     r0,[r4],#1            ;546
000268  9807              LDR      r0,[sp,#0x1c]         ;547
00026a  e6f2              B        |L47.82|
;;;549    
                          ENDP

                  |L47.620|
                          DCD      cJSON_malloc
                  |L47.624|
                          DCD      cJSON_free

                          AREA ||i.print_string||, CODE, READONLY, ALIGN=1

                  print_string PROC
;;;288    /* Invote print_string_ptr (which is useful) on an item. */
;;;289    static char *print_string(cJSON *item)	{return print_string_ptr(item->valuestring);}
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  6920              LDR      r0,[r4,#0x10]
000006  f7fffffe          BL       print_string_ptr
00000a  bd10              POP      {r4,pc}
;;;290    
                          ENDP


                          AREA ||i.print_string_ptr||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  print_string_ptr PROC
;;;234    /* Render the cstring provided to an escaped version that can be printed. */
;;;235    static char *print_string_ptr(const char *str)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;236    {
000004  4607              MOV      r7,r0
;;;237    	const char *ptr;char *ptr2,*out;int len=0;unsigned char token;
000006  f04f0900          MOV      r9,#0
;;;238    	
;;;239    	if (!str) return cJSON_strdup("");
00000a  b927              CBNZ     r7,|L49.22|
00000c  a041              ADR      r0,|L49.276|
00000e  f7fffffe          BL       cJSON_strdup
                  |L49.18|
;;;240    	ptr=str;
;;;241    	#if  0 
;;;242    	while ((token=*ptr) && ++len) 
;;;243    	{
;;;244    		if (strchr("\"\\\b\f\n\r\t",token)) len++; 
;;;245    		else if (token<32) 
;;;246    			len+=5;
;;;247    		ptr++;
;;;248    	}
;;;249    	#else
;;;250    	token=*ptr;
;;;251    	while ((token) && ++len) 
;;;252    	{
;;;253    		if (strchr("\"\\\b\f\n\r\t",token)) len++; 
;;;254    		else if (token<32) 
;;;255    			len+=5;
;;;256    		ptr++;
;;;257    		token=*ptr;
;;;258    	}
;;;259    	#endif 
;;;260    	
;;;261    	out=(char*)cJSON_malloc(len+3);
;;;262    	if (!out) return 0;
;;;263    
;;;264    	ptr2=out;ptr=str;
;;;265    	*ptr2++='\"';
;;;266    	while (*ptr)
;;;267    	{
;;;268    		if ((unsigned char)*ptr>31 && *ptr!='\"' && *ptr!='\\') *ptr2++=*ptr++;
;;;269    		else
;;;270    		{
;;;271    			*ptr2++='\\';
;;;272    			switch (token=*ptr++)
;;;273    			{
;;;274    				case '\\':	*ptr2++='\\';	break;
;;;275    				case '\"':	*ptr2++='\"';	break;
;;;276    				case '\b':	*ptr2++='b';	break;
;;;277    				case '\f':	*ptr2++='f';	break;
;;;278    				case '\n':	*ptr2++='n';	break;
;;;279    				case '\r':	*ptr2++='r';	break;
;;;280    				case '\t':	*ptr2++='t';	break;
;;;281    				default: sprintf(ptr2,"u%04x",token);ptr2+=5;	break;	/* escape and print */
;;;282    			}
;;;283    		}
;;;284    	}
;;;285    	*ptr2++='\"';*ptr2++=0;
;;;286    	return out;
;;;287    }
000012  e8bd87f0          POP      {r4-r10,pc}
                  |L49.22|
000016  463d              MOV      r5,r7                 ;240
000018  f8958000          LDRB     r8,[r5,#0]            ;250
00001c  e00f              B        |L49.62|
                  |L49.30|
00001e  4641              MOV      r1,r8                 ;253
000020  a03d              ADR      r0,|L49.280|
000022  f7fffffe          BL       strchr
000026  b110              CBZ      r0,|L49.46|
000028  f1090901          ADD      r9,r9,#1              ;253
00002c  e004              B        |L49.56|
                  |L49.46|
00002e  f1b80f20          CMP      r8,#0x20              ;254
000032  da01              BGE      |L49.56|
000034  f1090905          ADD      r9,r9,#5              ;255
                  |L49.56|
000038  1c6d              ADDS     r5,r5,#1              ;256
00003a  f8958000          LDRB     r8,[r5,#0]            ;257
                  |L49.62|
00003e  f1b80f00          CMP      r8,#0                 ;251
000042  d004              BEQ      |L49.78|
000044  f1090001          ADD      r0,r9,#1              ;251
000048  ea5f0900          MOVS     r9,r0                 ;251
00004c  d1e7              BNE      |L49.30|
                  |L49.78|
00004e  f1090003          ADD      r0,r9,#3              ;261
000052  4933              LDR      r1,|L49.288|
000054  6809              LDR      r1,[r1,#0]            ;261  ; cJSON_malloc
000056  4788              BLX      r1                    ;261
000058  4606              MOV      r6,r0                 ;261
00005a  b90e              CBNZ     r6,|L49.96|
00005c  2000              MOVS     r0,#0                 ;262
00005e  e7d8              B        |L49.18|
                  |L49.96|
000060  4634              MOV      r4,r6                 ;264
000062  463d              MOV      r5,r7                 ;264
000064  2022              MOVS     r0,#0x22              ;265
000066  f8040b01          STRB     r0,[r4],#1            ;265
00006a  e047              B        |L49.252|
                  |L49.108|
00006c  7828              LDRB     r0,[r5,#0]            ;268
00006e  281f              CMP      r0,#0x1f              ;268
000070  dd0a              BLE      |L49.136|
000072  7828              LDRB     r0,[r5,#0]            ;268
000074  2822              CMP      r0,#0x22              ;268
000076  d007              BEQ      |L49.136|
000078  7828              LDRB     r0,[r5,#0]            ;268
00007a  285c              CMP      r0,#0x5c              ;268
00007c  d004              BEQ      |L49.136|
00007e  f8150b01          LDRB     r0,[r5],#1            ;268
000082  f8040b01          STRB     r0,[r4],#1            ;268
000086  e039              B        |L49.252|
                  |L49.136|
000088  205c              MOVS     r0,#0x5c              ;271
00008a  f8040b01          STRB     r0,[r4],#1            ;271
00008e  f8151b01          LDRB     r1,[r5],#1            ;272
000092  4688              MOV      r8,r1                 ;272
000094  290c              CMP      r1,#0xc               ;272
000096  d019              BEQ      |L49.204|
000098  dc06              BGT      |L49.168|
00009a  2908              CMP      r1,#8                 ;272
00009c  d012              BEQ      |L49.196|
00009e  2909              CMP      r1,#9                 ;272
0000a0  d020              BEQ      |L49.228|
0000a2  290a              CMP      r1,#0xa               ;272
0000a4  d122              BNE      |L49.236|
0000a6  e015              B        |L49.212|
                  |L49.168|
0000a8  290d              CMP      r1,#0xd               ;272
0000aa  d017              BEQ      |L49.220|
0000ac  2922              CMP      r1,#0x22              ;272
0000ae  d005              BEQ      |L49.188|
0000b0  295c              CMP      r1,#0x5c              ;272
0000b2  d11b              BNE      |L49.236|
0000b4  205c              MOVS     r0,#0x5c              ;274
0000b6  f8040b01          STRB     r0,[r4],#1            ;274
0000ba  e01e              B        |L49.250|
                  |L49.188|
0000bc  2022              MOVS     r0,#0x22              ;275
0000be  f8040b01          STRB     r0,[r4],#1            ;275
0000c2  e01a              B        |L49.250|
                  |L49.196|
0000c4  2062              MOVS     r0,#0x62              ;276
0000c6  f8040b01          STRB     r0,[r4],#1            ;276
0000ca  e016              B        |L49.250|
                  |L49.204|
0000cc  2066              MOVS     r0,#0x66              ;277
0000ce  f8040b01          STRB     r0,[r4],#1            ;277
0000d2  e012              B        |L49.250|
                  |L49.212|
0000d4  206e              MOVS     r0,#0x6e              ;278
0000d6  f8040b01          STRB     r0,[r4],#1            ;278
0000da  e00e              B        |L49.250|
                  |L49.220|
0000dc  2072              MOVS     r0,#0x72              ;279
0000de  f8040b01          STRB     r0,[r4],#1            ;279
0000e2  e00a              B        |L49.250|
                  |L49.228|
0000e4  2074              MOVS     r0,#0x74              ;280
0000e6  f8040b01          STRB     r0,[r4],#1            ;280
0000ea  e006              B        |L49.250|
                  |L49.236|
0000ec  4642              MOV      r2,r8                 ;281
0000ee  a10d              ADR      r1,|L49.292|
0000f0  4620              MOV      r0,r4                 ;281
0000f2  f7fffffe          BL       __2sprintf
0000f6  1d64              ADDS     r4,r4,#5              ;281
0000f8  bf00              NOP                            ;281
                  |L49.250|
0000fa  bf00              NOP                            ;274
                  |L49.252|
0000fc  7828              LDRB     r0,[r5,#0]            ;266
0000fe  2800              CMP      r0,#0                 ;266
000100  d1b4              BNE      |L49.108|
000102  2022              MOVS     r0,#0x22              ;285
000104  f8040b01          STRB     r0,[r4],#1            ;285
000108  2000              MOVS     r0,#0                 ;285
00010a  f8040b01          STRB     r0,[r4],#1            ;285
00010e  4630              MOV      r0,r6                 ;286
000110  e77f              B        |L49.18|
;;;288    /* Invote print_string_ptr (which is useful) on an item. */
                          ENDP

000112  0000              DCW      0x0000
                  |L49.276|
000114  00                DCB      0
000115  00                DCB      0
000116  00                DCB      0
000117  00                DCB      0
                  |L49.280|
000118  225c080c          DCB      """\\\b\f\n\r\t",0
00011c  0a0d0900
                  |L49.288|
                          DCD      cJSON_malloc
                  |L49.292|
000124  75253034          DCB      "u%04x",0
000128  7800    
00012a  00                DCB      0
00012b  00                DCB      0

                          AREA ||i.print_value||, CODE, READONLY, ALIGN=2

                  print_value PROC
;;;340    /* Render a value to text. */
;;;341    static char *print_value(cJSON *item,int depth,int fmt)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;342    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;343    	char *out=0;
00000a  2700              MOVS     r7,#0
;;;344    	if (!item) return 0;
00000c  b914              CBNZ     r4,|L50.20|
00000e  2000              MOVS     r0,#0
                  |L50.16|
;;;345    	switch ((item->type)&255)
;;;346    	{
;;;347    		case cJSON_NULL:	out=cJSON_strdup("null");	break;
;;;348    		case cJSON_False:	out=cJSON_strdup("false");break;
;;;349    		case cJSON_True:	out=cJSON_strdup("true"); break;
;;;350    		case cJSON_Number:	out=print_number(item);break;
;;;351    		case cJSON_String:	out=print_string(item);break;
;;;352    		case cJSON_Array:	out=print_array(item,depth,fmt);break;
;;;353    		case cJSON_Object:	out=print_object(item,depth,fmt);break;
;;;354    	}
;;;355    	return out;
;;;356    }
000010  e8bd81f0          POP      {r4-r8,pc}
                  |L50.20|
000014  7b20              LDRB     r0,[r4,#0xc]          ;345
000016  2807              CMP      r0,#7                 ;345
000018  d22c              BCS      |L50.116|
00001a  e8dff000          TBB      [pc,r0]               ;345
00001e  090e              DCB      0x09,0x0e
000020  0413181d          DCB      0x04,0x13,0x18,0x1d
000024  2400              DCB      0x24,0x00
000026  a015              ADR      r0,|L50.124|
000028  f7fffffe          BL       cJSON_strdup
00002c  4607              MOV      r7,r0                 ;347
00002e  e021              B        |L50.116|
000030  a014              ADR      r0,|L50.132|
000032  f7fffffe          BL       cJSON_strdup
000036  4607              MOV      r7,r0                 ;348
000038  e01c              B        |L50.116|
00003a  a014              ADR      r0,|L50.140|
00003c  f7fffffe          BL       cJSON_strdup
000040  4607              MOV      r7,r0                 ;349
000042  e017              B        |L50.116|
000044  4620              MOV      r0,r4                 ;350
000046  f7fffffe          BL       print_number
00004a  4607              MOV      r7,r0                 ;350
00004c  e012              B        |L50.116|
00004e  4620              MOV      r0,r4                 ;351
000050  f7fffffe          BL       print_string
000054  4607              MOV      r7,r0                 ;351
000056  e00d              B        |L50.116|
000058  4632              MOV      r2,r6                 ;352
00005a  4629              MOV      r1,r5                 ;352
00005c  4620              MOV      r0,r4                 ;352
00005e  f7fffffe          BL       print_array
000062  4607              MOV      r7,r0                 ;352
000064  e006              B        |L50.116|
000066  4632              MOV      r2,r6                 ;353
000068  4629              MOV      r1,r5                 ;353
00006a  4620              MOV      r0,r4                 ;353
00006c  f7fffffe          BL       print_object
000070  4607              MOV      r7,r0                 ;353
000072  bf00              NOP                            ;353
                  |L50.116|
000074  bf00              NOP                            ;347
000076  4638              MOV      r0,r7                 ;355
000078  e7ca              B        |L50.16|
;;;357    
                          ENDP

00007a  0000              DCW      0x0000
                  |L50.124|
00007c  6e756c6c          DCB      "null",0
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
                  |L50.132|
000084  66616c73          DCB      "false",0
000088  6500    
00008a  00                DCB      0
00008b  00                DCB      0
                  |L50.140|
00008c  74727565          DCB      "true",0
000090  00      
000091  00                DCB      0
000092  00                DCB      0
000093  00                DCB      0

                          AREA ||i.skip||, CODE, READONLY, ALIGN=1

                  skip PROC
;;;299    /* Utility to jump whitespace and cr/lf */
;;;300    static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}
000000  e000              B        |L51.4|
                  |L51.2|
000002  1c40              ADDS     r0,r0,#1
                  |L51.4|
000004  b120              CBZ      r0,|L51.16|
000006  7801              LDRB     r1,[r0,#0]
000008  b111              CBZ      r1,|L51.16|
00000a  7801              LDRB     r1,[r0,#0]
00000c  2920              CMP      r1,#0x20
00000e  ddf8              BLE      |L51.2|
                  |L51.16|
000010  4770              BX       lr
;;;301    
                          ENDP


                          AREA ||i.suffix_object||, CODE, READONLY, ALIGN=1

                  suffix_object PROC
;;;555    /* Utility for array list handling. */
;;;556    static void suffix_object(cJSON *prev,cJSON *item) {prev->next=item;item->prev=prev;}
000000  6001              STR      r1,[r0,#0]
000002  6048              STR      r0,[r1,#4]
000004  4770              BX       lr
;;;557    /* Utility for handling references. */
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  firstByteMark
000000  0000c0e0          DCB      0x00,0x00,0xc0,0xe0
000004  f0f8fc            DCB      0xf0,0xf8,0xfc

                          AREA ||.data||, DATA, ALIGN=2

                  cJSON_malloc
                          DCD      hfmem_malloc
                  cJSON_free
                          DCD      hfmem_free
                  ||ep||
                          DCD      0x00000000
